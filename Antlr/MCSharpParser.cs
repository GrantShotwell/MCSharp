//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MCSharp.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class MCSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, END=2, COMMA=3, OP=4, CP=5, OB=6, CB=7, OC=8, CC=9, PLUS=10, MINUS=11, 
		MULTIPLY=12, DIVIDE=13, MODULUS=14, INCREMENT=15, DECREMENT=16, BITWISE_AND=17, 
		BITWISE_OR=18, BITWISE_XOR=19, BITWISE_NOT=20, BOOLEAN_AND=21, BOOLEAN_OR=22, 
		BOOLEAN_NOT=23, SHIFT_LEFT=24, SHIFT_RIGHT=25, EQUIVALENT=26, NOT_EQUIVALENT=27, 
		LESS_THAN=28, GREATER_THAN=29, LESS_THAN_EQUAL=30, GREATER_THAN_EQUAL=31, 
		DOT=32, ASSIGN=33, ASSIGN_PLUS=34, ASSIGN_MINUS=35, ASSIGN_MULTIPLY=36, 
		ASSIGN_DIVIDE=37, ASSIGN_MODULUS=38, ASSIGN_ACCESS=39, ASSIGN_AND=40, 
		ASSIGN_OR=41, ASSIGN_XOR=42, ASSIGN_LEFT=43, ASSIGN_RIGHT=44, CONDITION_IF=45, 
		CONDITION_ELSE=46, RANGE_INCLUSIVE=47, RANGE_EXCLUSIVE=48, IS=49, AS=50, 
		IN=51, OUT=52, LAMBDA=53, NULL_COALESCING=54, IF=55, ELSE=56, FOR=57, 
		FOREACH=58, DO=59, WHILE=60, RETURN=61, THROW=62, TRY=63, CATCH=64, FINALLY=65, 
		NEW=66, TYPEOF=67, CHECKED=68, UNCHECKED=69, DEFAULT=70, DELEGATE=71, 
		SIZEOF=72, WITH=73, GET=74, SET=75, PUBLIC=76, PRIVATE=77, PROTECTED=78, 
		STATIC=79, ABSTRACT=80, VIRTUAL=81, OVERRIDE=82, REF=83, CLASS=84, STRUCT=85, 
		WHITESPACE=86, SINGLELINE_COMMENT=87, NEWLINE=88, MULTILINE_COMMENT=89, 
		STRING=90, DECIMAL=91, INTEGER=92, BOOLEAN=93, NAME=94;
	public const int
		RULE_script = 0, RULE_generic_parameter = 1, RULE_generic_parameter_list = 2, 
		RULE_generic_parameters = 3, RULE_method_parameter = 4, RULE_method_parameter_list = 5, 
		RULE_method_parameters = 6, RULE_indexer_parameters = 7, RULE_argument = 8, 
		RULE_argument_list = 9, RULE_generic_arguments = 10, RULE_method_arguments = 11, 
		RULE_indexer_arguments = 12, RULE_member_initializer = 13, RULE_object_initializer = 14, 
		RULE_element_initializer = 15, RULE_collection_initializer = 16, RULE_anonymous_element_initializer = 17, 
		RULE_anonymous_object_initializer = 18, RULE_modifier = 19, RULE_parameter_modifier = 20, 
		RULE_class_type = 21, RULE_attribute_tag = 22, RULE_type_definition = 23, 
		RULE_member_definition = 24, RULE_constructor_definition = 25, RULE_field_definition = 26, 
		RULE_property_definition = 27, RULE_property_get_definition = 28, RULE_property_set_definition = 29, 
		RULE_method_definition = 30, RULE_literal = 31, RULE_identifier = 32, 
		RULE_short_identifier = 33, RULE_statement = 34, RULE_code_block = 35, 
		RULE_additive_operator = 36, RULE_multiplicative_operator = 37, RULE_step_operator = 38, 
		RULE_bitwise_operator = 39, RULE_boolean_operator = 40, RULE_shift_operator = 41, 
		RULE_equality_operator = 42, RULE_relation_operator = 43, RULE_assignment_operator = 44, 
		RULE_range_operator = 45, RULE_language_function = 46, RULE_if_statement = 47, 
		RULE_for_statement = 48, RULE_foreach_statement = 49, RULE_while_statement = 50, 
		RULE_do_statement = 51, RULE_return_statement = 52, RULE_throw_statement = 53, 
		RULE_try_statement = 54, RULE_expression = 55, RULE_initialization_expression = 56, 
		RULE_non_assignment_expression = 57, RULE_lambda_expression = 58, RULE_expression_list = 59, 
		RULE_conditional_expression = 60, RULE_null_coalescing_expression = 61, 
		RULE_conditional_or_expression = 62, RULE_conditional_and_expression = 63, 
		RULE_inclusive_or_expression = 64, RULE_exclusive_or_expression = 65, 
		RULE_and_expression = 66, RULE_equality_expression = 67, RULE_relational_expression = 68, 
		RULE_relation_or_type_check = 69, RULE_shift_expression = 70, RULE_additive_expression = 71, 
		RULE_multiplicative_expression = 72, RULE_with_expression = 73, RULE_range_expression = 74, 
		RULE_pre_step_expression = 75, RULE_post_step_expression = 76, RULE_unary_expression = 77, 
		RULE_cast_expression = 78, RULE_pointer_indirection_expression = 79, RULE_addressof_expression = 80, 
		RULE_assignment_expression = 81, RULE_primary_expression = 82, RULE_array_creation_expression = 83, 
		RULE_array_rank_specifier = 84, RULE_array_initializer = 85, RULE_variable_initializer = 86, 
		RULE_primary_no_array_creation_expression = 87, RULE_member_access_prefix = 88, 
		RULE_member_access = 89, RULE_keyword_expression = 90, RULE_object_or_collection_initializer = 91, 
		RULE_new_keyword_expression = 92, RULE_typeof_keyword_expression = 93, 
		RULE_checked_expression = 94, RULE_unchecked_expression = 95, RULE_default_keyword_expression = 96, 
		RULE_delegate_keyword_expression = 97, RULE_sizeof_keyword_expression = 98;
	public static readonly string[] ruleNames = {
		"script", "generic_parameter", "generic_parameter_list", "generic_parameters", 
		"method_parameter", "method_parameter_list", "method_parameters", "indexer_parameters", 
		"argument", "argument_list", "generic_arguments", "method_arguments", 
		"indexer_arguments", "member_initializer", "object_initializer", "element_initializer", 
		"collection_initializer", "anonymous_element_initializer", "anonymous_object_initializer", 
		"modifier", "parameter_modifier", "class_type", "attribute_tag", "type_definition", 
		"member_definition", "constructor_definition", "field_definition", "property_definition", 
		"property_get_definition", "property_set_definition", "method_definition", 
		"literal", "identifier", "short_identifier", "statement", "code_block", 
		"additive_operator", "multiplicative_operator", "step_operator", "bitwise_operator", 
		"boolean_operator", "shift_operator", "equality_operator", "relation_operator", 
		"assignment_operator", "range_operator", "language_function", "if_statement", 
		"for_statement", "foreach_statement", "while_statement", "do_statement", 
		"return_statement", "throw_statement", "try_statement", "expression", 
		"initialization_expression", "non_assignment_expression", "lambda_expression", 
		"expression_list", "conditional_expression", "null_coalescing_expression", 
		"conditional_or_expression", "conditional_and_expression", "inclusive_or_expression", 
		"exclusive_or_expression", "and_expression", "equality_expression", "relational_expression", 
		"relation_or_type_check", "shift_expression", "additive_expression", "multiplicative_expression", 
		"with_expression", "range_expression", "pre_step_expression", "post_step_expression", 
		"unary_expression", "cast_expression", "pointer_indirection_expression", 
		"addressof_expression", "assignment_expression", "primary_expression", 
		"array_creation_expression", "array_rank_specifier", "array_initializer", 
		"variable_initializer", "primary_no_array_creation_expression", "member_access_prefix", 
		"member_access", "keyword_expression", "object_or_collection_initializer", 
		"new_keyword_expression", "typeof_keyword_expression", "checked_expression", 
		"unchecked_expression", "default_keyword_expression", "delegate_keyword_expression", 
		"sizeof_keyword_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'@'", "';'", "','", "'('", "')'", "'['", "']'", "'{'", "'}'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'&'", "'|'", "'^'", "'~'", 
		"'&&'", "'||'", "'!'", "'<<'", "'>>'", "'=='", "'!='", "'>'", "'<'", "'>='", 
		"'<='", "'.'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.='", 
		"'&='", "'|='", "'^='", "'<<='", "'>>='", "'?'", "':'", "'..'", "'..^'", 
		"'is'", "'as'", "'in'", "'out'", "'=>'", "'??'", "'if'", "'else'", "'for'", 
		"'foreach'", "'do'", "'while'", "'return'", "'throw'", "'try'", "'catch'", 
		"'finally'", "'new'", "'typeof'", "'checked'", "'unchecked'", "'default'", 
		"'delegate'", "'sizeof'", "'with'", "'get'", "'set'", "'public'", "'private'", 
		"'protected'", "'static'", "'abstract'", "'virtual'", "'override'", "'ref'", 
		"'class'", "'struct'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "END", "COMMA", "OP", "CP", "OB", "CB", "OC", "CC", "PLUS", 
		"MINUS", "MULTIPLY", "DIVIDE", "MODULUS", "INCREMENT", "DECREMENT", "BITWISE_AND", 
		"BITWISE_OR", "BITWISE_XOR", "BITWISE_NOT", "BOOLEAN_AND", "BOOLEAN_OR", 
		"BOOLEAN_NOT", "SHIFT_LEFT", "SHIFT_RIGHT", "EQUIVALENT", "NOT_EQUIVALENT", 
		"LESS_THAN", "GREATER_THAN", "LESS_THAN_EQUAL", "GREATER_THAN_EQUAL", 
		"DOT", "ASSIGN", "ASSIGN_PLUS", "ASSIGN_MINUS", "ASSIGN_MULTIPLY", "ASSIGN_DIVIDE", 
		"ASSIGN_MODULUS", "ASSIGN_ACCESS", "ASSIGN_AND", "ASSIGN_OR", "ASSIGN_XOR", 
		"ASSIGN_LEFT", "ASSIGN_RIGHT", "CONDITION_IF", "CONDITION_ELSE", "RANGE_INCLUSIVE", 
		"RANGE_EXCLUSIVE", "IS", "AS", "IN", "OUT", "LAMBDA", "NULL_COALESCING", 
		"IF", "ELSE", "FOR", "FOREACH", "DO", "WHILE", "RETURN", "THROW", "TRY", 
		"CATCH", "FINALLY", "NEW", "TYPEOF", "CHECKED", "UNCHECKED", "DEFAULT", 
		"DELEGATE", "SIZEOF", "WITH", "GET", "SET", "PUBLIC", "PRIVATE", "PROTECTED", 
		"STATIC", "ABSTRACT", "VIRTUAL", "OVERRIDE", "REF", "CLASS", "STRUCT", 
		"WHITESPACE", "SINGLELINE_COMMENT", "NEWLINE", "MULTILINE_COMMENT", "STRING", 
		"DECIMAL", "INTEGER", "BOOLEAN", "NAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MCSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MCSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MCSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MCSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ScriptContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MCSharpParser.Eof, 0); }
		public Type_definitionContext[] type_definition() {
			return GetRuleContexts<Type_definitionContext>();
		}
		public Type_definitionContext type_definition(int i) {
			return GetRuleContext<Type_definitionContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OB || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PUBLIC - 76)) | (1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (STATIC - 76)) | (1L << (ABSTRACT - 76)) | (1L << (VIRTUAL - 76)) | (1L << (CLASS - 76)) | (1L << (STRUCT - 76)))) != 0)) {
				{
				{
				State = 198; type_definition();
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parameterContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public Generic_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterGeneric_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitGeneric_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameterContext generic_parameter() {
		Generic_parameterContext _localctx = new Generic_parameterContext(Context, State);
		EnterRule(_localctx, 2, RULE_generic_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parameter_listContext : ParserRuleContext {
		public Generic_parameterContext[] generic_parameter() {
			return GetRuleContexts<Generic_parameterContext>();
		}
		public Generic_parameterContext generic_parameter(int i) {
			return GetRuleContext<Generic_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MCSharpParser.COMMA, i);
		}
		public Generic_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterGeneric_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitGeneric_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameter_listContext generic_parameter_list() {
		Generic_parameter_listContext _localctx = new Generic_parameter_listContext(Context, State);
		EnterRule(_localctx, 4, RULE_generic_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; generic_parameter();
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 209; Match(COMMA);
				State = 210; generic_parameter();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parametersContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(MCSharpParser.LESS_THAN, 0); }
		public Generic_parameter_listContext generic_parameter_list() {
			return GetRuleContext<Generic_parameter_listContext>(0);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(MCSharpParser.GREATER_THAN, 0); }
		public Generic_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterGeneric_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitGeneric_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parametersContext generic_parameters() {
		Generic_parametersContext _localctx = new Generic_parametersContext(Context, State);
		EnterRule(_localctx, 6, RULE_generic_parameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(LESS_THAN);
			State = 217; generic_parameter_list();
			State = 218; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_parameterContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(MCSharpParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(MCSharpParser.NAME, i);
		}
		public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		public Method_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMethod_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMethod_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Method_parameterContext method_parameter() {
		Method_parameterContext _localctx = new Method_parameterContext(Context, State);
		EnterRule(_localctx, 8, RULE_method_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (IN - 51)) | (1L << (OUT - 51)) | (1L << (REF - 51)))) != 0)) {
				{
				State = 220; parameter_modifier();
				}
			}

			State = 223; Match(NAME);
			State = 224; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_parameter_listContext : ParserRuleContext {
		public Method_parameterContext[] method_parameter() {
			return GetRuleContexts<Method_parameterContext>();
		}
		public Method_parameterContext method_parameter(int i) {
			return GetRuleContext<Method_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MCSharpParser.COMMA, i);
		}
		public Method_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMethod_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMethod_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Method_parameter_listContext method_parameter_list() {
		Method_parameter_listContext _localctx = new Method_parameter_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_method_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; method_parameter();
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 227; Match(COMMA);
				State = 228; method_parameter();
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_parametersContext : ParserRuleContext {
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public Method_parameter_listContext method_parameter_list() {
			return GetRuleContext<Method_parameter_listContext>(0);
		}
		public Method_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMethod_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMethod_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Method_parametersContext method_parameters() {
		Method_parametersContext _localctx = new Method_parametersContext(Context, State);
		EnterRule(_localctx, 12, RULE_method_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(OP);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (IN - 51)) | (1L << (OUT - 51)) | (1L << (REF - 51)) | (1L << (NAME - 51)))) != 0)) {
				{
				State = 235; method_parameter_list();
				}
			}

			State = 238; Match(CP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_parametersContext : ParserRuleContext {
		public ITerminalNode OB() { return GetToken(MCSharpParser.OB, 0); }
		public ITerminalNode CB() { return GetToken(MCSharpParser.CB, 0); }
		public Method_parameter_listContext method_parameter_list() {
			return GetRuleContext<Method_parameter_listContext>(0);
		}
		public Indexer_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterIndexer_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitIndexer_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_parametersContext indexer_parameters() {
		Indexer_parametersContext _localctx = new Indexer_parametersContext(Context, State);
		EnterRule(_localctx, 14, RULE_indexer_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(OB);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (IN - 51)) | (1L << (OUT - 51)) | (1L << (REF - 51)) | (1L << (NAME - 51)))) != 0)) {
				{
				State = 241; method_parameter_list();
				}
			}

			State = 244; Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		public ITerminalNode[] NAME() { return GetTokens(MCSharpParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(MCSharpParser.NAME, i);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 16, RULE_argument);
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case OP:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case INCREMENT:
			case DECREMENT:
			case BITWISE_AND:
			case BITWISE_NOT:
			case BOOLEAN_NOT:
			case NEW:
			case TYPEOF:
			case CHECKED:
			case UNCHECKED:
			case DEFAULT:
			case SIZEOF:
			case STRING:
			case DECIMAL:
			case INTEGER:
			case BOOLEAN:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246; expression();
				}
				break;
			case IN:
			case OUT:
			case REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247; parameter_modifier();
				State = 248; Match(NAME);
				State = 249; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MCSharpParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 18, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; argument();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 254; Match(COMMA);
				State = 255; argument();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_argumentsContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(MCSharpParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(MCSharpParser.GREATER_THAN, 0); }
		public Generic_parameter_listContext generic_parameter_list() {
			return GetRuleContext<Generic_parameter_listContext>(0);
		}
		public Generic_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterGeneric_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitGeneric_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Generic_argumentsContext generic_arguments() {
		Generic_argumentsContext _localctx = new Generic_argumentsContext(Context, State);
		EnterRule(_localctx, 20, RULE_generic_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(LESS_THAN);
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 262; generic_parameter_list();
				}
			}

			State = 265; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_argumentsContext : ParserRuleContext {
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMethod_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMethod_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Method_argumentsContext method_arguments() {
		Method_argumentsContext _localctx = new Method_argumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_method_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(OP);
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << OP) | (1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << BITWISE_AND) | (1L << BITWISE_NOT) | (1L << BOOLEAN_NOT) | (1L << IN) | (1L << OUT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NEW - 66)) | (1L << (TYPEOF - 66)) | (1L << (CHECKED - 66)) | (1L << (UNCHECKED - 66)) | (1L << (DEFAULT - 66)) | (1L << (SIZEOF - 66)) | (1L << (REF - 66)) | (1L << (STRING - 66)) | (1L << (DECIMAL - 66)) | (1L << (INTEGER - 66)) | (1L << (BOOLEAN - 66)) | (1L << (NAME - 66)))) != 0)) {
				{
				State = 268; argument_list();
				}
			}

			State = 271; Match(CP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_argumentsContext : ParserRuleContext {
		public ITerminalNode OB() { return GetToken(MCSharpParser.OB, 0); }
		public ITerminalNode CB() { return GetToken(MCSharpParser.CB, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Indexer_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterIndexer_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitIndexer_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_argumentsContext indexer_arguments() {
		Indexer_argumentsContext _localctx = new Indexer_argumentsContext(Context, State);
		EnterRule(_localctx, 24, RULE_indexer_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(OB);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << OP) | (1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << BITWISE_AND) | (1L << BITWISE_NOT) | (1L << BOOLEAN_NOT) | (1L << IN) | (1L << OUT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NEW - 66)) | (1L << (TYPEOF - 66)) | (1L << (CHECKED - 66)) | (1L << (UNCHECKED - 66)) | (1L << (DEFAULT - 66)) | (1L << (SIZEOF - 66)) | (1L << (REF - 66)) | (1L << (STRING - 66)) | (1L << (DECIMAL - 66)) | (1L << (INTEGER - 66)) | (1L << (BOOLEAN - 66)) | (1L << (NAME - 66)))) != 0)) {
				{
				State = 274; argument_list();
				}
			}

			State = 277; Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializerContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MCSharpParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Generic_argumentsContext generic_arguments() {
			return GetRuleContext<Generic_argumentsContext>(0);
		}
		public Member_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMember_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMember_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializerContext member_initializer() {
		Member_initializerContext _localctx = new Member_initializerContext(Context, State);
		EnterRule(_localctx, 26, RULE_member_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(NAME);
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS_THAN) {
				{
				State = 280; generic_arguments();
				}
			}

			State = 283; Match(ASSIGN);
			State = 286;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case OP:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case INCREMENT:
			case DECREMENT:
			case BITWISE_AND:
			case BITWISE_NOT:
			case BOOLEAN_NOT:
			case NEW:
			case TYPEOF:
			case CHECKED:
			case UNCHECKED:
			case DEFAULT:
			case SIZEOF:
			case STRING:
			case DECIMAL:
			case INTEGER:
			case BOOLEAN:
			case NAME:
				{
				State = 284; expression();
				}
				break;
			case OC:
				{
				State = 285; object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_initializerContext : ParserRuleContext {
		public ITerminalNode OC() { return GetToken(MCSharpParser.OC, 0); }
		public ITerminalNode CC() { return GetToken(MCSharpParser.CC, 0); }
		public Member_initializerContext[] member_initializer() {
			return GetRuleContexts<Member_initializerContext>();
		}
		public Member_initializerContext member_initializer(int i) {
			return GetRuleContext<Member_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MCSharpParser.COMMA, i);
		}
		public Object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterObject_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitObject_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Object_initializerContext object_initializer() {
		Object_initializerContext _localctx = new Object_initializerContext(Context, State);
		EnterRule(_localctx, 28, RULE_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(OC);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 289; member_initializer();
				State = 292;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 290; Match(COMMA);
					State = 291; member_initializer();
					}
					break;
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 294; Match(COMMA);
					}
				}

				}
			}

			State = 299; Match(CC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializerContext : ParserRuleContext {
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ITerminalNode OC() { return GetToken(MCSharpParser.OC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CC() { return GetToken(MCSharpParser.CC, 0); }
		public Element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterElement_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitElement_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializerContext element_initializer() {
		Element_initializerContext _localctx = new Element_initializerContext(Context, State);
		EnterRule(_localctx, 30, RULE_element_initializer);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case OP:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case INCREMENT:
			case DECREMENT:
			case BITWISE_AND:
			case BITWISE_NOT:
			case BOOLEAN_NOT:
			case NEW:
			case TYPEOF:
			case CHECKED:
			case UNCHECKED:
			case DEFAULT:
			case SIZEOF:
			case STRING:
			case DECIMAL:
			case INTEGER:
			case BOOLEAN:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301; non_assignment_expression();
				}
				break;
			case OC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302; Match(OC);
				State = 303; expression();
				State = 304; Match(CC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_initializerContext : ParserRuleContext {
		public ITerminalNode OC() { return GetToken(MCSharpParser.OC, 0); }
		public ITerminalNode CC() { return GetToken(MCSharpParser.CC, 0); }
		public Element_initializerContext[] element_initializer() {
			return GetRuleContexts<Element_initializerContext>();
		}
		public Element_initializerContext element_initializer(int i) {
			return GetRuleContext<Element_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MCSharpParser.COMMA, i);
		}
		public Collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterCollection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitCollection_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Collection_initializerContext collection_initializer() {
		Collection_initializerContext _localctx = new Collection_initializerContext(Context, State);
		EnterRule(_localctx, 32, RULE_collection_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(OC);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << OP) | (1L << OC) | (1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << BITWISE_AND) | (1L << BITWISE_NOT) | (1L << BOOLEAN_NOT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NEW - 66)) | (1L << (TYPEOF - 66)) | (1L << (CHECKED - 66)) | (1L << (UNCHECKED - 66)) | (1L << (DEFAULT - 66)) | (1L << (SIZEOF - 66)) | (1L << (STRING - 66)) | (1L << (DECIMAL - 66)) | (1L << (INTEGER - 66)) | (1L << (BOOLEAN - 66)) | (1L << (NAME - 66)))) != 0)) {
				{
				State = 309; element_initializer();
				State = 312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 310; Match(COMMA);
					State = 311; element_initializer();
					}
					break;
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 314; Match(COMMA);
					}
				}

				}
			}

			State = 319; Match(CC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_element_initializerContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public Generic_argumentsContext generic_arguments() {
			return GetRuleContext<Generic_argumentsContext>(0);
		}
		public Member_accessContext member_access() {
			return GetRuleContext<Member_accessContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(MCSharpParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Anonymous_element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_element_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAnonymous_element_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAnonymous_element_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_element_initializerContext anonymous_element_initializer() {
		Anonymous_element_initializerContext _localctx = new Anonymous_element_initializerContext(Context, State);
		EnterRule(_localctx, 34, RULE_anonymous_element_initializer);
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321; Match(NAME);
				State = 323;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 322; generic_arguments();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325; member_access();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 326; identifier();
				State = 327; Match(ASSIGN);
				State = 328; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_initializerContext : ParserRuleContext {
		public ITerminalNode OC() { return GetToken(MCSharpParser.OC, 0); }
		public ITerminalNode CC() { return GetToken(MCSharpParser.CC, 0); }
		public Anonymous_element_initializerContext[] anonymous_element_initializer() {
			return GetRuleContexts<Anonymous_element_initializerContext>();
		}
		public Anonymous_element_initializerContext anonymous_element_initializer(int i) {
			return GetRuleContext<Anonymous_element_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MCSharpParser.COMMA, i);
		}
		public Anonymous_object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAnonymous_object_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAnonymous_object_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_initializerContext anonymous_object_initializer() {
		Anonymous_object_initializerContext _localctx = new Anonymous_object_initializerContext(Context, State);
		EnterRule(_localctx, 36, RULE_anonymous_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(OC);
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==OP || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NEW - 66)) | (1L << (TYPEOF - 66)) | (1L << (CHECKED - 66)) | (1L << (UNCHECKED - 66)) | (1L << (DEFAULT - 66)) | (1L << (SIZEOF - 66)) | (1L << (STRING - 66)) | (1L << (DECIMAL - 66)) | (1L << (INTEGER - 66)) | (1L << (BOOLEAN - 66)) | (1L << (NAME - 66)))) != 0)) {
				{
				State = 333; anonymous_element_initializer();
				State = 336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 334; Match(COMMA);
					State = 335; anonymous_element_initializer();
					}
					break;
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 338; Match(COMMA);
					}
				}

				}
			}

			State = 343; Match(CC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(MCSharpParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(MCSharpParser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(MCSharpParser.PROTECTED, 0); }
		public ITerminalNode STATIC() { return GetToken(MCSharpParser.STATIC, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(MCSharpParser.ABSTRACT, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(MCSharpParser.VIRTUAL, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PUBLIC - 76)) | (1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (STATIC - 76)) | (1L << (ABSTRACT - 76)) | (1L << (VIRTUAL - 76)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(MCSharpParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(MCSharpParser.OUT, 0); }
		public ITerminalNode REF() { return GetToken(MCSharpParser.REF, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (IN - 51)) | (1L << (OUT - 51)) | (1L << (REF - 51)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(MCSharpParser.CLASS, 0); }
		public ITerminalNode STRUCT() { return GetToken(MCSharpParser.STRUCT, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 42, RULE_class_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			_la = TokenStream.LA(1);
			if ( !(_la==CLASS || _la==STRUCT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_tagContext : ParserRuleContext {
		public ITerminalNode OB() { return GetToken(MCSharpParser.OB, 0); }
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public Method_parametersContext method_parameters() {
			return GetRuleContext<Method_parametersContext>(0);
		}
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public ITerminalNode CB() { return GetToken(MCSharpParser.CB, 0); }
		public Attribute_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAttribute_tag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAttribute_tag(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_tagContext attribute_tag() {
		Attribute_tagContext _localctx = new Attribute_tagContext(Context, State);
		EnterRule(_localctx, 44, RULE_attribute_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(OB);
			State = 352; Match(NAME);
			State = 353; Match(OP);
			State = 354; method_parameters();
			State = 355; Match(CP);
			State = 356; Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public ITerminalNode OC() { return GetToken(MCSharpParser.OC, 0); }
		public ITerminalNode CC() { return GetToken(MCSharpParser.CC, 0); }
		public Attribute_tagContext[] attribute_tag() {
			return GetRuleContexts<Attribute_tagContext>();
		}
		public Attribute_tagContext attribute_tag(int i) {
			return GetRuleContext<Attribute_tagContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public Constructor_definitionContext[] constructor_definition() {
			return GetRuleContexts<Constructor_definitionContext>();
		}
		public Constructor_definitionContext constructor_definition(int i) {
			return GetRuleContext<Constructor_definitionContext>(i);
		}
		public Member_definitionContext[] member_definition() {
			return GetRuleContexts<Member_definitionContext>();
		}
		public Member_definitionContext member_definition(int i) {
			return GetRuleContext<Member_definitionContext>(i);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterType_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitType_definition(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OB) {
				{
				{
				State = 358; attribute_tag();
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PUBLIC - 76)) | (1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (STATIC - 76)) | (1L << (ABSTRACT - 76)) | (1L << (VIRTUAL - 76)))) != 0)) {
				{
				{
				State = 364; modifier();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 370; class_type();
			State = 371; Match(NAME);
			State = 372; Match(OC);
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OB || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PUBLIC - 76)) | (1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (STATIC - 76)) | (1L << (ABSTRACT - 76)) | (1L << (VIRTUAL - 76)) | (1L << (NAME - 76)))) != 0)) {
				{
				State = 375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 373; constructor_definition();
					}
					break;
				case 2:
					{
					State = 374; member_definition();
					}
					break;
				}
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 380; Match(CC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_definitionContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(MCSharpParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(MCSharpParser.NAME, i);
		}
		public Field_definitionContext field_definition() {
			return GetRuleContext<Field_definitionContext>(0);
		}
		public Property_definitionContext property_definition() {
			return GetRuleContext<Property_definitionContext>(0);
		}
		public Method_definitionContext method_definition() {
			return GetRuleContext<Method_definitionContext>(0);
		}
		public Attribute_tagContext[] attribute_tag() {
			return GetRuleContexts<Attribute_tagContext>();
		}
		public Attribute_tagContext attribute_tag(int i) {
			return GetRuleContext<Attribute_tagContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public Member_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMember_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMember_definition(this);
		}
	}

	[RuleVersion(0)]
	public Member_definitionContext member_definition() {
		Member_definitionContext _localctx = new Member_definitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_member_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OB) {
				{
				{
				State = 382; attribute_tag();
				}
				}
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PUBLIC - 76)) | (1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (STATIC - 76)) | (1L << (ABSTRACT - 76)) | (1L << (VIRTUAL - 76)))) != 0)) {
				{
				{
				State = 388; modifier();
				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 394; Match(NAME);
			State = 395; Match(NAME);
			State = 399;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END:
			case ASSIGN:
				{
				State = 396; field_definition();
				}
				break;
			case OB:
			case OC:
			case LAMBDA:
			case SET:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case STATIC:
			case ABSTRACT:
			case VIRTUAL:
				{
				State = 397; property_definition();
				}
				break;
			case OP:
			case LESS_THAN:
				{
				State = 398; method_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_definitionContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public Method_parametersContext method_parameters() {
			return GetRuleContext<Method_parametersContext>(0);
		}
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public ITerminalNode LAMBDA() { return GetToken(MCSharpParser.LAMBDA, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Attribute_tagContext[] attribute_tag() {
			return GetRuleContexts<Attribute_tagContext>();
		}
		public Attribute_tagContext attribute_tag(int i) {
			return GetRuleContext<Attribute_tagContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public Constructor_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterConstructor_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitConstructor_definition(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_definitionContext constructor_definition() {
		Constructor_definitionContext _localctx = new Constructor_definitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_constructor_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OB) {
				{
				{
				State = 401; attribute_tag();
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PUBLIC - 76)) | (1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (STATIC - 76)) | (1L << (ABSTRACT - 76)) | (1L << (VIRTUAL - 76)))) != 0)) {
				{
				{
				State = 407; modifier();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 413; Match(NAME);
			State = 414; method_parameters();
			State = 418;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OC:
				{
				State = 415; code_block();
				}
				break;
			case LAMBDA:
				{
				State = 416; Match(LAMBDA);
				State = 417; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_definitionContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(MCSharpParser.END, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MCSharpParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Field_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterField_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitField_definition(this);
		}
	}

	[RuleVersion(0)]
	public Field_definitionContext field_definition() {
		Field_definitionContext _localctx = new Field_definitionContext(Context, State);
		EnterRule(_localctx, 52, RULE_field_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 420; Match(ASSIGN);
				State = 421; expression();
				}
			}

			State = 424; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_definitionContext : ParserRuleContext {
		public ITerminalNode LAMBDA() { return GetToken(MCSharpParser.LAMBDA, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OC() { return GetToken(MCSharpParser.OC, 0); }
		public Property_get_definitionContext property_get_definition() {
			return GetRuleContext<Property_get_definitionContext>(0);
		}
		public Property_set_definitionContext property_set_definition() {
			return GetRuleContext<Property_set_definitionContext>(0);
		}
		public Attribute_tagContext[] attribute_tag() {
			return GetRuleContexts<Attribute_tagContext>();
		}
		public Attribute_tagContext attribute_tag(int i) {
			return GetRuleContext<Attribute_tagContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ITerminalNode CC() { return GetToken(MCSharpParser.CC, 0); }
		public Property_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterProperty_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitProperty_definition(this);
		}
	}

	[RuleVersion(0)]
	public Property_definitionContext property_definition() {
		Property_definitionContext _localctx = new Property_definitionContext(Context, State);
		EnterRule(_localctx, 54, RULE_property_definition);
		int _la;
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LAMBDA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; Match(LAMBDA);
				State = 427; expression();
				}
				break;
			case OC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 428; Match(OC);
				{
				{
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OB) {
					{
					{
					State = 429; attribute_tag();
					}
					}
					State = 434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PUBLIC - 76)) | (1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (STATIC - 76)) | (1L << (ABSTRACT - 76)) | (1L << (VIRTUAL - 76)))) != 0)) {
					{
					{
					State = 435; modifier();
					}
					}
					State = 440;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 441; property_get_definition();
				}
				State = 456;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 446;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==OB) {
						{
						{
						State = 443; attribute_tag();
						}
						}
						State = 448;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 452;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PUBLIC - 76)) | (1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (STATIC - 76)) | (1L << (ABSTRACT - 76)) | (1L << (VIRTUAL - 76)))) != 0)) {
						{
						{
						State = 449; modifier();
						}
						}
						State = 454;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 455; property_set_definition();
					}
					break;
				}
				}
				}
				break;
			case OB:
			case SET:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case STATIC:
			case ABSTRACT:
			case VIRTUAL:
				EnterOuterAlt(_localctx, 3);
				{
				{
				{
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OB) {
					{
					{
					State = 458; attribute_tag();
					}
					}
					State = 463;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PUBLIC - 76)) | (1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (STATIC - 76)) | (1L << (ABSTRACT - 76)) | (1L << (VIRTUAL - 76)))) != 0)) {
					{
					{
					State = 464; modifier();
					}
					}
					State = 469;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 470; property_set_definition();
				}
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OB || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (GET - 74)) | (1L << (PUBLIC - 74)) | (1L << (PRIVATE - 74)) | (1L << (PROTECTED - 74)) | (1L << (STATIC - 74)) | (1L << (ABSTRACT - 74)) | (1L << (VIRTUAL - 74)))) != 0)) {
					{
					State = 475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==OB) {
						{
						{
						State = 472; attribute_tag();
						}
						}
						State = 477;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 481;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PUBLIC - 76)) | (1L << (PRIVATE - 76)) | (1L << (PROTECTED - 76)) | (1L << (STATIC - 76)) | (1L << (ABSTRACT - 76)) | (1L << (VIRTUAL - 76)))) != 0)) {
						{
						{
						State = 478; modifier();
						}
						}
						State = 483;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 484; property_get_definition();
					}
				}

				}
				State = 487; Match(CC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_get_definitionContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(MCSharpParser.GET, 0); }
		public ITerminalNode END() { return GetToken(MCSharpParser.END, 0); }
		public ITerminalNode LAMBDA() { return GetToken(MCSharpParser.LAMBDA, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Property_get_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_get_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterProperty_get_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitProperty_get_definition(this);
		}
	}

	[RuleVersion(0)]
	public Property_get_definitionContext property_get_definition() {
		Property_get_definitionContext _localctx = new Property_get_definitionContext(Context, State);
		EnterRule(_localctx, 56, RULE_property_get_definition);
		try {
			State = 500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491; Match(GET);
				State = 492; Match(END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 493; Match(GET);
				State = 494; Match(LAMBDA);
				State = 495; expression();
				State = 496; Match(END);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 498; Match(GET);
				State = 499; code_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_set_definitionContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(MCSharpParser.SET, 0); }
		public ITerminalNode END() { return GetToken(MCSharpParser.END, 0); }
		public ITerminalNode LAMBDA() { return GetToken(MCSharpParser.LAMBDA, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Property_set_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_set_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterProperty_set_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitProperty_set_definition(this);
		}
	}

	[RuleVersion(0)]
	public Property_set_definitionContext property_set_definition() {
		Property_set_definitionContext _localctx = new Property_set_definitionContext(Context, State);
		EnterRule(_localctx, 58, RULE_property_set_definition);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 502; Match(SET);
				State = 503; Match(END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504; Match(SET);
				State = 505; Match(LAMBDA);
				State = 506; expression();
				State = 507; Match(END);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 509; Match(SET);
				State = 510; code_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_definitionContext : ParserRuleContext {
		public Method_parametersContext method_parameters() {
			return GetRuleContext<Method_parametersContext>(0);
		}
		public ITerminalNode LAMBDA() { return GetToken(MCSharpParser.LAMBDA, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(MCSharpParser.END, 0); }
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public Method_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMethod_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMethod_definition(this);
		}
	}

	[RuleVersion(0)]
	public Method_definitionContext method_definition() {
		Method_definitionContext _localctx = new Method_definitionContext(Context, State);
		EnterRule(_localctx, 60, RULE_method_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS_THAN) {
				{
				State = 513; generic_parameters();
				}
			}

			State = 516; method_parameters();
			State = 522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LAMBDA:
				{
				State = 517; Match(LAMBDA);
				State = 518; expression();
				State = 519; Match(END);
				}
				break;
			case OC:
				{
				State = 521; code_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(MCSharpParser.INTEGER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(MCSharpParser.BOOLEAN, 0); }
		public ITerminalNode DECIMAL() { return GetToken(MCSharpParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(MCSharpParser.STRING, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (STRING - 90)) | (1L << (DECIMAL - 90)) | (1L << (INTEGER - 90)) | (1L << (BOOLEAN - 90)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(MCSharpParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(MCSharpParser.NAME, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(MCSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(MCSharpParser.DOT, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 526; Match(T__0);
				}
			}

			State = 529; Match(NAME);
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 530; Match(DOT);
				State = 531; Match(NAME);
				}
				}
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Short_identifierContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public Short_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_short_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterShort_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitShort_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Short_identifierContext short_identifier() {
		Short_identifierContext _localctx = new Short_identifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_short_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 537; Match(T__0);
				}
			}

			State = 540; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Language_functionContext language_function() {
			return GetRuleContext<Language_functionContext>(0);
		}
		public Initialization_expressionContext initialization_expression() {
			return GetRuleContext<Initialization_expressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(MCSharpParser.END, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_statement);
		try {
			State = 550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 542; code_block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 543; language_function();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 544; initialization_expression();
				State = 545; Match(END);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 547; expression();
				State = 548; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_blockContext : ParserRuleContext {
		public ITerminalNode OC() { return GetToken(MCSharpParser.OC, 0); }
		public ITerminalNode CC() { return GetToken(MCSharpParser.CC, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Code_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterCode_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitCode_block(this);
		}
	}

	[RuleVersion(0)]
	public Code_blockContext code_block() {
		Code_blockContext _localctx = new Code_blockContext(Context, State);
		EnterRule(_localctx, 70, RULE_code_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; Match(OC);
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << OP) | (1L << OC) | (1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << BITWISE_AND) | (1L << BITWISE_NOT) | (1L << BOOLEAN_NOT) | (1L << IF) | (1L << FOR) | (1L << FOREACH) | (1L << DO) | (1L << WHILE) | (1L << RETURN) | (1L << THROW) | (1L << TRY))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NEW - 66)) | (1L << (TYPEOF - 66)) | (1L << (CHECKED - 66)) | (1L << (UNCHECKED - 66)) | (1L << (DEFAULT - 66)) | (1L << (SIZEOF - 66)) | (1L << (STRING - 66)) | (1L << (DECIMAL - 66)) | (1L << (INTEGER - 66)) | (1L << (BOOLEAN - 66)) | (1L << (NAME - 66)))) != 0)) {
				{
				{
				State = 553; statement();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 559; Match(CC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(MCSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(MCSharpParser.MINUS, 0); }
		public Additive_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAdditive_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAdditive_operator(this);
		}
	}

	[RuleVersion(0)]
	public Additive_operatorContext additive_operator() {
		Additive_operatorContext _localctx = new Additive_operatorContext(Context, State);
		EnterRule(_localctx, 72, RULE_additive_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_operatorContext : ParserRuleContext {
		public ITerminalNode MULTIPLY() { return GetToken(MCSharpParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(MCSharpParser.DIVIDE, 0); }
		public ITerminalNode MODULUS() { return GetToken(MCSharpParser.MODULUS, 0); }
		public Multiplicative_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMultiplicative_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMultiplicative_operator(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_operatorContext multiplicative_operator() {
		Multiplicative_operatorContext _localctx = new Multiplicative_operatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_multiplicative_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULTIPLY) | (1L << DIVIDE) | (1L << MODULUS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Step_operatorContext : ParserRuleContext {
		public ITerminalNode INCREMENT() { return GetToken(MCSharpParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(MCSharpParser.DECREMENT, 0); }
		public Step_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterStep_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitStep_operator(this);
		}
	}

	[RuleVersion(0)]
	public Step_operatorContext step_operator() {
		Step_operatorContext _localctx = new Step_operatorContext(Context, State);
		EnterRule(_localctx, 76, RULE_step_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			_la = TokenStream.LA(1);
			if ( !(_la==INCREMENT || _la==DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_operatorContext : ParserRuleContext {
		public ITerminalNode BITWISE_AND() { return GetToken(MCSharpParser.BITWISE_AND, 0); }
		public ITerminalNode BITWISE_OR() { return GetToken(MCSharpParser.BITWISE_OR, 0); }
		public ITerminalNode BITWISE_XOR() { return GetToken(MCSharpParser.BITWISE_XOR, 0); }
		public Bitwise_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterBitwise_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitBitwise_operator(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_operatorContext bitwise_operator() {
		Bitwise_operatorContext _localctx = new Bitwise_operatorContext(Context, State);
		EnterRule(_localctx, 78, RULE_bitwise_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BITWISE_AND) | (1L << BITWISE_OR) | (1L << BITWISE_XOR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_operatorContext : ParserRuleContext {
		public ITerminalNode BOOLEAN_AND() { return GetToken(MCSharpParser.BOOLEAN_AND, 0); }
		public ITerminalNode BOOLEAN_OR() { return GetToken(MCSharpParser.BOOLEAN_OR, 0); }
		public Boolean_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterBoolean_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitBoolean_operator(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_operatorContext boolean_operator() {
		Boolean_operatorContext _localctx = new Boolean_operatorContext(Context, State);
		EnterRule(_localctx, 80, RULE_boolean_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			_la = TokenStream.LA(1);
			if ( !(_la==BOOLEAN_AND || _la==BOOLEAN_OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_operatorContext : ParserRuleContext {
		public ITerminalNode SHIFT_LEFT() { return GetToken(MCSharpParser.SHIFT_LEFT, 0); }
		public ITerminalNode SHIFT_RIGHT() { return GetToken(MCSharpParser.SHIFT_RIGHT, 0); }
		public Shift_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterShift_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitShift_operator(this);
		}
	}

	[RuleVersion(0)]
	public Shift_operatorContext shift_operator() {
		Shift_operatorContext _localctx = new Shift_operatorContext(Context, State);
		EnterRule(_localctx, 82, RULE_shift_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			_la = TokenStream.LA(1);
			if ( !(_la==SHIFT_LEFT || _la==SHIFT_RIGHT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_operatorContext : ParserRuleContext {
		public ITerminalNode EQUIVALENT() { return GetToken(MCSharpParser.EQUIVALENT, 0); }
		public ITerminalNode NOT_EQUIVALENT() { return GetToken(MCSharpParser.NOT_EQUIVALENT, 0); }
		public Equality_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterEquality_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitEquality_operator(this);
		}
	}

	[RuleVersion(0)]
	public Equality_operatorContext equality_operator() {
		Equality_operatorContext _localctx = new Equality_operatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_equality_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUIVALENT || _la==NOT_EQUIVALENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_operatorContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(MCSharpParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(MCSharpParser.GREATER_THAN, 0); }
		public ITerminalNode LESS_THAN_EQUAL() { return GetToken(MCSharpParser.LESS_THAN_EQUAL, 0); }
		public ITerminalNode GREATER_THAN_EQUAL() { return GetToken(MCSharpParser.GREATER_THAN_EQUAL, 0); }
		public Relation_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterRelation_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitRelation_operator(this);
		}
	}

	[RuleVersion(0)]
	public Relation_operatorContext relation_operator() {
		Relation_operatorContext _localctx = new Relation_operatorContext(Context, State);
		EnterRule(_localctx, 86, RULE_relation_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS_THAN) | (1L << GREATER_THAN) | (1L << LESS_THAN_EQUAL) | (1L << GREATER_THAN_EQUAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(MCSharpParser.ASSIGN, 0); }
		public ITerminalNode ASSIGN_PLUS() { return GetToken(MCSharpParser.ASSIGN_PLUS, 0); }
		public ITerminalNode ASSIGN_MINUS() { return GetToken(MCSharpParser.ASSIGN_MINUS, 0); }
		public ITerminalNode ASSIGN_MULTIPLY() { return GetToken(MCSharpParser.ASSIGN_MULTIPLY, 0); }
		public ITerminalNode ASSIGN_DIVIDE() { return GetToken(MCSharpParser.ASSIGN_DIVIDE, 0); }
		public ITerminalNode ASSIGN_MODULUS() { return GetToken(MCSharpParser.ASSIGN_MODULUS, 0); }
		public ITerminalNode ASSIGN_ACCESS() { return GetToken(MCSharpParser.ASSIGN_ACCESS, 0); }
		public ITerminalNode ASSIGN_AND() { return GetToken(MCSharpParser.ASSIGN_AND, 0); }
		public ITerminalNode ASSIGN_OR() { return GetToken(MCSharpParser.ASSIGN_OR, 0); }
		public ITerminalNode ASSIGN_XOR() { return GetToken(MCSharpParser.ASSIGN_XOR, 0); }
		public ITerminalNode ASSIGN_LEFT() { return GetToken(MCSharpParser.ASSIGN_LEFT, 0); }
		public ITerminalNode ASSIGN_RIGHT() { return GetToken(MCSharpParser.ASSIGN_RIGHT, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 88, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << ASSIGN_PLUS) | (1L << ASSIGN_MINUS) | (1L << ASSIGN_MULTIPLY) | (1L << ASSIGN_DIVIDE) | (1L << ASSIGN_MODULUS) | (1L << ASSIGN_ACCESS) | (1L << ASSIGN_AND) | (1L << ASSIGN_OR) | (1L << ASSIGN_XOR) | (1L << ASSIGN_LEFT) | (1L << ASSIGN_RIGHT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_operatorContext : ParserRuleContext {
		public ITerminalNode RANGE_INCLUSIVE() { return GetToken(MCSharpParser.RANGE_INCLUSIVE, 0); }
		public ITerminalNode RANGE_EXCLUSIVE() { return GetToken(MCSharpParser.RANGE_EXCLUSIVE, 0); }
		public Range_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterRange_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitRange_operator(this);
		}
	}

	[RuleVersion(0)]
	public Range_operatorContext range_operator() {
		Range_operatorContext _localctx = new Range_operatorContext(Context, State);
		EnterRule(_localctx, 90, RULE_range_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE_INCLUSIVE || _la==RANGE_EXCLUSIVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Language_functionContext : ParserRuleContext {
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Foreach_statementContext foreach_statement() {
			return GetRuleContext<Foreach_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Do_statementContext do_statement() {
			return GetRuleContext<Do_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public Language_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_language_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterLanguage_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitLanguage_function(this);
		}
	}

	[RuleVersion(0)]
	public Language_functionContext language_function() {
		Language_functionContext _localctx = new Language_functionContext(Context, State);
		EnterRule(_localctx, 92, RULE_language_function);
		try {
			State = 589;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 581; if_statement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 582; for_statement();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 583; foreach_statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 584; while_statement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 5);
				{
				State = 585; do_statement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 586; return_statement();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 7);
				{
				State = 587; throw_statement();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 588; try_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MCSharpParser.IF, 0); }
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MCSharpParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 94, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591; Match(IF);
			State = 592; Match(OP);
			State = 593; expression();
			State = 594; Match(CP);
			State = 595; statement();
			State = 598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 596; Match(ELSE);
				State = 597; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(MCSharpParser.FOR, 0); }
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public Initialization_expressionContext initialization_expression() {
			return GetRuleContext<Initialization_expressionContext>(0);
		}
		public ITerminalNode[] END() { return GetTokens(MCSharpParser.END); }
		public ITerminalNode END(int i) {
			return GetToken(MCSharpParser.END, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 96, RULE_for_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; Match(FOR);
			State = 601; Match(OP);
			State = 602; initialization_expression();
			State = 603; Match(END);
			State = 604; expression();
			State = 605; Match(END);
			State = 606; expression();
			State = 607; Match(CP);
			State = 608; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreach_statementContext : ParserRuleContext {
		public ITerminalNode FOREACH() { return GetToken(MCSharpParser.FOREACH, 0); }
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ITerminalNode[] NAME() { return GetTokens(MCSharpParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(MCSharpParser.NAME, i);
		}
		public ITerminalNode IN() { return GetToken(MCSharpParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Foreach_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterForeach_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitForeach_statement(this);
		}
	}

	[RuleVersion(0)]
	public Foreach_statementContext foreach_statement() {
		Foreach_statementContext _localctx = new Foreach_statementContext(Context, State);
		EnterRule(_localctx, 98, RULE_foreach_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; Match(FOREACH);
			State = 611; Match(OP);
			State = 612; Match(NAME);
			State = 613; Match(NAME);
			State = 614; Match(IN);
			State = 615; expression();
			State = 616; Match(CP);
			State = 617; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(MCSharpParser.WHILE, 0); }
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 100, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; Match(WHILE);
			State = 620; Match(OP);
			State = 621; expression();
			State = 622; Match(CP);
			State = 623; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_statementContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(MCSharpParser.DO, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(MCSharpParser.WHILE, 0); }
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public ITerminalNode END() { return GetToken(MCSharpParser.END, 0); }
		public Do_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterDo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitDo_statement(this);
		}
	}

	[RuleVersion(0)]
	public Do_statementContext do_statement() {
		Do_statementContext _localctx = new Do_statementContext(Context, State);
		EnterRule(_localctx, 102, RULE_do_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625; Match(DO);
			State = 626; statement();
			State = 627; Match(WHILE);
			State = 628; Match(OP);
			State = 629; expression();
			State = 630; Match(CP);
			State = 631; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(MCSharpParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(MCSharpParser.END, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 104, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633; Match(RETURN);
			State = 635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << OP) | (1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << BITWISE_AND) | (1L << BITWISE_NOT) | (1L << BOOLEAN_NOT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NEW - 66)) | (1L << (TYPEOF - 66)) | (1L << (CHECKED - 66)) | (1L << (UNCHECKED - 66)) | (1L << (DEFAULT - 66)) | (1L << (SIZEOF - 66)) | (1L << (STRING - 66)) | (1L << (DECIMAL - 66)) | (1L << (INTEGER - 66)) | (1L << (BOOLEAN - 66)) | (1L << (NAME - 66)))) != 0)) {
				{
				State = 634; expression();
				}
			}

			State = 637; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(MCSharpParser.THROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(MCSharpParser.END, 0); }
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(Context, State);
		EnterRule(_localctx, 106, RULE_throw_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639; Match(THROW);
			State = 640; expression();
			State = 641; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public ITerminalNode TRY() { return GetToken(MCSharpParser.TRY, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(MCSharpParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(MCSharpParser.CATCH, i);
		}
		public ITerminalNode[] OP() { return GetTokens(MCSharpParser.OP); }
		public ITerminalNode OP(int i) {
			return GetToken(MCSharpParser.OP, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(MCSharpParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(MCSharpParser.NAME, i);
		}
		public ITerminalNode[] CP() { return GetTokens(MCSharpParser.CP); }
		public ITerminalNode CP(int i) {
			return GetToken(MCSharpParser.CP, i);
		}
		public ITerminalNode FINALLY() { return GetToken(MCSharpParser.FINALLY, 0); }
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 108, RULE_try_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 643; Match(TRY);
			State = 644; statement();
			State = 653;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 645; Match(CATCH);
					State = 646; Match(OP);
					State = 647; Match(NAME);
					State = 648; Match(NAME);
					State = 649; Match(CP);
					State = 650; statement();
					}
					} 
				}
				State = 655;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			State = 658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 656; Match(FINALLY);
				State = 657; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_expression);
		try {
			State = 662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 660; non_assignment_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 661; assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initialization_expressionContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(MCSharpParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(MCSharpParser.NAME, i);
		}
		public ITerminalNode ASSIGN() { return GetToken(MCSharpParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Initialization_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialization_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterInitialization_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitInitialization_expression(this);
		}
	}

	[RuleVersion(0)]
	public Initialization_expressionContext initialization_expression() {
		Initialization_expressionContext _localctx = new Initialization_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_initialization_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664; Match(NAME);
			State = 665; Match(NAME);
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 666; Match(ASSIGN);
				State = 667; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_non_assignment_expression);
		try {
			State = 672;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 670; conditional_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 671; lambda_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		public Method_argumentsContext method_arguments() {
			return GetRuleContext<Method_argumentsContext>(0);
		}
		public ITerminalNode LAMBDA() { return GetToken(MCSharpParser.LAMBDA, 0); }
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674; method_arguments();
			State = 675; Match(LAMBDA);
			{
			State = 676; code_block();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MCSharpParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 118, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; expression();
			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 679; Match(COMMA);
				State = 680; expression();
				}
				}
				State = 685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public ITerminalNode CONDITION_IF() { return GetToken(MCSharpParser.CONDITION_IF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CONDITION_ELSE() { return GetToken(MCSharpParser.CONDITION_ELSE, 0); }
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_conditional_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686; null_coalescing_expression();
			State = 692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 687; Match(CONDITION_IF);
				State = 688; expression();
				State = 689; Match(CONDITION_ELSE);
				State = 690; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		public ITerminalNode NULL_COALESCING() { return GetToken(MCSharpParser.NULL_COALESCING, 0); }
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_null_coalescing_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; conditional_or_expression();
			State = 697;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 695; Match(NULL_COALESCING);
				State = 696; null_coalescing_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		public Conditional_and_expressionContext[] conditional_and_expression() {
			return GetRuleContexts<Conditional_and_expressionContext>();
		}
		public Conditional_and_expressionContext conditional_and_expression(int i) {
			return GetRuleContext<Conditional_and_expressionContext>(i);
		}
		public ITerminalNode[] BOOLEAN_OR() { return GetTokens(MCSharpParser.BOOLEAN_OR); }
		public ITerminalNode BOOLEAN_OR(int i) {
			return GetToken(MCSharpParser.BOOLEAN_OR, i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_conditional_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 699; conditional_and_expression();
			State = 704;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 700; Match(BOOLEAN_OR);
					State = 701; conditional_and_expression();
					}
					} 
				}
				State = 706;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext[] inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] BOOLEAN_AND() { return GetTokens(MCSharpParser.BOOLEAN_AND); }
		public ITerminalNode BOOLEAN_AND(int i) {
			return GetToken(MCSharpParser.BOOLEAN_AND, i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_conditional_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 707; inclusive_or_expression();
			State = 712;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 708; Match(BOOLEAN_AND);
					State = 709; inclusive_or_expression();
					}
					} 
				}
				State = 714;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Exclusive_or_expressionContext[] exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(MCSharpParser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(MCSharpParser.BITWISE_OR, i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_inclusive_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 715; exclusive_or_expression();
			State = 720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 716; Match(BITWISE_OR);
					State = 717; exclusive_or_expression();
					}
					} 
				}
				State = 722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public ITerminalNode[] BITWISE_XOR() { return GetTokens(MCSharpParser.BITWISE_XOR); }
		public ITerminalNode BITWISE_XOR(int i) {
			return GetToken(MCSharpParser.BITWISE_XOR, i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_exclusive_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; and_expression();
			State = 728;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 724; Match(BITWISE_XOR);
					State = 725; and_expression();
					}
					} 
				}
				State = 730;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public ITerminalNode[] BITWISE_AND() { return GetTokens(MCSharpParser.BITWISE_AND); }
		public ITerminalNode BITWISE_AND(int i) {
			return GetToken(MCSharpParser.BITWISE_AND, i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 731; equality_expression();
			State = 736;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 732; Match(BITWISE_AND);
					State = 733; equality_expression();
					}
					} 
				}
				State = 738;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public Equality_operatorContext[] equality_operator() {
			return GetRuleContexts<Equality_operatorContext>();
		}
		public Equality_operatorContext equality_operator(int i) {
			return GetRuleContext<Equality_operatorContext>(i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_equality_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; relational_expression();
			State = 745;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 740; equality_operator();
					State = 741; relational_expression();
					}
					} 
				}
				State = 747;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public Relation_or_type_checkContext[] relation_or_type_check() {
			return GetRuleContexts<Relation_or_type_checkContext>();
		}
		public Relation_or_type_checkContext relation_or_type_check(int i) {
			return GetRuleContext<Relation_or_type_checkContext>(i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_relational_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 748; shift_expression();
			State = 752;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 749; relation_or_type_check();
					}
					} 
				}
				State = 754;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_or_type_checkContext : ParserRuleContext {
		public Relation_operatorContext relation_operator() {
			return GetRuleContext<Relation_operatorContext>(0);
		}
		public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IS() { return GetToken(MCSharpParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(MCSharpParser.AS, 0); }
		public Relation_or_type_checkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_or_type_check; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterRelation_or_type_check(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitRelation_or_type_check(this);
		}
	}

	[RuleVersion(0)]
	public Relation_or_type_checkContext relation_or_type_check() {
		Relation_or_type_checkContext _localctx = new Relation_or_type_checkContext(Context, State);
		EnterRule(_localctx, 138, RULE_relation_or_type_check);
		int _la;
		try {
			State = 760;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LESS_THAN:
			case GREATER_THAN:
			case LESS_THAN_EQUAL:
			case GREATER_THAN_EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 755; relation_operator();
				State = 756; shift_expression();
				}
				break;
			case IS:
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 758;
				_la = TokenStream.LA(1);
				if ( !(_la==IS || _la==AS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 759; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		public Shift_operatorContext[] shift_operator() {
			return GetRuleContexts<Shift_operatorContext>();
		}
		public Shift_operatorContext shift_operator(int i) {
			return GetRuleContext<Shift_operatorContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 140, RULE_shift_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 762; additive_expression();
			State = 768;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 763; shift_operator();
					State = 764; additive_expression();
					}
					} 
				}
				State = 770;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		public Additive_operatorContext[] additive_operator() {
			return GetRuleContexts<Additive_operatorContext>();
		}
		public Additive_operatorContext additive_operator(int i) {
			return GetRuleContext<Additive_operatorContext>(i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, State);
		EnterRule(_localctx, 142, RULE_additive_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 771; multiplicative_expression();
			State = 777;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 772; additive_operator();
					State = 773; multiplicative_expression();
					}
					} 
				}
				State = 779;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public With_expressionContext[] with_expression() {
			return GetRuleContexts<With_expressionContext>();
		}
		public With_expressionContext with_expression(int i) {
			return GetRuleContext<With_expressionContext>(i);
		}
		public Multiplicative_operatorContext[] multiplicative_operator() {
			return GetRuleContexts<Multiplicative_operatorContext>();
		}
		public Multiplicative_operatorContext multiplicative_operator(int i) {
			return GetRuleContext<Multiplicative_operatorContext>(i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_multiplicative_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 780; with_expression();
			State = 786;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 781; multiplicative_operator();
					State = 782; with_expression();
					}
					} 
				}
				State = 788;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		public Range_expressionContext range_expression() {
			return GetRuleContext<Range_expressionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(MCSharpParser.WITH, 0); }
		public Anonymous_element_initializerContext anonymous_element_initializer() {
			return GetRuleContext<Anonymous_element_initializerContext>(0);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(Context, State);
		EnterRule(_localctx, 146, RULE_with_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789; range_expression();
			State = 792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 790; Match(WITH);
				State = 791; anonymous_element_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_expressionContext : ParserRuleContext {
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Range_operatorContext range_operator() {
			return GetRuleContext<Range_operatorContext>(0);
		}
		public Range_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterRange_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitRange_expression(this);
		}
	}

	[RuleVersion(0)]
	public Range_expressionContext range_expression() {
		Range_expressionContext _localctx = new Range_expressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_range_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794; unary_expression();
			State = 798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE_INCLUSIVE || _la==RANGE_EXCLUSIVE) {
				{
				State = 795; range_operator();
				State = 796; unary_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_step_expressionContext : ParserRuleContext {
		public Step_operatorContext step_operator() {
			return GetRuleContext<Step_operatorContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pre_step_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pre_step_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterPre_step_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitPre_step_expression(this);
		}
	}

	[RuleVersion(0)]
	public Pre_step_expressionContext pre_step_expression() {
		Pre_step_expressionContext _localctx = new Pre_step_expressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_pre_step_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800; step_operator();
			State = 801; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Post_step_expressionContext : ParserRuleContext {
		public Step_operatorContext step_operator() {
			return GetRuleContext<Step_operatorContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Post_step_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_post_step_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterPost_step_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitPost_step_expression(this);
		}
	}

	[RuleVersion(0)]
	public Post_step_expressionContext post_step_expression() {
		Post_step_expressionContext _localctx = new Post_step_expressionContext(Context, State);
		EnterRule(_localctx, 152, RULE_post_step_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case DECIMAL:
			case INTEGER:
			case BOOLEAN:
				{
				State = 803; literal();
				}
				break;
			case T__0:
			case NAME:
				{
				State = 804; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 807; step_operator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(MCSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(MCSharpParser.MINUS, 0); }
		public ITerminalNode BOOLEAN_NOT() { return GetToken(MCSharpParser.BOOLEAN_NOT, 0); }
		public ITerminalNode BITWISE_NOT() { return GetToken(MCSharpParser.BITWISE_NOT, 0); }
		public Pre_step_expressionContext pre_step_expression() {
			return GetRuleContext<Pre_step_expressionContext>(0);
		}
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Pointer_indirection_expressionContext pointer_indirection_expression() {
			return GetRuleContext<Pointer_indirection_expressionContext>(0);
		}
		public Addressof_expressionContext addressof_expression() {
			return GetRuleContext<Addressof_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 154, RULE_unary_expression);
		int _la;
		try {
			State = 816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 809; primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 810;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << BITWISE_NOT) | (1L << BOOLEAN_NOT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 811; unary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 812; pre_step_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 813; cast_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 814; pointer_indirection_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 815; addressof_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, State);
		EnterRule(_localctx, 156, RULE_cast_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818; Match(OP);
			State = 819; Match(NAME);
			State = 820; Match(CP);
			State = 821; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_indirection_expressionContext : ParserRuleContext {
		public ITerminalNode MULTIPLY() { return GetToken(MCSharpParser.MULTIPLY, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pointer_indirection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_indirection_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterPointer_indirection_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitPointer_indirection_expression(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_indirection_expressionContext pointer_indirection_expression() {
		Pointer_indirection_expressionContext _localctx = new Pointer_indirection_expressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_pointer_indirection_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; Match(MULTIPLY);
			State = 824; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Addressof_expressionContext : ParserRuleContext {
		public ITerminalNode BITWISE_AND() { return GetToken(MCSharpParser.BITWISE_AND, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Addressof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressof_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAddressof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAddressof_expression(this);
		}
	}

	[RuleVersion(0)]
	public Addressof_expressionContext addressof_expression() {
		Addressof_expressionContext _localctx = new Addressof_expressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_addressof_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826; Match(BITWISE_AND);
			State = 827; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829; unary_expression();
			State = 830; assignment_operator();
			State = 831; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Array_creation_expressionContext array_creation_expression() {
			return GetRuleContext<Array_creation_expressionContext>(0);
		}
		public Primary_no_array_creation_expressionContext primary_no_array_creation_expression() {
			return GetRuleContext<Primary_no_array_creation_expressionContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 164, RULE_primary_expression);
		try {
			State = 835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 833; array_creation_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 834; primary_no_array_creation_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(MCSharpParser.NEW, 0); }
		public Indexer_argumentsContext indexer_arguments() {
			return GetRuleContext<Indexer_argumentsContext>(0);
		}
		public Array_rank_specifierContext array_rank_specifier() {
			return GetRuleContext<Array_rank_specifierContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Array_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterArray_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitArray_creation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Array_creation_expressionContext array_creation_expression() {
		Array_creation_expressionContext _localctx = new Array_creation_expressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_array_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837; Match(NEW);
			State = 838; indexer_arguments();
			State = 840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 839; array_rank_specifier();
				}
				break;
			}
			State = 843;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OC) {
				{
				State = 842; array_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_rank_specifierContext : ParserRuleContext {
		public ITerminalNode OB() { return GetToken(MCSharpParser.OB, 0); }
		public ITerminalNode CB() { return GetToken(MCSharpParser.CB, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MCSharpParser.COMMA, i);
		}
		public Array_rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_rank_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterArray_rank_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitArray_rank_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Array_rank_specifierContext array_rank_specifier() {
		Array_rank_specifierContext _localctx = new Array_rank_specifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_array_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845; Match(OB);
			State = 849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 846; Match(COMMA);
				}
				}
				State = 851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 852; Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		public ITerminalNode OC() { return GetToken(MCSharpParser.OC, 0); }
		public ITerminalNode CC() { return GetToken(MCSharpParser.CC, 0); }
		public Variable_initializerContext[] variable_initializer() {
			return GetRuleContexts<Variable_initializerContext>();
		}
		public Variable_initializerContext variable_initializer(int i) {
			return GetRuleContext<Variable_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MCSharpParser.COMMA, i);
		}
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterArray_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitArray_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(Context, State);
		EnterRule(_localctx, 170, RULE_array_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 854; Match(OC);
			State = 866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << OP) | (1L << OC) | (1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << BITWISE_AND) | (1L << BITWISE_NOT) | (1L << BOOLEAN_NOT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NEW - 66)) | (1L << (TYPEOF - 66)) | (1L << (CHECKED - 66)) | (1L << (UNCHECKED - 66)) | (1L << (DEFAULT - 66)) | (1L << (SIZEOF - 66)) | (1L << (STRING - 66)) | (1L << (DECIMAL - 66)) | (1L << (INTEGER - 66)) | (1L << (BOOLEAN - 66)) | (1L << (NAME - 66)))) != 0)) {
				{
				State = 855; variable_initializer();
				State = 860;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 856; Match(COMMA);
						State = 857; variable_initializer();
						}
						} 
					}
					State = 862;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
				}
				State = 864;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 863; Match(COMMA);
					}
				}

				}
			}

			State = 868; Match(CC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 172, RULE_variable_initializer);
		try {
			State = 872;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case OP:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case INCREMENT:
			case DECREMENT:
			case BITWISE_AND:
			case BITWISE_NOT:
			case BOOLEAN_NOT:
			case NEW:
			case TYPEOF:
			case CHECKED:
			case UNCHECKED:
			case DEFAULT:
			case SIZEOF:
			case STRING:
			case DECIMAL:
			case INTEGER:
			case BOOLEAN:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 870; expression();
				}
				break;
			case OC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 871; array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_no_array_creation_expressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Short_identifierContext short_identifier() {
			return GetRuleContext<Short_identifierContext>(0);
		}
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public Member_accessContext member_access() {
			return GetRuleContext<Member_accessContext>(0);
		}
		public Post_step_expressionContext post_step_expression() {
			return GetRuleContext<Post_step_expressionContext>(0);
		}
		public Keyword_expressionContext keyword_expression() {
			return GetRuleContext<Keyword_expressionContext>(0);
		}
		public Primary_no_array_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_no_array_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterPrimary_no_array_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitPrimary_no_array_creation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_no_array_creation_expressionContext primary_no_array_creation_expression() {
		Primary_no_array_creation_expressionContext _localctx = new Primary_no_array_creation_expressionContext(Context, State);
		EnterRule(_localctx, 174, RULE_primary_no_array_creation_expression);
		try {
			State = 883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 874; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 875; short_identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 876; Match(OP);
				State = 877; expression();
				State = 878; Match(CP);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 880; member_access();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 881; post_step_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 882; keyword_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_access_prefixContext : ParserRuleContext {
		public Array_creation_expressionContext array_creation_expression() {
			return GetRuleContext<Array_creation_expressionContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(MCSharpParser.DOT, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Short_identifierContext short_identifier() {
			return GetRuleContext<Short_identifierContext>(0);
		}
		public Generic_argumentsContext generic_arguments() {
			return GetRuleContext<Generic_argumentsContext>(0);
		}
		public Method_argumentsContext method_arguments() {
			return GetRuleContext<Method_argumentsContext>(0);
		}
		public Indexer_argumentsContext indexer_arguments() {
			return GetRuleContext<Indexer_argumentsContext>(0);
		}
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public Post_step_expressionContext post_step_expression() {
			return GetRuleContext<Post_step_expressionContext>(0);
		}
		public Keyword_expressionContext keyword_expression() {
			return GetRuleContext<Keyword_expressionContext>(0);
		}
		public Member_access_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access_prefix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMember_access_prefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMember_access_prefix(this);
		}
	}

	[RuleVersion(0)]
	public Member_access_prefixContext member_access_prefix() {
		Member_access_prefixContext _localctx = new Member_access_prefixContext(Context, State);
		EnterRule(_localctx, 176, RULE_member_access_prefix);
		int _la;
		try {
			State = 912;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 885; array_creation_expression();
				State = 886; Match(DOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 888; literal();
				State = 889; Match(DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 891; short_identifier();
				State = 893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS_THAN) {
					{
					State = 892; generic_arguments();
					}
				}

				State = 897;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OP:
					{
					State = 895; method_arguments();
					}
					break;
				case OB:
					{
					State = 896; indexer_arguments();
					}
					break;
				case DOT:
					break;
				default:
					break;
				}
				State = 899; Match(DOT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 901; Match(OP);
				State = 902; expression();
				State = 903; Match(CP);
				State = 904; Match(DOT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 906; post_step_expression();
				State = 907; Match(DOT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 909; keyword_expression();
				State = 910; Match(DOT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		public Short_identifierContext short_identifier() {
			return GetRuleContext<Short_identifierContext>(0);
		}
		public Member_access_prefixContext[] member_access_prefix() {
			return GetRuleContexts<Member_access_prefixContext>();
		}
		public Member_access_prefixContext member_access_prefix(int i) {
			return GetRuleContext<Member_access_prefixContext>(i);
		}
		public Generic_argumentsContext generic_arguments() {
			return GetRuleContext<Generic_argumentsContext>(0);
		}
		public Method_argumentsContext method_arguments() {
			return GetRuleContext<Method_argumentsContext>(0);
		}
		public Indexer_argumentsContext indexer_arguments() {
			return GetRuleContext<Indexer_argumentsContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 178, RULE_member_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 914; member_access_prefix();
					}
					} 
				}
				State = 919;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			State = 920; short_identifier();
			State = 922;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 921; generic_arguments();
				}
				break;
			}
			State = 926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 924; method_arguments();
				}
				break;
			case 2:
				{
				State = 925; indexer_arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_expressionContext : ParserRuleContext {
		public New_keyword_expressionContext new_keyword_expression() {
			return GetRuleContext<New_keyword_expressionContext>(0);
		}
		public Typeof_keyword_expressionContext typeof_keyword_expression() {
			return GetRuleContext<Typeof_keyword_expressionContext>(0);
		}
		public Checked_expressionContext checked_expression() {
			return GetRuleContext<Checked_expressionContext>(0);
		}
		public Unchecked_expressionContext unchecked_expression() {
			return GetRuleContext<Unchecked_expressionContext>(0);
		}
		public Default_keyword_expressionContext default_keyword_expression() {
			return GetRuleContext<Default_keyword_expressionContext>(0);
		}
		public Sizeof_keyword_expressionContext sizeof_keyword_expression() {
			return GetRuleContext<Sizeof_keyword_expressionContext>(0);
		}
		public Keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterKeyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitKeyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_expressionContext keyword_expression() {
		Keyword_expressionContext _localctx = new Keyword_expressionContext(Context, State);
		EnterRule(_localctx, 180, RULE_keyword_expression);
		try {
			State = 934;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 928; new_keyword_expression();
				}
				break;
			case TYPEOF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 929; typeof_keyword_expression();
				}
				break;
			case CHECKED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 930; checked_expression();
				}
				break;
			case UNCHECKED:
				EnterOuterAlt(_localctx, 4);
				{
				State = 931; unchecked_expression();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 932; default_keyword_expression();
				}
				break;
			case SIZEOF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 933; sizeof_keyword_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_or_collection_initializerContext : ParserRuleContext {
		public Object_initializerContext object_initializer() {
			return GetRuleContext<Object_initializerContext>(0);
		}
		public Collection_initializerContext collection_initializer() {
			return GetRuleContext<Collection_initializerContext>(0);
		}
		public Object_or_collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_or_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterObject_or_collection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitObject_or_collection_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Object_or_collection_initializerContext object_or_collection_initializer() {
		Object_or_collection_initializerContext _localctx = new Object_or_collection_initializerContext(Context, State);
		EnterRule(_localctx, 182, RULE_object_or_collection_initializer);
		try {
			State = 938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 936; object_initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 937; collection_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_keyword_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(MCSharpParser.NEW, 0); }
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public Method_argumentsContext method_arguments() {
			return GetRuleContext<Method_argumentsContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		public New_keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterNew_keyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitNew_keyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public New_keyword_expressionContext new_keyword_expression() {
		New_keyword_expressionContext _localctx = new New_keyword_expressionContext(Context, State);
		EnterRule(_localctx, 184, RULE_new_keyword_expression);
		int _la;
		try {
			State = 951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 940; Match(NEW);
				State = 941; Match(NAME);
				State = 947;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OP:
					{
					{
					State = 942; method_arguments();
					State = 944;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OC) {
						{
						State = 943; object_or_collection_initializer();
						}
					}

					}
					}
					break;
				case OC:
					{
					{
					State = 946; object_or_collection_initializer();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 949; Match(NEW);
				State = 950; anonymous_object_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typeof_keyword_expressionContext : ParserRuleContext {
		public ITerminalNode TYPEOF() { return GetToken(MCSharpParser.TYPEOF, 0); }
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public Typeof_keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeof_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterTypeof_keyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitTypeof_keyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public Typeof_keyword_expressionContext typeof_keyword_expression() {
		Typeof_keyword_expressionContext _localctx = new Typeof_keyword_expressionContext(Context, State);
		EnterRule(_localctx, 186, RULE_typeof_keyword_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953; Match(TYPEOF);
			State = 954; Match(OP);
			{
			State = 955; Match(NAME);
			}
			State = 956; Match(CP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checked_expressionContext : ParserRuleContext {
		public ITerminalNode CHECKED() { return GetToken(MCSharpParser.CHECKED, 0); }
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public Checked_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checked_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterChecked_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitChecked_expression(this);
		}
	}

	[RuleVersion(0)]
	public Checked_expressionContext checked_expression() {
		Checked_expressionContext _localctx = new Checked_expressionContext(Context, State);
		EnterRule(_localctx, 188, RULE_checked_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958; Match(CHECKED);
			State = 959; Match(OP);
			State = 960; expression();
			State = 961; Match(CP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unchecked_expressionContext : ParserRuleContext {
		public ITerminalNode UNCHECKED() { return GetToken(MCSharpParser.UNCHECKED, 0); }
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public Unchecked_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unchecked_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterUnchecked_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitUnchecked_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unchecked_expressionContext unchecked_expression() {
		Unchecked_expressionContext _localctx = new Unchecked_expressionContext(Context, State);
		EnterRule(_localctx, 190, RULE_unchecked_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963; Match(UNCHECKED);
			State = 964; Match(OP);
			State = 965; expression();
			State = 966; Match(CP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_keyword_expressionContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(MCSharpParser.DEFAULT, 0); }
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public Default_keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterDefault_keyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitDefault_keyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public Default_keyword_expressionContext default_keyword_expression() {
		Default_keyword_expressionContext _localctx = new Default_keyword_expressionContext(Context, State);
		EnterRule(_localctx, 192, RULE_default_keyword_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968; Match(DEFAULT);
			State = 972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP) {
				{
				State = 969; Match(OP);
				State = 970; Match(NAME);
				State = 971; Match(CP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_keyword_expressionContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(MCSharpParser.DELEGATE, 0); }
		public Method_parametersContext method_parameters() {
			return GetRuleContext<Method_parametersContext>(0);
		}
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Delegate_keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterDelegate_keyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitDelegate_keyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_keyword_expressionContext delegate_keyword_expression() {
		Delegate_keyword_expressionContext _localctx = new Delegate_keyword_expressionContext(Context, State);
		EnterRule(_localctx, 194, RULE_delegate_keyword_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974; Match(DELEGATE);
			State = 975; method_parameters();
			State = 976; code_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sizeof_keyword_expressionContext : ParserRuleContext {
		public ITerminalNode SIZEOF() { return GetToken(MCSharpParser.SIZEOF, 0); }
		public ITerminalNode OP() { return GetToken(MCSharpParser.OP, 0); }
		public ITerminalNode NAME() { return GetToken(MCSharpParser.NAME, 0); }
		public ITerminalNode CP() { return GetToken(MCSharpParser.CP, 0); }
		public Sizeof_keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterSizeof_keyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitSizeof_keyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sizeof_keyword_expressionContext sizeof_keyword_expression() {
		Sizeof_keyword_expressionContext _localctx = new Sizeof_keyword_expressionContext(Context, State);
		EnterRule(_localctx, 196, RULE_sizeof_keyword_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978; Match(SIZEOF);
			State = 979; Match(OP);
			State = 980; Match(NAME);
			State = 981; Match(CP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '`', '\x3DA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x3', '\x2', '\a', '\x2', '\xCA', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\xCD', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\xD6', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\xD9', '\v', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x5', 
		'\x6', '\xE0', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\xE8', '\n', '\a', 
		'\f', '\a', '\xE', '\a', '\xEB', '\v', '\a', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\xEF', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\xF5', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xFE', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\x103', '\n', '\v', '\f', '\v', '\xE', '\v', '\x106', '\v', '\v', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '\x10A', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x110', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x116', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x11C', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x121', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x127', '\n', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x12A', '\n', '\x10', '\x5', '\x10', '\x12C', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x135', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x13B', 
		'\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\x13E', '\n', '\x12', '\x5', 
		'\x12', '\x140', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x146', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x14D', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x153', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x156', 
		'\n', '\x14', '\x5', '\x14', '\x158', '\n', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\a', 
		'\x19', '\x16A', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x16D', '\v', 
		'\x19', '\x3', '\x19', '\a', '\x19', '\x170', '\n', '\x19', '\f', '\x19', 
		'\xE', '\x19', '\x173', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x17A', '\n', '\x19', 
		'\f', '\x19', '\xE', '\x19', '\x17D', '\v', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\a', '\x1A', '\x182', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\x185', '\v', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x188', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x18B', '\v', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x192', '\n', '\x1A', '\x3', '\x1B', '\a', '\x1B', '\x195', '\n', 
		'\x1B', '\f', '\x1B', '\xE', '\x1B', '\x198', '\v', '\x1B', '\x3', '\x1B', 
		'\a', '\x1B', '\x19B', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x19E', 
		'\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x1A5', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x1A9', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', 
		'\x1B1', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x1B4', '\v', '\x1D', 
		'\x3', '\x1D', '\a', '\x1D', '\x1B7', '\n', '\x1D', '\f', '\x1D', '\xE', 
		'\x1D', '\x1BA', '\v', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\a', '\x1D', '\x1BF', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x1C2', 
		'\v', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x1C5', '\n', '\x1D', '\f', 
		'\x1D', '\xE', '\x1D', '\x1C8', '\v', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x1CB', '\n', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x1CE', '\n', '\x1D', 
		'\f', '\x1D', '\xE', '\x1D', '\x1D1', '\v', '\x1D', '\x3', '\x1D', '\a', 
		'\x1D', '\x1D4', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x1D7', '\v', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x1DC', 
		'\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x1DF', '\v', '\x1D', '\x3', 
		'\x1D', '\a', '\x1D', '\x1E2', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', 
		'\x1E5', '\v', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x1E8', '\n', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x1EC', '\n', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1F7', 
		'\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x202', '\n', '\x1F', '\x3', ' ', '\x5', ' ', '\x205', 
		'\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x5', ' ', '\x20D', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'\"', '\x5', '\"', '\x212', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\a', '\"', '\x217', '\n', '\"', '\f', '\"', '\xE', '\"', '\x21A', 
		'\v', '\"', '\x3', '#', '\x5', '#', '\x21D', '\n', '#', '\x3', '#', '\x3', 
		'#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x5', '$', '\x229', '\n', '$', '\x3', '%', 
		'\x3', '%', '\a', '%', '\x22D', '\n', '%', '\f', '%', '\xE', '%', '\x230', 
		'\v', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', '*', 
		'\x3', '*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', '-', 
		'\x3', '-', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x250', '\n', '\x30', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x5', '\x31', '\x259', '\n', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', 
		'\x27E', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\a', '\x38', '\x28E', '\n', '\x38', '\f', '\x38', '\xE', '\x38', 
		'\x291', '\v', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x295', 
		'\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x299', '\n', 
		'\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x29F', 
		'\n', ':', '\x3', ';', '\x3', ';', '\x5', ';', '\x2A3', '\n', ';', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\a', '=', '\x2AC', '\n', '=', '\f', '=', '\xE', '=', '\x2AF', '\v', 
		'=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x5', '>', '\x2B7', '\n', '>', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x5', '?', '\x2BC', '\n', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\a', 
		'@', '\x2C1', '\n', '@', '\f', '@', '\xE', '@', '\x2C4', '\v', '@', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\a', '\x41', '\x2C9', '\n', '\x41', 
		'\f', '\x41', '\xE', '\x41', '\x2CC', '\v', '\x41', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\a', '\x42', '\x2D1', '\n', '\x42', '\f', '\x42', 
		'\xE', '\x42', '\x2D4', '\v', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\a', '\x43', '\x2D9', '\n', '\x43', '\f', '\x43', '\xE', '\x43', 
		'\x2DC', '\v', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\a', 
		'\x44', '\x2E1', '\n', '\x44', '\f', '\x44', '\xE', '\x44', '\x2E4', '\v', 
		'\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\a', 
		'\x45', '\x2EA', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x2ED', '\v', 
		'\x45', '\x3', '\x46', '\x3', '\x46', '\a', '\x46', '\x2F1', '\n', '\x46', 
		'\f', '\x46', '\xE', '\x46', '\x2F4', '\v', '\x46', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x2FB', '\n', 'G', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\a', 'H', '\x301', '\n', 
		'H', '\f', 'H', '\xE', 'H', '\x304', '\v', 'H', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\a', 'I', '\x30A', '\n', 'I', '\f', 'I', '\xE', 
		'I', '\x30D', '\v', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\a', 'J', '\x313', '\n', 'J', '\f', 'J', '\xE', 'J', '\x316', '\v', 'J', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x31B', '\n', 'K', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x321', '\n', 'L', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x5', 'N', 
		'\x328', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x333', 
		'\n', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', 
		'\x5', 'T', '\x346', '\n', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x34B', '\n', 'U', '\x3', 'U', '\x5', 'U', '\x34E', '\n', 'U', '\x3', 
		'V', '\x3', 'V', '\a', 'V', '\x352', '\n', 'V', '\f', 'V', '\xE', 'V', 
		'\x355', '\v', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\a', 'W', '\x35D', '\n', 'W', '\f', 'W', '\xE', 'W', 
		'\x360', '\v', 'W', '\x3', 'W', '\x5', 'W', '\x363', '\n', 'W', '\x5', 
		'W', '\x365', '\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', 
		'\x5', 'X', '\x36B', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 
		'Y', '\x376', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x380', '\n', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x384', '\n', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x5', 'Z', '\x393', '\n', 'Z', '\x3', '[', '\a', '[', '\x396', '\n', 
		'[', '\f', '[', '\xE', '[', '\x399', '\v', '[', '\x3', '[', '\x3', '[', 
		'\x5', '[', '\x39D', '\n', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x3A1', 
		'\n', '[', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', 
		'\\', '\x3', '\\', '\x5', '\\', '\x3A9', '\n', '\\', '\x3', ']', '\x3', 
		']', '\x5', ']', '\x3AD', '\n', ']', '\x3', '^', '\x3', '^', '\x3', '^', 
		'\x3', '^', '\x5', '^', '\x3B3', '\n', '^', '\x3', '^', '\x5', '^', '\x3B6', 
		'\n', '^', '\x3', '^', '\x3', '^', '\x5', '^', '\x3BA', '\n', '^', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\x3CF', '\n', '\x62', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x2', 
		'\x2', '\x65', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', 
		'\xC0', '\xC2', '\xC4', '\xC6', '\x2', '\x12', '\x3', '\x2', 'N', 'S', 
		'\x4', '\x2', '\x35', '\x36', 'U', 'U', '\x3', '\x2', 'V', 'W', '\x3', 
		'\x2', '\\', '_', '\x3', '\x2', '\f', '\r', '\x3', '\x2', '\xE', '\x10', 
		'\x3', '\x2', '\x11', '\x12', '\x3', '\x2', '\x13', '\x15', '\x3', '\x2', 
		'\x17', '\x18', '\x3', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x1C', '\x1D', 
		'\x3', '\x2', '\x1E', '!', '\x3', '\x2', '#', '.', '\x3', '\x2', '\x31', 
		'\x32', '\x3', '\x2', '\x33', '\x34', '\x5', '\x2', '\f', '\r', '\x16', 
		'\x16', '\x19', '\x19', '\x2', '\x3FC', '\x2', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\xD0', '\x3', '\x2', '\x2', '\x2', '\x6', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\xDA', '\x3', '\x2', '\x2', '\x2', '\n', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\x10', '\xF2', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x14', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x113', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x119', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x122', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x136', '\x3', '\x2', '\x2', '\x2', '$', '\x14C', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x14E', '\x3', '\x2', '\x2', '\x2', '(', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		',', '\x15F', '\x3', '\x2', '\x2', '\x2', '.', '\x161', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x32', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x1F6', '\x3', '\x2', '\x2', '\x2', '<', '\x201', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x204', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x42', '\x211', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x46', '\x228', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x22A', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x233', '\x3', '\x2', '\x2', '\x2', 'L', '\x235', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x237', '\x3', '\x2', '\x2', '\x2', 'P', '\x239', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x23B', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x23D', '\x3', '\x2', '\x2', '\x2', 'V', '\x23F', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x241', '\x3', '\x2', '\x2', '\x2', 'Z', '\x243', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x245', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x24F', '\x3', '\x2', '\x2', '\x2', '`', '\x251', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x64', '\x264', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x26D', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x273', '\x3', '\x2', '\x2', '\x2', 'j', '\x27B', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x281', '\x3', '\x2', '\x2', '\x2', 'n', '\x285', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x298', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x29A', '\x3', '\x2', '\x2', '\x2', 't', '\x2A2', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x2A4', '\x3', '\x2', '\x2', '\x2', 'x', '\x2A8', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x2B0', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x2B8', '\x3', '\x2', '\x2', '\x2', '~', '\x2BD', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x82', '\x2CD', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x2D5', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x88', '\x2E5', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x2FA', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x2FC', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x305', '\x3', '\x2', '\x2', '\x2', '\x92', '\x30E', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x317', '\x3', '\x2', '\x2', '\x2', '\x96', '\x31C', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x322', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x327', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x332', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x334', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x339', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\x33C', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\x33F', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x345', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\x347', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x34F', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\x358', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\x36A', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x375', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\x392', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x397', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\x3A8', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x3B9', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x3C0', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\x3C5', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x3D0', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', 
		'\x5', '\x30', '\x19', '\x2', '\xC9', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xCF', '\a', '\x2', '\x2', '\x3', '\xCF', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xD1', '\a', '`', '\x2', '\x2', '\xD1', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xD7', '\x5', '\x4', '\x3', '\x2', 
		'\xD3', '\xD4', '\a', '\x5', '\x2', '\x2', '\xD4', '\xD6', '\x5', '\x4', 
		'\x3', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', 
		'\a', '\x1E', '\x2', '\x2', '\xDB', '\xDC', '\x5', '\x6', '\x4', '\x2', 
		'\xDC', '\xDD', '\a', '\x1F', '\x2', '\x2', '\xDD', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xE0', '\x5', '*', '\x16', '\x2', '\xDF', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '`', 
		'\x2', '\x2', '\xE2', '\xE3', '\a', '`', '\x2', '\x2', '\xE3', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE9', '\x5', '\n', '\x6', '\x2', '\xE5', 
		'\xE6', '\a', '\x5', '\x2', '\x2', '\xE6', '\xE8', '\x5', '\n', '\x6', 
		'\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEE', '\a', 
		'\x6', '\x2', '\x2', '\xED', '\xEF', '\x5', '\f', '\a', '\x2', '\xEE', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\a', 
		'\a', '\x2', '\x2', '\xF1', '\xF', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF4', '\a', '\b', '\x2', '\x2', '\xF3', '\xF5', '\x5', '\f', '\a', '\x2', 
		'\xF4', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', 
		'\a', '\t', '\x2', '\x2', '\xF7', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xFE', '\x5', 'p', '\x39', '\x2', '\xF9', '\xFA', '\x5', '*', 
		'\x16', '\x2', '\xFA', '\xFB', '\a', '`', '\x2', '\x2', '\xFB', '\xFC', 
		'\a', '`', '\x2', '\x2', '\xFC', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\x13', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x104', '\x5', 
		'\x12', '\n', '\x2', '\x100', '\x101', '\a', '\x5', '\x2', '\x2', '\x101', 
		'\x103', '\x5', '\x12', '\n', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x106', '\x3', '\x2', '\x2', '\x2', '\x104', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x15', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x109', '\a', '\x1E', '\x2', '\x2', '\x108', 
		'\x10A', '\x5', '\x6', '\x4', '\x2', '\x109', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\a', '\x1F', '\x2', '\x2', 
		'\x10C', '\x17', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10F', '\a', '\x6', 
		'\x2', '\x2', '\x10E', '\x110', '\x5', '\x14', '\v', '\x2', '\x10F', '\x10E', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', 
		'\a', '\x2', '\x2', '\x112', '\x19', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x115', '\a', '\b', '\x2', '\x2', '\x114', '\x116', '\x5', '\x14', '\v', 
		'\x2', '\x115', '\x114', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x118', '\a', '\t', '\x2', '\x2', '\x118', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x119', '\x11B', '\a', '`', '\x2', '\x2', '\x11A', '\x11C', 
		'\x5', '\x16', '\f', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x120', '\a', '#', '\x2', '\x2', '\x11E', 
		'\x121', '\x5', 'p', '\x39', '\x2', '\x11F', '\x121', '\x5', '\xB8', ']', 
		'\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x12B', '\a', '\n', '\x2', '\x2', '\x123', '\x126', '\x5', '\x1C', 
		'\xF', '\x2', '\x124', '\x125', '\a', '\x5', '\x2', '\x2', '\x125', '\x127', 
		'\x5', '\x1C', '\xF', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x12A', '\a', '\x5', '\x2', '\x2', '\x129', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', 
		'\v', '\x2', '\x2', '\x12E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x135', '\x5', 't', ';', '\x2', '\x130', '\x131', '\a', '\n', '\x2', 
		'\x2', '\x131', '\x132', '\x5', 'p', '\x39', '\x2', '\x132', '\x133', 
		'\a', '\v', '\x2', '\x2', '\x133', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x134', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '!', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x13F', '\a', '\n', '\x2', '\x2', '\x137', '\x13A', '\x5', ' ', '\x11', 
		'\x2', '\x138', '\x139', '\a', '\x5', '\x2', '\x2', '\x139', '\x13B', 
		'\x5', ' ', '\x11', '\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x13E', '\a', '\x5', '\x2', '\x2', '\x13D', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x140', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\a', 
		'\v', '\x2', '\x2', '\x142', '#', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x145', '\a', '`', '\x2', '\x2', '\x144', '\x146', '\x5', '\x16', '\f', 
		'\x2', '\x145', '\x144', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x14D', '\x5', '\xB4', '[', '\x2', '\x148', '\x149', '\x5', 
		'\x42', '\"', '\x2', '\x149', '\x14A', '\a', '#', '\x2', '\x2', '\x14A', 
		'\x14B', '\x5', 'p', '\x39', '\x2', '\x14B', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x143', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '%', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x157', '\a', '\n', 
		'\x2', '\x2', '\x14F', '\x152', '\x5', '$', '\x13', '\x2', '\x150', '\x151', 
		'\a', '\x5', '\x2', '\x2', '\x151', '\x153', '\x5', '$', '\x13', '\x2', 
		'\x152', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\x3', 
		'\x2', '\x2', '\x2', '\x153', '\x155', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x156', '\a', '\x5', '\x2', '\x2', '\x155', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x156', '\x3', '\x2', '\x2', '\x2', '\x156', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x158', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x15A', '\a', '\v', '\x2', '\x2', '\x15A', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\t', '\x2', '\x2', 
		'\x2', '\x15C', ')', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\t', 
		'\x3', '\x2', '\x2', '\x15E', '+', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x160', '\t', '\x4', '\x2', '\x2', '\x160', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x162', '\a', '\b', '\x2', '\x2', '\x162', '\x163', '\a', 
		'`', '\x2', '\x2', '\x163', '\x164', '\a', '\x6', '\x2', '\x2', '\x164', 
		'\x165', '\x5', '\xE', '\b', '\x2', '\x165', '\x166', '\a', '\a', '\x2', 
		'\x2', '\x166', '\x167', '\a', '\t', '\x2', '\x2', '\x167', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x16A', '\x5', '.', '\x18', '\x2', '\x169', 
		'\x168', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\x16B', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x170', '\x5', 
		'(', '\x15', '\x2', '\x16F', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x172', '\x3', '\x2', '\x2', '\x2', '\x172', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x175', '\x5', ',', '\x17', '\x2', '\x175', '\x176', '\a', '`', 
		'\x2', '\x2', '\x176', '\x17B', '\a', '\n', '\x2', '\x2', '\x177', '\x17A', 
		'\x5', '\x34', '\x1B', '\x2', '\x178', '\x17A', '\x5', '\x32', '\x1A', 
		'\x2', '\x179', '\x177', '\x3', '\x2', '\x2', '\x2', '\x179', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x17A', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\a', '\v', '\x2', 
		'\x2', '\x17F', '\x31', '\x3', '\x2', '\x2', '\x2', '\x180', '\x182', 
		'\x5', '.', '\x18', '\x2', '\x181', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x185', '\x3', '\x2', '\x2', '\x2', '\x183', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x185', '\x183', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x188', '\x5', '(', '\x15', '\x2', '\x187', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x188', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x189', '\x187', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18B', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\a', '`', '\x2', 
		'\x2', '\x18D', '\x191', '\a', '`', '\x2', '\x2', '\x18E', '\x192', '\x5', 
		'\x36', '\x1C', '\x2', '\x18F', '\x192', '\x5', '\x38', '\x1D', '\x2', 
		'\x190', '\x192', '\x5', '>', ' ', '\x2', '\x191', '\x18E', '\x3', '\x2', 
		'\x2', '\x2', '\x191', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x191', '\x190', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x195', '\x5', '.', '\x18', '\x2', '\x194', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x198', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x197', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x198', '\x196', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x19B', '\x5', '(', '\x15', '\x2', 
		'\x19A', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19E', '\x3', 
		'\x2', '\x2', '\x2', '\x19C', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19C', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19F', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', 
		'\a', '`', '\x2', '\x2', '\x1A0', '\x1A4', '\x5', '\xE', '\b', '\x2', 
		'\x1A1', '\x1A5', '\x5', 'H', '%', '\x2', '\x1A2', '\x1A3', '\a', '\x37', 
		'\x2', '\x2', '\x1A3', '\x1A5', '\x5', 'p', '\x39', '\x2', '\x1A4', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x35', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\a', '#', 
		'\x2', '\x2', '\x1A7', '\x1A9', '\x5', 'p', '\x39', '\x2', '\x1A8', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\a', 
		'\x4', '\x2', '\x2', '\x1AB', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1AD', '\a', '\x37', '\x2', '\x2', '\x1AD', '\x1EC', '\x5', 'p', '\x39', 
		'\x2', '\x1AE', '\x1B2', '\a', '\n', '\x2', '\x2', '\x1AF', '\x1B1', '\x5', 
		'.', '\x18', '\x2', '\x1B0', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B0', '\x3', '\x2', '\x2', 
		'\x2', '\x1B2', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B2', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B7', '\x5', '(', '\x15', '\x2', '\x1B6', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x1B7', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', '\x5', ':', '\x1E', '\x2', 
		'\x1BC', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BF', '\x5', 
		'.', '\x18', '\x2', '\x1BE', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1BE', '\x3', '\x2', '\x2', 
		'\x2', '\x1C0', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1C5', '\x5', '(', '\x15', '\x2', '\x1C4', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C5', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\x1C7', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CB', '\x5', '<', '\x1F', '\x2', 
		'\x1CA', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\x3', 
		'\x2', '\x2', '\x2', '\x1CB', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1CC', 
		'\x1CE', '\x5', '.', '\x18', '\x2', '\x1CD', '\x1CC', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1CF', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\x1D4', '\x5', '(', '\x15', '\x2', '\x1D3', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D7', '\x3', '\x2', '\x2', 
		'\x2', '\x1D5', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', 
		'\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D8', '\x3', '\x2', '\x2', '\x2', 
		'\x1D7', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\x5', 
		'<', '\x1F', '\x2', '\x1D9', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'\x1DC', '\x5', '.', '\x18', '\x2', '\x1DB', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DB', 
		'\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1DD', '\x3', 
		'\x2', '\x2', '\x2', '\x1E0', '\x1E2', '\x5', '(', '\x15', '\x2', '\x1E1', 
		'\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E5', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'\x1E5', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E8', '\x5', 
		':', '\x1E', '\x2', '\x1E7', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\x3', '\x2', '\x2', 
		'\x2', '\x1E9', '\x1EA', '\a', '\v', '\x2', '\x2', '\x1EA', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1CF', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', 
		'\a', 'L', '\x2', '\x2', '\x1EE', '\x1F7', '\a', '\x4', '\x2', '\x2', 
		'\x1EF', '\x1F0', '\a', 'L', '\x2', '\x2', '\x1F0', '\x1F1', '\a', '\x37', 
		'\x2', '\x2', '\x1F1', '\x1F2', '\x5', 'p', '\x39', '\x2', '\x1F2', '\x1F3', 
		'\a', '\x4', '\x2', '\x2', '\x1F3', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1F5', '\a', 'L', '\x2', '\x2', '\x1F5', '\x1F7', '\x5', 'H', 
		'%', '\x2', '\x1F6', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1EF', 
		'\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', ';', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\a', 'M', 
		'\x2', '\x2', '\x1F9', '\x202', '\a', '\x4', '\x2', '\x2', '\x1FA', '\x1FB', 
		'\a', 'M', '\x2', '\x2', '\x1FB', '\x1FC', '\a', '\x37', '\x2', '\x2', 
		'\x1FC', '\x1FD', '\x5', 'p', '\x39', '\x2', '\x1FD', '\x1FE', '\a', '\x4', 
		'\x2', '\x2', '\x1FE', '\x202', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', 
		'\a', 'M', '\x2', '\x2', '\x200', '\x202', '\x5', 'H', '%', '\x2', '\x201', 
		'\x1F8', '\x3', '\x2', '\x2', '\x2', '\x201', '\x1FA', '\x3', '\x2', '\x2', 
		'\x2', '\x201', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x202', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x203', '\x205', '\x5', '\b', '\x5', '\x2', '\x204', 
		'\x203', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\x3', '\x2', '\x2', 
		'\x2', '\x205', '\x206', '\x3', '\x2', '\x2', '\x2', '\x206', '\x20C', 
		'\x5', '\xE', '\b', '\x2', '\x207', '\x208', '\a', '\x37', '\x2', '\x2', 
		'\x208', '\x209', '\x5', 'p', '\x39', '\x2', '\x209', '\x20A', '\a', '\x4', 
		'\x2', '\x2', '\x20A', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20D', 
		'\x5', 'H', '%', '\x2', '\x20C', '\x207', '\x3', '\x2', '\x2', '\x2', 
		'\x20C', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20D', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x20E', '\x20F', '\t', '\x5', '\x2', '\x2', '\x20F', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x210', '\x212', '\a', '\x3', '\x2', '\x2', 
		'\x211', '\x210', '\x3', '\x2', '\x2', '\x2', '\x211', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x213', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'\x218', '\a', '`', '\x2', '\x2', '\x214', '\x215', '\a', '\"', '\x2', 
		'\x2', '\x215', '\x217', '\a', '`', '\x2', '\x2', '\x216', '\x214', '\x3', 
		'\x2', '\x2', '\x2', '\x217', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x216', '\x3', '\x2', '\x2', '\x2', '\x218', '\x219', '\x3', '\x2', '\x2', 
		'\x2', '\x219', '\x43', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x218', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21D', '\a', '\x3', '\x2', '\x2', 
		'\x21C', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21D', '\x3', 
		'\x2', '\x2', '\x2', '\x21D', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x21F', '\a', '`', '\x2', '\x2', '\x21F', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x220', '\x229', '\x5', 'H', '%', '\x2', '\x221', '\x229', '\x5', 
		'^', '\x30', '\x2', '\x222', '\x223', '\x5', 'r', ':', '\x2', '\x223', 
		'\x224', '\a', '\x4', '\x2', '\x2', '\x224', '\x229', '\x3', '\x2', '\x2', 
		'\x2', '\x225', '\x226', '\x5', 'p', '\x39', '\x2', '\x226', '\x227', 
		'\a', '\x4', '\x2', '\x2', '\x227', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x228', '\x220', '\x3', '\x2', '\x2', '\x2', '\x228', '\x221', '\x3', 
		'\x2', '\x2', '\x2', '\x228', '\x222', '\x3', '\x2', '\x2', '\x2', '\x228', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x229', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x22E', '\a', '\n', '\x2', '\x2', '\x22B', '\x22D', '\x5', 
		'\x46', '$', '\x2', '\x22C', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x22D', 
		'\x230', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22C', '\x3', '\x2', '\x2', 
		'\x2', '\x22E', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\x230', '\x22E', '\x3', '\x2', '\x2', '\x2', 
		'\x231', '\x232', '\a', '\v', '\x2', '\x2', '\x232', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x233', '\x234', '\t', '\x6', '\x2', '\x2', '\x234', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x235', '\x236', '\t', '\a', '\x2', '\x2', 
		'\x236', 'M', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\t', '\b', 
		'\x2', '\x2', '\x238', 'O', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', 
		'\t', '\t', '\x2', '\x2', '\x23A', 'Q', '\x3', '\x2', '\x2', '\x2', '\x23B', 
		'\x23C', '\t', '\n', '\x2', '\x2', '\x23C', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x23D', '\x23E', '\t', '\v', '\x2', '\x2', '\x23E', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', '\x240', '\t', '\f', '\x2', '\x2', '\x240', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x241', '\x242', '\t', '\r', '\x2', 
		'\x2', '\x242', 'Y', '\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\t', 
		'\xE', '\x2', '\x2', '\x244', '[', '\x3', '\x2', '\x2', '\x2', '\x245', 
		'\x246', '\t', '\xF', '\x2', '\x2', '\x246', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x247', '\x250', '\x5', '`', '\x31', '\x2', '\x248', '\x250', 
		'\x5', '\x62', '\x32', '\x2', '\x249', '\x250', '\x5', '\x64', '\x33', 
		'\x2', '\x24A', '\x250', '\x5', '\x66', '\x34', '\x2', '\x24B', '\x250', 
		'\x5', 'h', '\x35', '\x2', '\x24C', '\x250', '\x5', 'j', '\x36', '\x2', 
		'\x24D', '\x250', '\x5', 'l', '\x37', '\x2', '\x24E', '\x250', '\x5', 
		'n', '\x38', '\x2', '\x24F', '\x247', '\x3', '\x2', '\x2', '\x2', '\x24F', 
		'\x248', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x249', '\x3', '\x2', '\x2', 
		'\x2', '\x24F', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x24F', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'\x24F', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x24E', '\x3', 
		'\x2', '\x2', '\x2', '\x250', '_', '\x3', '\x2', '\x2', '\x2', '\x251', 
		'\x252', '\a', '\x39', '\x2', '\x2', '\x252', '\x253', '\a', '\x6', '\x2', 
		'\x2', '\x253', '\x254', '\x5', 'p', '\x39', '\x2', '\x254', '\x255', 
		'\a', '\a', '\x2', '\x2', '\x255', '\x258', '\x5', '\x46', '$', '\x2', 
		'\x256', '\x257', '\a', ':', '\x2', '\x2', '\x257', '\x259', '\x5', '\x46', 
		'$', '\x2', '\x258', '\x256', '\x3', '\x2', '\x2', '\x2', '\x258', '\x259', 
		'\x3', '\x2', '\x2', '\x2', '\x259', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x25A', '\x25B', '\a', ';', '\x2', '\x2', '\x25B', '\x25C', '\a', '\x6', 
		'\x2', '\x2', '\x25C', '\x25D', '\x5', 'r', ':', '\x2', '\x25D', '\x25E', 
		'\a', '\x4', '\x2', '\x2', '\x25E', '\x25F', '\x5', 'p', '\x39', '\x2', 
		'\x25F', '\x260', '\a', '\x4', '\x2', '\x2', '\x260', '\x261', '\x5', 
		'p', '\x39', '\x2', '\x261', '\x262', '\a', '\a', '\x2', '\x2', '\x262', 
		'\x263', '\x5', '\x46', '$', '\x2', '\x263', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x264', '\x265', '\a', '<', '\x2', '\x2', '\x265', '\x266', '\a', 
		'\x6', '\x2', '\x2', '\x266', '\x267', '\a', '`', '\x2', '\x2', '\x267', 
		'\x268', '\a', '`', '\x2', '\x2', '\x268', '\x269', '\a', '\x35', '\x2', 
		'\x2', '\x269', '\x26A', '\x5', 'p', '\x39', '\x2', '\x26A', '\x26B', 
		'\a', '\a', '\x2', '\x2', '\x26B', '\x26C', '\x5', '\x46', '$', '\x2', 
		'\x26C', '\x65', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\a', '>', 
		'\x2', '\x2', '\x26E', '\x26F', '\a', '\x6', '\x2', '\x2', '\x26F', '\x270', 
		'\x5', 'p', '\x39', '\x2', '\x270', '\x271', '\a', '\a', '\x2', '\x2', 
		'\x271', '\x272', '\x5', '\x46', '$', '\x2', '\x272', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x273', '\x274', '\a', '=', '\x2', '\x2', '\x274', '\x275', 
		'\x5', '\x46', '$', '\x2', '\x275', '\x276', '\a', '>', '\x2', '\x2', 
		'\x276', '\x277', '\a', '\x6', '\x2', '\x2', '\x277', '\x278', '\x5', 
		'p', '\x39', '\x2', '\x278', '\x279', '\a', '\a', '\x2', '\x2', '\x279', 
		'\x27A', '\a', '\x4', '\x2', '\x2', '\x27A', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x27B', '\x27D', '\a', '?', '\x2', '\x2', '\x27C', '\x27E', '\x5', 
		'p', '\x39', '\x2', '\x27D', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27D', 
		'\x27E', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\x3', '\x2', '\x2', 
		'\x2', '\x27F', '\x280', '\a', '\x4', '\x2', '\x2', '\x280', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x281', '\x282', '\a', '@', '\x2', '\x2', '\x282', 
		'\x283', '\x5', 'p', '\x39', '\x2', '\x283', '\x284', '\a', '\x4', '\x2', 
		'\x2', '\x284', 'm', '\x3', '\x2', '\x2', '\x2', '\x285', '\x286', '\a', 
		'\x41', '\x2', '\x2', '\x286', '\x28F', '\x5', '\x46', '$', '\x2', '\x287', 
		'\x288', '\a', '\x42', '\x2', '\x2', '\x288', '\x289', '\a', '\x6', '\x2', 
		'\x2', '\x289', '\x28A', '\a', '`', '\x2', '\x2', '\x28A', '\x28B', '\a', 
		'`', '\x2', '\x2', '\x28B', '\x28C', '\a', '\a', '\x2', '\x2', '\x28C', 
		'\x28E', '\x5', '\x46', '$', '\x2', '\x28D', '\x287', '\x3', '\x2', '\x2', 
		'\x2', '\x28E', '\x291', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x28D', 
		'\x3', '\x2', '\x2', '\x2', '\x28F', '\x290', '\x3', '\x2', '\x2', '\x2', 
		'\x290', '\x294', '\x3', '\x2', '\x2', '\x2', '\x291', '\x28F', '\x3', 
		'\x2', '\x2', '\x2', '\x292', '\x293', '\a', '\x43', '\x2', '\x2', '\x293', 
		'\x295', '\x5', '\x46', '$', '\x2', '\x294', '\x292', '\x3', '\x2', '\x2', 
		'\x2', '\x294', '\x295', '\x3', '\x2', '\x2', '\x2', '\x295', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x296', '\x299', '\x5', 't', ';', '\x2', '\x297', 
		'\x299', '\x5', '\xA4', 'S', '\x2', '\x298', '\x296', '\x3', '\x2', '\x2', 
		'\x2', '\x298', '\x297', '\x3', '\x2', '\x2', '\x2', '\x299', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x29A', '\x29B', '\a', '`', '\x2', '\x2', '\x29B', 
		'\x29E', '\a', '`', '\x2', '\x2', '\x29C', '\x29D', '\a', '#', '\x2', 
		'\x2', '\x29D', '\x29F', '\x5', 'p', '\x39', '\x2', '\x29E', '\x29C', 
		'\x3', '\x2', '\x2', '\x2', '\x29E', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', 's', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A3', '\x5', 'z', 
		'>', '\x2', '\x2A1', '\x2A3', '\x5', 'v', '<', '\x2', '\x2A2', '\x2A0', 
		'\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A1', '\x3', '\x2', '\x2', '\x2', 
		'\x2A3', 'u', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', '\x5', '\x18', 
		'\r', '\x2', '\x2A5', '\x2A6', '\a', '\x37', '\x2', '\x2', '\x2A6', '\x2A7', 
		'\x5', 'H', '%', '\x2', '\x2A7', 'w', '\x3', '\x2', '\x2', '\x2', '\x2A8', 
		'\x2AD', '\x5', 'p', '\x39', '\x2', '\x2A9', '\x2AA', '\a', '\x5', '\x2', 
		'\x2', '\x2AA', '\x2AC', '\x5', 'p', '\x39', '\x2', '\x2AB', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AF', '\x3', '\x2', '\x2', '\x2', 
		'\x2AD', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AE', '\x3', 
		'\x2', '\x2', '\x2', '\x2AE', 'y', '\x3', '\x2', '\x2', '\x2', '\x2AF', 
		'\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2B6', '\x5', '|', '?', 
		'\x2', '\x2B1', '\x2B2', '\a', '/', '\x2', '\x2', '\x2B2', '\x2B3', '\x5', 
		'p', '\x39', '\x2', '\x2B3', '\x2B4', '\a', '\x30', '\x2', '\x2', '\x2B4', 
		'\x2B5', '\x5', 'p', '\x39', '\x2', '\x2B5', '\x2B7', '\x3', '\x2', '\x2', 
		'\x2', '\x2B6', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B7', 
		'\x3', '\x2', '\x2', '\x2', '\x2B7', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x2B8', '\x2BB', '\x5', '~', '@', '\x2', '\x2B9', '\x2BA', '\a', '\x38', 
		'\x2', '\x2', '\x2BA', '\x2BC', '\x5', '|', '?', '\x2', '\x2BB', '\x2B9', 
		'\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', '\x3', '\x2', '\x2', '\x2', 
		'\x2BC', '}', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2C2', '\x5', '\x80', 
		'\x41', '\x2', '\x2BE', '\x2BF', '\a', '\x18', '\x2', '\x2', '\x2BF', 
		'\x2C1', '\x5', '\x80', '\x41', '\x2', '\x2C0', '\x2BE', '\x3', '\x2', 
		'\x2', '\x2', '\x2C1', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C0', 
		'\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C3', '\x3', '\x2', '\x2', '\x2', 
		'\x2C3', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C2', '\x3', 
		'\x2', '\x2', '\x2', '\x2C5', '\x2CA', '\x5', '\x82', '\x42', '\x2', '\x2C6', 
		'\x2C7', '\a', '\x17', '\x2', '\x2', '\x2C7', '\x2C9', '\x5', '\x82', 
		'\x42', '\x2', '\x2C8', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C9', 
		'\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x2CA', '\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2CA', '\x3', '\x2', '\x2', '\x2', 
		'\x2CD', '\x2D2', '\x5', '\x84', '\x43', '\x2', '\x2CE', '\x2CF', '\a', 
		'\x14', '\x2', '\x2', '\x2CF', '\x2D1', '\x5', '\x84', '\x43', '\x2', 
		'\x2D0', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D4', '\x3', 
		'\x2', '\x2', '\x2', '\x2D2', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D2', 
		'\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x2D4', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2DA', 
		'\x5', '\x86', '\x44', '\x2', '\x2D6', '\x2D7', '\a', '\x15', '\x2', '\x2', 
		'\x2D7', '\x2D9', '\x5', '\x86', '\x44', '\x2', '\x2D8', '\x2D6', '\x3', 
		'\x2', '\x2', '\x2', '\x2D9', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DA', 
		'\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DB', '\x3', '\x2', '\x2', 
		'\x2', '\x2DB', '\x85', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DA', 
		'\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2E2', '\x5', '\x88', '\x45', '\x2', 
		'\x2DE', '\x2DF', '\a', '\x13', '\x2', '\x2', '\x2DF', '\x2E1', '\x5', 
		'\x88', '\x45', '\x2', '\x2E0', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2E1', 
		'\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E0', '\x3', '\x2', '\x2', 
		'\x2', '\x2E2', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E2', '\x3', '\x2', '\x2', '\x2', 
		'\x2E5', '\x2EB', '\x5', '\x8A', '\x46', '\x2', '\x2E6', '\x2E7', '\x5', 
		'V', ',', '\x2', '\x2E7', '\x2E8', '\x5', '\x8A', '\x46', '\x2', '\x2E8', 
		'\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2E6', '\x3', '\x2', '\x2', 
		'\x2', '\x2EA', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E9', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2EC', '\x3', '\x2', '\x2', '\x2', 
		'\x2EC', '\x89', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EB', '\x3', 
		'\x2', '\x2', '\x2', '\x2EE', '\x2F2', '\x5', '\x8E', 'H', '\x2', '\x2EF', 
		'\x2F1', '\x5', '\x8C', 'G', '\x2', '\x2F0', '\x2EF', '\x3', '\x2', '\x2', 
		'\x2', '\x2F1', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F0', 
		'\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F3', '\x3', '\x2', '\x2', '\x2', 
		'\x2F3', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F2', '\x3', 
		'\x2', '\x2', '\x2', '\x2F5', '\x2F6', '\x5', 'X', '-', '\x2', '\x2F6', 
		'\x2F7', '\x5', '\x8E', 'H', '\x2', '\x2F7', '\x2FB', '\x3', '\x2', '\x2', 
		'\x2', '\x2F8', '\x2F9', '\t', '\x10', '\x2', '\x2', '\x2F9', '\x2FB', 
		'\x5', '\x42', '\"', '\x2', '\x2FA', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\x2FA', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2FB', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x2FC', '\x302', '\x5', '\x90', 'I', '\x2', '\x2FD', 
		'\x2FE', '\x5', 'T', '+', '\x2', '\x2FE', '\x2FF', '\x5', '\x90', 'I', 
		'\x2', '\x2FF', '\x301', '\x3', '\x2', '\x2', '\x2', '\x300', '\x2FD', 
		'\x3', '\x2', '\x2', '\x2', '\x301', '\x304', '\x3', '\x2', '\x2', '\x2', 
		'\x302', '\x300', '\x3', '\x2', '\x2', '\x2', '\x302', '\x303', '\x3', 
		'\x2', '\x2', '\x2', '\x303', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x304', 
		'\x302', '\x3', '\x2', '\x2', '\x2', '\x305', '\x30B', '\x5', '\x92', 
		'J', '\x2', '\x306', '\x307', '\x5', 'J', '&', '\x2', '\x307', '\x308', 
		'\x5', '\x92', 'J', '\x2', '\x308', '\x30A', '\x3', '\x2', '\x2', '\x2', 
		'\x309', '\x306', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x30D', '\x3', 
		'\x2', '\x2', '\x2', '\x30B', '\x309', '\x3', '\x2', '\x2', '\x2', '\x30B', 
		'\x30C', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x30D', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x314', 
		'\x5', '\x94', 'K', '\x2', '\x30F', '\x310', '\x5', 'L', '\'', '\x2', 
		'\x310', '\x311', '\x5', '\x94', 'K', '\x2', '\x311', '\x313', '\x3', 
		'\x2', '\x2', '\x2', '\x312', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x313', 
		'\x316', '\x3', '\x2', '\x2', '\x2', '\x314', '\x312', '\x3', '\x2', '\x2', 
		'\x2', '\x314', '\x315', '\x3', '\x2', '\x2', '\x2', '\x315', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x316', '\x314', '\x3', '\x2', '\x2', '\x2', 
		'\x317', '\x31A', '\x5', '\x96', 'L', '\x2', '\x318', '\x319', '\a', 'K', 
		'\x2', '\x2', '\x319', '\x31B', '\x5', '$', '\x13', '\x2', '\x31A', '\x318', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x31B', '\x3', '\x2', '\x2', '\x2', 
		'\x31B', '\x95', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x320', '\x5', 
		'\x9C', 'O', '\x2', '\x31D', '\x31E', '\x5', '\\', '/', '\x2', '\x31E', 
		'\x31F', '\x5', '\x9C', 'O', '\x2', '\x31F', '\x321', '\x3', '\x2', '\x2', 
		'\x2', '\x320', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x320', '\x321', 
		'\x3', '\x2', '\x2', '\x2', '\x321', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x322', '\x323', '\x5', 'N', '(', '\x2', '\x323', '\x324', '\x5', '\x9C', 
		'O', '\x2', '\x324', '\x99', '\x3', '\x2', '\x2', '\x2', '\x325', '\x328', 
		'\x5', '@', '!', '\x2', '\x326', '\x328', '\x5', '\x42', '\"', '\x2', 
		'\x327', '\x325', '\x3', '\x2', '\x2', '\x2', '\x327', '\x326', '\x3', 
		'\x2', '\x2', '\x2', '\x328', '\x329', '\x3', '\x2', '\x2', '\x2', '\x329', 
		'\x32A', '\x5', 'N', '(', '\x2', '\x32A', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x32B', '\x333', '\x5', '\xA6', 'T', '\x2', '\x32C', '\x32D', 
		'\t', '\x11', '\x2', '\x2', '\x32D', '\x333', '\x5', '\x9C', 'O', '\x2', 
		'\x32E', '\x333', '\x5', '\x98', 'M', '\x2', '\x32F', '\x333', '\x5', 
		'\x9E', 'P', '\x2', '\x330', '\x333', '\x5', '\xA0', 'Q', '\x2', '\x331', 
		'\x333', '\x5', '\xA2', 'R', '\x2', '\x332', '\x32B', '\x3', '\x2', '\x2', 
		'\x2', '\x332', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x332', '\x32E', 
		'\x3', '\x2', '\x2', '\x2', '\x332', '\x32F', '\x3', '\x2', '\x2', '\x2', 
		'\x332', '\x330', '\x3', '\x2', '\x2', '\x2', '\x332', '\x331', '\x3', 
		'\x2', '\x2', '\x2', '\x333', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x334', 
		'\x335', '\a', '\x6', '\x2', '\x2', '\x335', '\x336', '\a', '`', '\x2', 
		'\x2', '\x336', '\x337', '\a', '\a', '\x2', '\x2', '\x337', '\x338', '\x5', 
		'\x9C', 'O', '\x2', '\x338', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x339', 
		'\x33A', '\a', '\xE', '\x2', '\x2', '\x33A', '\x33B', '\x5', '\x9C', 'O', 
		'\x2', '\x33B', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x33D', 
		'\a', '\x13', '\x2', '\x2', '\x33D', '\x33E', '\x5', '\x9C', 'O', '\x2', 
		'\x33E', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x33F', '\x340', '\x5', 
		'\x9C', 'O', '\x2', '\x340', '\x341', '\x5', 'Z', '.', '\x2', '\x341', 
		'\x342', '\x5', 'p', '\x39', '\x2', '\x342', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x343', '\x346', '\x5', '\xA8', 'U', '\x2', '\x344', '\x346', 
		'\x5', '\xB0', 'Y', '\x2', '\x345', '\x343', '\x3', '\x2', '\x2', '\x2', 
		'\x345', '\x344', '\x3', '\x2', '\x2', '\x2', '\x346', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\x347', '\x348', '\a', '\x44', '\x2', '\x2', '\x348', 
		'\x34A', '\x5', '\x1A', '\xE', '\x2', '\x349', '\x34B', '\x5', '\xAA', 
		'V', '\x2', '\x34A', '\x349', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x34B', 
		'\x3', '\x2', '\x2', '\x2', '\x34B', '\x34D', '\x3', '\x2', '\x2', '\x2', 
		'\x34C', '\x34E', '\x5', '\xAC', 'W', '\x2', '\x34D', '\x34C', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x34E', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x34F', '\x353', '\a', '\b', '\x2', 
		'\x2', '\x350', '\x352', '\a', '\x5', '\x2', '\x2', '\x351', '\x350', 
		'\x3', '\x2', '\x2', '\x2', '\x352', '\x355', '\x3', '\x2', '\x2', '\x2', 
		'\x353', '\x351', '\x3', '\x2', '\x2', '\x2', '\x353', '\x354', '\x3', 
		'\x2', '\x2', '\x2', '\x354', '\x356', '\x3', '\x2', '\x2', '\x2', '\x355', 
		'\x353', '\x3', '\x2', '\x2', '\x2', '\x356', '\x357', '\a', '\t', '\x2', 
		'\x2', '\x357', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x358', '\x364', 
		'\a', '\n', '\x2', '\x2', '\x359', '\x35E', '\x5', '\xAE', 'X', '\x2', 
		'\x35A', '\x35B', '\a', '\x5', '\x2', '\x2', '\x35B', '\x35D', '\x5', 
		'\xAE', 'X', '\x2', '\x35C', '\x35A', '\x3', '\x2', '\x2', '\x2', '\x35D', 
		'\x360', '\x3', '\x2', '\x2', '\x2', '\x35E', '\x35C', '\x3', '\x2', '\x2', 
		'\x2', '\x35E', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x362', 
		'\x3', '\x2', '\x2', '\x2', '\x360', '\x35E', '\x3', '\x2', '\x2', '\x2', 
		'\x361', '\x363', '\a', '\x5', '\x2', '\x2', '\x362', '\x361', '\x3', 
		'\x2', '\x2', '\x2', '\x362', '\x363', '\x3', '\x2', '\x2', '\x2', '\x363', 
		'\x365', '\x3', '\x2', '\x2', '\x2', '\x364', '\x359', '\x3', '\x2', '\x2', 
		'\x2', '\x364', '\x365', '\x3', '\x2', '\x2', '\x2', '\x365', '\x366', 
		'\x3', '\x2', '\x2', '\x2', '\x366', '\x367', '\a', '\v', '\x2', '\x2', 
		'\x367', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x368', '\x36B', '\x5', 
		'p', '\x39', '\x2', '\x369', '\x36B', '\x5', '\xAC', 'W', '\x2', '\x36A', 
		'\x368', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x369', '\x3', '\x2', '\x2', 
		'\x2', '\x36B', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x376', 
		'\x5', '@', '!', '\x2', '\x36D', '\x376', '\x5', '\x44', '#', '\x2', '\x36E', 
		'\x36F', '\a', '\x6', '\x2', '\x2', '\x36F', '\x370', '\x5', 'p', '\x39', 
		'\x2', '\x370', '\x371', '\a', '\a', '\x2', '\x2', '\x371', '\x376', '\x3', 
		'\x2', '\x2', '\x2', '\x372', '\x376', '\x5', '\xB4', '[', '\x2', '\x373', 
		'\x376', '\x5', '\x9A', 'N', '\x2', '\x374', '\x376', '\x5', '\xB6', '\\', 
		'\x2', '\x375', '\x36C', '\x3', '\x2', '\x2', '\x2', '\x375', '\x36D', 
		'\x3', '\x2', '\x2', '\x2', '\x375', '\x36E', '\x3', '\x2', '\x2', '\x2', 
		'\x375', '\x372', '\x3', '\x2', '\x2', '\x2', '\x375', '\x373', '\x3', 
		'\x2', '\x2', '\x2', '\x375', '\x374', '\x3', '\x2', '\x2', '\x2', '\x376', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x377', '\x378', '\x5', '\xA8', 'U', 
		'\x2', '\x378', '\x379', '\a', '\"', '\x2', '\x2', '\x379', '\x393', '\x3', 
		'\x2', '\x2', '\x2', '\x37A', '\x37B', '\x5', '@', '!', '\x2', '\x37B', 
		'\x37C', '\a', '\"', '\x2', '\x2', '\x37C', '\x393', '\x3', '\x2', '\x2', 
		'\x2', '\x37D', '\x37F', '\x5', '\x44', '#', '\x2', '\x37E', '\x380', 
		'\x5', '\x16', '\f', '\x2', '\x37F', '\x37E', '\x3', '\x2', '\x2', '\x2', 
		'\x37F', '\x380', '\x3', '\x2', '\x2', '\x2', '\x380', '\x383', '\x3', 
		'\x2', '\x2', '\x2', '\x381', '\x384', '\x5', '\x18', '\r', '\x2', '\x382', 
		'\x384', '\x5', '\x1A', '\xE', '\x2', '\x383', '\x381', '\x3', '\x2', 
		'\x2', '\x2', '\x383', '\x382', '\x3', '\x2', '\x2', '\x2', '\x383', '\x384', 
		'\x3', '\x2', '\x2', '\x2', '\x384', '\x385', '\x3', '\x2', '\x2', '\x2', 
		'\x385', '\x386', '\a', '\"', '\x2', '\x2', '\x386', '\x393', '\x3', '\x2', 
		'\x2', '\x2', '\x387', '\x388', '\a', '\x6', '\x2', '\x2', '\x388', '\x389', 
		'\x5', 'p', '\x39', '\x2', '\x389', '\x38A', '\a', '\a', '\x2', '\x2', 
		'\x38A', '\x38B', '\a', '\"', '\x2', '\x2', '\x38B', '\x393', '\x3', '\x2', 
		'\x2', '\x2', '\x38C', '\x38D', '\x5', '\x9A', 'N', '\x2', '\x38D', '\x38E', 
		'\a', '\"', '\x2', '\x2', '\x38E', '\x393', '\x3', '\x2', '\x2', '\x2', 
		'\x38F', '\x390', '\x5', '\xB6', '\\', '\x2', '\x390', '\x391', '\a', 
		'\"', '\x2', '\x2', '\x391', '\x393', '\x3', '\x2', '\x2', '\x2', '\x392', 
		'\x377', '\x3', '\x2', '\x2', '\x2', '\x392', '\x37A', '\x3', '\x2', '\x2', 
		'\x2', '\x392', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x392', '\x387', 
		'\x3', '\x2', '\x2', '\x2', '\x392', '\x38C', '\x3', '\x2', '\x2', '\x2', 
		'\x392', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x393', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x394', '\x396', '\x5', '\xB2', 'Z', '\x2', '\x395', 
		'\x394', '\x3', '\x2', '\x2', '\x2', '\x396', '\x399', '\x3', '\x2', '\x2', 
		'\x2', '\x397', '\x395', '\x3', '\x2', '\x2', '\x2', '\x397', '\x398', 
		'\x3', '\x2', '\x2', '\x2', '\x398', '\x39A', '\x3', '\x2', '\x2', '\x2', 
		'\x399', '\x397', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x39C', '\x5', 
		'\x44', '#', '\x2', '\x39B', '\x39D', '\x5', '\x16', '\f', '\x2', '\x39C', 
		'\x39B', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39D', '\x3', '\x2', '\x2', 
		'\x2', '\x39D', '\x3A0', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x3A1', 
		'\x5', '\x18', '\r', '\x2', '\x39F', '\x3A1', '\x5', '\x1A', '\xE', '\x2', 
		'\x3A0', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x39F', '\x3', 
		'\x2', '\x2', '\x2', '\x3A0', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3A1', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A9', '\x5', '\xBA', '^', 
		'\x2', '\x3A3', '\x3A9', '\x5', '\xBC', '_', '\x2', '\x3A4', '\x3A9', 
		'\x5', '\xBE', '`', '\x2', '\x3A5', '\x3A9', '\x5', '\xC0', '\x61', '\x2', 
		'\x3A6', '\x3A9', '\x5', '\xC2', '\x62', '\x2', '\x3A7', '\x3A9', '\x5', 
		'\xC6', '\x64', '\x2', '\x3A8', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A8', 
		'\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A4', '\x3', '\x2', '\x2', 
		'\x2', '\x3A8', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A6', 
		'\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A7', '\x3', '\x2', '\x2', '\x2', 
		'\x3A9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3AD', '\x5', 
		'\x1E', '\x10', '\x2', '\x3AB', '\x3AD', '\x5', '\"', '\x12', '\x2', '\x3AC', 
		'\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AB', '\x3', '\x2', '\x2', 
		'\x2', '\x3AD', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x3AE', '\x3AF', 
		'\a', '\x44', '\x2', '\x2', '\x3AF', '\x3B5', '\a', '`', '\x2', '\x2', 
		'\x3B0', '\x3B2', '\x5', '\x18', '\r', '\x2', '\x3B1', '\x3B3', '\x5', 
		'\xB8', ']', '\x2', '\x3B2', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\x3B2', 
		'\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B6', '\x3', '\x2', '\x2', 
		'\x2', '\x3B4', '\x3B6', '\x5', '\xB8', ']', '\x2', '\x3B5', '\x3B0', 
		'\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B4', '\x3', '\x2', '\x2', '\x2', 
		'\x3B6', '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3B7', '\x3B8', '\a', 
		'\x44', '\x2', '\x2', '\x3B8', '\x3BA', '\x5', '&', '\x14', '\x2', '\x3B9', 
		'\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3B7', '\x3', '\x2', '\x2', 
		'\x2', '\x3BA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3BC', 
		'\a', '\x45', '\x2', '\x2', '\x3BC', '\x3BD', '\a', '\x6', '\x2', '\x2', 
		'\x3BD', '\x3BE', '\a', '`', '\x2', '\x2', '\x3BE', '\x3BF', '\a', '\a', 
		'\x2', '\x2', '\x3BF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3C1', 
		'\a', '\x46', '\x2', '\x2', '\x3C1', '\x3C2', '\a', '\x6', '\x2', '\x2', 
		'\x3C2', '\x3C3', '\x5', 'p', '\x39', '\x2', '\x3C3', '\x3C4', '\a', '\a', 
		'\x2', '\x2', '\x3C4', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x3C5', '\x3C6', 
		'\a', 'G', '\x2', '\x2', '\x3C6', '\x3C7', '\a', '\x6', '\x2', '\x2', 
		'\x3C7', '\x3C8', '\x5', 'p', '\x39', '\x2', '\x3C8', '\x3C9', '\a', '\a', 
		'\x2', '\x2', '\x3C9', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CE', 
		'\a', 'H', '\x2', '\x2', '\x3CB', '\x3CC', '\a', '\x6', '\x2', '\x2', 
		'\x3CC', '\x3CD', '\a', '`', '\x2', '\x2', '\x3CD', '\x3CF', '\a', '\a', 
		'\x2', '\x2', '\x3CE', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3CE', '\x3CF', 
		'\x3', '\x2', '\x2', '\x2', '\x3CF', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\x3D0', '\x3D1', '\a', 'I', '\x2', '\x2', '\x3D1', '\x3D2', '\x5', '\xE', 
		'\b', '\x2', '\x3D2', '\x3D3', '\x5', 'H', '%', '\x2', '\x3D3', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\a', 'J', '\x2', '\x2', 
		'\x3D5', '\x3D6', '\a', '\x6', '\x2', '\x2', '\x3D6', '\x3D7', '\a', '`', 
		'\x2', '\x2', '\x3D7', '\x3D8', '\a', '\a', '\x2', '\x2', '\x3D8', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', 'i', '\xCB', '\xD7', '\xDF', '\xE9', '\xEE', 
		'\xF4', '\xFD', '\x104', '\x109', '\x10F', '\x115', '\x11B', '\x120', 
		'\x126', '\x129', '\x12B', '\x134', '\x13A', '\x13D', '\x13F', '\x145', 
		'\x14C', '\x152', '\x155', '\x157', '\x16B', '\x171', '\x179', '\x17B', 
		'\x183', '\x189', '\x191', '\x196', '\x19C', '\x1A4', '\x1A8', '\x1B2', 
		'\x1B8', '\x1C0', '\x1C6', '\x1CA', '\x1CF', '\x1D5', '\x1DD', '\x1E3', 
		'\x1E7', '\x1EB', '\x1F6', '\x201', '\x204', '\x20C', '\x211', '\x218', 
		'\x21C', '\x228', '\x22E', '\x24F', '\x258', '\x27D', '\x28F', '\x294', 
		'\x298', '\x29E', '\x2A2', '\x2AD', '\x2B6', '\x2BB', '\x2C2', '\x2CA', 
		'\x2D2', '\x2DA', '\x2E2', '\x2EB', '\x2F2', '\x2FA', '\x302', '\x30B', 
		'\x314', '\x31A', '\x320', '\x327', '\x332', '\x345', '\x34A', '\x34D', 
		'\x353', '\x35E', '\x362', '\x364', '\x36A', '\x375', '\x37F', '\x383', 
		'\x392', '\x397', '\x39C', '\x3A0', '\x3A8', '\x3AC', '\x3B2', '\x3B5', 
		'\x3B9', '\x3CE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
