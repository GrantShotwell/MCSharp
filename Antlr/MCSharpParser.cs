//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MCSharp.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class MCSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		WHITESPACE=74, NEWLINE=75, INTEGER=76, DECIMAL=77, STRING=78, TYPE_NAME=79, 
		MEMBER_NAME=80, VARIABLE_NAME=81, ACCESS=82, USAGE=83, MODIFIER=84, PARAMETER_MODIFIER=85;
	public const int
		RULE_generic_parameter = 0, RULE_generic_parameter_list = 1, RULE_generic_parameters = 2, 
		RULE_method_parameter = 3, RULE_method_parameter_list = 4, RULE_method_parameters = 5, 
		RULE_indexer_parameters = 6, RULE_argument = 7, RULE_argument_list = 8, 
		RULE_generic_arguments = 9, RULE_method_arguments = 10, RULE_indexer_arguments = 11, 
		RULE_member_initializer = 12, RULE_object_initializer = 13, RULE_element_initializer = 14, 
		RULE_collection_initializer = 15, RULE_anonymous_element_initializer = 16, 
		RULE_anonymous_object_initializer = 17, RULE_type_definition = 18, RULE_member_definition = 19, 
		RULE_field_definition = 20, RULE_field_definition_end = 21, RULE_property_definition = 22, 
		RULE_property_definition_end = 23, RULE_property_get_definition = 24, 
		RULE_property_set_definition = 25, RULE_method_definition = 26, RULE_method_definition_end = 27, 
		RULE_literal = 28, RULE_identifier = 29, RULE_statement = 30, RULE_code_block = 31, 
		RULE_language_function = 32, RULE_if_statement = 33, RULE_for_statement = 34, 
		RULE_foreach_statement = 35, RULE_while_statement = 36, RULE_do_statement = 37, 
		RULE_return_statement = 38, RULE_throw_statement = 39, RULE_try_statement = 40, 
		RULE_expression = 41, RULE_initialization_expression = 42, RULE_non_assignment_expression = 43, 
		RULE_lambda_expression = 44, RULE_expression_list = 45, RULE_conditional_expression = 46, 
		RULE_null_coalescing_expression = 47, RULE_conditional_or_expression = 48, 
		RULE_conditional_and_expression = 49, RULE_inclusive_or_expression = 50, 
		RULE_exclusive_or_expression = 51, RULE_and_expression = 52, RULE_equality_expression = 53, 
		RULE_relational_expression = 54, RULE_relation_or_type_check = 55, RULE_shift_expression = 56, 
		RULE_additive_expression = 57, RULE_multiplicative_expression = 58, RULE_with_expression = 59, 
		RULE_range_expression = 60, RULE_unary_expression = 61, RULE_cast_expression = 62, 
		RULE_pointer_indirection_expression = 63, RULE_addressof_expression = 64, 
		RULE_assignment_expression = 65, RULE_primary_expression = 66, RULE_array_creation_expression = 67, 
		RULE_array_rank_specifier = 68, RULE_array_initializer = 69, RULE_variable_initializer = 70, 
		RULE_primary_no_array_creation_expression = 71, RULE_member_access = 72, 
		RULE_invocation_expression = 73, RULE_indexer_expression = 74, RULE_post_step_expression = 75, 
		RULE_keyword_expression = 76, RULE_object_or_collection_initializer = 77, 
		RULE_new_keyword_expression = 78, RULE_typeof_keyword_expression = 79, 
		RULE_checked_expression = 80, RULE_unchecked_expression = 81, RULE_default_keyword_expression = 82, 
		RULE_delegate_keyword_expression = 83, RULE_sizeof_keyword_expression = 84;
	public static readonly string[] ruleNames = {
		"generic_parameter", "generic_parameter_list", "generic_parameters", "method_parameter", 
		"method_parameter_list", "method_parameters", "indexer_parameters", "argument", 
		"argument_list", "generic_arguments", "method_arguments", "indexer_arguments", 
		"member_initializer", "object_initializer", "element_initializer", "collection_initializer", 
		"anonymous_element_initializer", "anonymous_object_initializer", "type_definition", 
		"member_definition", "field_definition", "field_definition_end", "property_definition", 
		"property_definition_end", "property_get_definition", "property_set_definition", 
		"method_definition", "method_definition_end", "literal", "identifier", 
		"statement", "code_block", "language_function", "if_statement", "for_statement", 
		"foreach_statement", "while_statement", "do_statement", "return_statement", 
		"throw_statement", "try_statement", "expression", "initialization_expression", 
		"non_assignment_expression", "lambda_expression", "expression_list", "conditional_expression", 
		"null_coalescing_expression", "conditional_or_expression", "conditional_and_expression", 
		"inclusive_or_expression", "exclusive_or_expression", "and_expression", 
		"equality_expression", "relational_expression", "relation_or_type_check", 
		"shift_expression", "additive_expression", "multiplicative_expression", 
		"with_expression", "range_expression", "unary_expression", "cast_expression", 
		"pointer_indirection_expression", "addressof_expression", "assignment_expression", 
		"primary_expression", "array_creation_expression", "array_rank_specifier", 
		"array_initializer", "variable_initializer", "primary_no_array_creation_expression", 
		"member_access", "invocation_expression", "indexer_expression", "post_step_expression", 
		"keyword_expression", "object_or_collection_initializer", "new_keyword_expression", 
		"typeof_keyword_expression", "checked_expression", "unchecked_expression", 
		"default_keyword_expression", "delegate_keyword_expression", "sizeof_keyword_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'<'", "'>'", "'('", "')'", "'['", "']'", "'='", "'{'", "'}'", 
		"';'", "'=>'", "'get'", "'set'", "'@'", "'.'", "'if'", "'for'", "'foreach'", 
		"'in'", "'while'", "'do'", "'return'", "'throw'", "'try'", "'catch'", 
		"'finally'", "'?'", "':'", "'??'", "'||'", "'&&'", "'|'", "'^'", "'&'", 
		"'=='", "'!='", "'<='", "'>='", "'is'", "'as'", "'<<'", "'>>'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'with'", "'..'", "'..^'", "'!'", "'~'", "'++'", 
		"'--'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", 
		"'<<='", "'>>='", "'.='", "'new'", "'typeof'", "'checked'", "'unchecked'", 
		"'default'", "'delegate'", "'sizeof'", null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "WHITESPACE", "NEWLINE", "INTEGER", "DECIMAL", "STRING", "TYPE_NAME", 
		"MEMBER_NAME", "VARIABLE_NAME", "ACCESS", "USAGE", "MODIFIER", "PARAMETER_MODIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MCSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MCSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MCSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MCSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Generic_parameterContext : ParserRuleContext {
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public Generic_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterGeneric_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitGeneric_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameterContext generic_parameter() {
		Generic_parameterContext _localctx = new Generic_parameterContext(Context, State);
		EnterRule(_localctx, 0, RULE_generic_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(TYPE_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parameter_listContext : ParserRuleContext {
		public Generic_parameterContext[] generic_parameter() {
			return GetRuleContexts<Generic_parameterContext>();
		}
		public Generic_parameterContext generic_parameter(int i) {
			return GetRuleContext<Generic_parameterContext>(i);
		}
		public Generic_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterGeneric_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitGeneric_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameter_listContext generic_parameter_list() {
		Generic_parameter_listContext _localctx = new Generic_parameter_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_generic_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; generic_parameter();
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 173; Match(T__0);
				State = 174; generic_parameter();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parametersContext : ParserRuleContext {
		public Generic_parameter_listContext generic_parameter_list() {
			return GetRuleContext<Generic_parameter_listContext>(0);
		}
		public Generic_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterGeneric_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitGeneric_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parametersContext generic_parameters() {
		Generic_parametersContext _localctx = new Generic_parametersContext(Context, State);
		EnterRule(_localctx, 4, RULE_generic_parameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(T__1);
			State = 181; generic_parameter_list();
			State = 182; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_parameterContext : ParserRuleContext {
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public ITerminalNode VARIABLE_NAME() { return GetToken(MCSharpParser.VARIABLE_NAME, 0); }
		public ITerminalNode PARAMETER_MODIFIER() { return GetToken(MCSharpParser.PARAMETER_MODIFIER, 0); }
		public Method_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMethod_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMethod_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Method_parameterContext method_parameter() {
		Method_parameterContext _localctx = new Method_parameterContext(Context, State);
		EnterRule(_localctx, 6, RULE_method_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARAMETER_MODIFIER) {
				{
				State = 184; Match(PARAMETER_MODIFIER);
				}
			}

			State = 187; Match(TYPE_NAME);
			State = 188; Match(VARIABLE_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_parameter_listContext : ParserRuleContext {
		public Method_parameterContext[] method_parameter() {
			return GetRuleContexts<Method_parameterContext>();
		}
		public Method_parameterContext method_parameter(int i) {
			return GetRuleContext<Method_parameterContext>(i);
		}
		public Method_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMethod_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMethod_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Method_parameter_listContext method_parameter_list() {
		Method_parameter_listContext _localctx = new Method_parameter_listContext(Context, State);
		EnterRule(_localctx, 8, RULE_method_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; method_parameter();
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 191; Match(T__0);
				State = 192; method_parameter();
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_parametersContext : ParserRuleContext {
		public Method_parameter_listContext method_parameter_list() {
			return GetRuleContext<Method_parameter_listContext>(0);
		}
		public Method_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMethod_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMethod_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Method_parametersContext method_parameters() {
		Method_parametersContext _localctx = new Method_parametersContext(Context, State);
		EnterRule(_localctx, 10, RULE_method_parameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(T__3);
			State = 199; method_parameter_list();
			State = 200; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_parametersContext : ParserRuleContext {
		public Method_parameter_listContext method_parameter_list() {
			return GetRuleContext<Method_parameter_listContext>(0);
		}
		public Indexer_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterIndexer_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitIndexer_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_parametersContext indexer_parameters() {
		Indexer_parametersContext _localctx = new Indexer_parametersContext(Context, State);
		EnterRule(_localctx, 12, RULE_indexer_parameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(T__5);
			State = 203; method_parameter_list();
			State = 204; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PARAMETER_MODIFIER() { return GetToken(MCSharpParser.PARAMETER_MODIFIER, 0); }
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public ITerminalNode VARIABLE_NAME() { return GetToken(MCSharpParser.VARIABLE_NAME, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_argument);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__14:
			case T__34:
			case T__43:
			case T__44:
			case T__45:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__72:
			case INTEGER:
			case DECIMAL:
			case STRING:
			case TYPE_NAME:
			case MEMBER_NAME:
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206; expression();
				}
				break;
			case PARAMETER_MODIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207; Match(PARAMETER_MODIFIER);
				State = 208; Match(TYPE_NAME);
				State = 209; Match(VARIABLE_NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 16, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; argument();
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 213; Match(T__0);
				State = 214; argument();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_argumentsContext : ParserRuleContext {
		public Generic_parameter_listContext generic_parameter_list() {
			return GetRuleContext<Generic_parameter_listContext>(0);
		}
		public Generic_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterGeneric_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitGeneric_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Generic_argumentsContext generic_arguments() {
		Generic_argumentsContext _localctx = new Generic_argumentsContext(Context, State);
		EnterRule(_localctx, 18, RULE_generic_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(T__1);
			State = 221; generic_parameter_list();
			State = 222; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_argumentsContext : ParserRuleContext {
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMethod_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMethod_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Method_argumentsContext method_arguments() {
		Method_argumentsContext _localctx = new Method_argumentsContext(Context, State);
		EnterRule(_localctx, 20, RULE_method_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(T__3);
			State = 225; argument_list();
			State = 226; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_argumentsContext : ParserRuleContext {
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Indexer_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterIndexer_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitIndexer_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_argumentsContext indexer_arguments() {
		Indexer_argumentsContext _localctx = new Indexer_argumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_indexer_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(T__5);
			State = 229; argument_list();
			State = 230; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializerContext : ParserRuleContext {
		public ITerminalNode MEMBER_NAME() { return GetToken(MCSharpParser.MEMBER_NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Generic_argumentsContext generic_arguments() {
			return GetRuleContext<Generic_argumentsContext>(0);
		}
		public Member_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMember_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMember_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializerContext member_initializer() {
		Member_initializerContext _localctx = new Member_initializerContext(Context, State);
		EnterRule(_localctx, 24, RULE_member_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(MEMBER_NAME);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 233; generic_arguments();
				}
			}

			State = 236; Match(T__7);
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__14:
			case T__34:
			case T__43:
			case T__44:
			case T__45:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__72:
			case INTEGER:
			case DECIMAL:
			case STRING:
			case TYPE_NAME:
			case MEMBER_NAME:
			case VARIABLE_NAME:
				{
				State = 237; expression();
				}
				break;
			case T__8:
				{
				State = 238; object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_initializerContext : ParserRuleContext {
		public Member_initializerContext[] member_initializer() {
			return GetRuleContexts<Member_initializerContext>();
		}
		public Member_initializerContext member_initializer(int i) {
			return GetRuleContext<Member_initializerContext>(i);
		}
		public Object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterObject_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitObject_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Object_initializerContext object_initializer() {
		Object_initializerContext _localctx = new Object_initializerContext(Context, State);
		EnterRule(_localctx, 26, RULE_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(T__8);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MEMBER_NAME) {
				{
				State = 242; member_initializer();
				State = 245;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 243; Match(T__0);
					State = 244; member_initializer();
					}
					break;
				}
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 247; Match(T__0);
					}
				}

				}
			}

			State = 252; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializerContext : ParserRuleContext {
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterElement_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitElement_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializerContext element_initializer() {
		Element_initializerContext _localctx = new Element_initializerContext(Context, State);
		EnterRule(_localctx, 28, RULE_element_initializer);
		try {
			State = 259;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__14:
			case T__34:
			case T__43:
			case T__44:
			case T__45:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__72:
			case INTEGER:
			case DECIMAL:
			case STRING:
			case TYPE_NAME:
			case MEMBER_NAME:
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254; non_assignment_expression();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255; Match(T__8);
				State = 256; expression();
				State = 257; Match(T__9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_initializerContext : ParserRuleContext {
		public Element_initializerContext[] element_initializer() {
			return GetRuleContexts<Element_initializerContext>();
		}
		public Element_initializerContext element_initializer(int i) {
			return GetRuleContext<Element_initializerContext>(i);
		}
		public Collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterCollection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitCollection_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Collection_initializerContext collection_initializer() {
		Collection_initializerContext _localctx = new Collection_initializerContext(Context, State);
		EnterRule(_localctx, 30, RULE_collection_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(T__8);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__8) | (1L << T__14) | (1L << T__34) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (T__66 - 67)) | (1L << (T__67 - 67)) | (1L << (T__68 - 67)) | (1L << (T__69 - 67)) | (1L << (T__70 - 67)) | (1L << (T__72 - 67)) | (1L << (INTEGER - 67)) | (1L << (DECIMAL - 67)) | (1L << (STRING - 67)) | (1L << (TYPE_NAME - 67)) | (1L << (MEMBER_NAME - 67)) | (1L << (VARIABLE_NAME - 67)))) != 0)) {
				{
				State = 262; element_initializer();
				State = 265;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 263; Match(T__0);
					State = 264; element_initializer();
					}
					break;
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 267; Match(T__0);
					}
				}

				}
			}

			State = 272; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_element_initializerContext : ParserRuleContext {
		public ITerminalNode MEMBER_NAME() { return GetToken(MCSharpParser.MEMBER_NAME, 0); }
		public Generic_argumentsContext generic_arguments() {
			return GetRuleContext<Generic_argumentsContext>(0);
		}
		public Member_accessContext member_access() {
			return GetRuleContext<Member_accessContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Anonymous_element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_element_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAnonymous_element_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAnonymous_element_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_element_initializerContext anonymous_element_initializer() {
		Anonymous_element_initializerContext _localctx = new Anonymous_element_initializerContext(Context, State);
		EnterRule(_localctx, 32, RULE_anonymous_element_initializer);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274; Match(MEMBER_NAME);
				State = 276;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 275; generic_arguments();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278; member_access();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 279; identifier();
				State = 280; Match(T__7);
				State = 281; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_initializerContext : ParserRuleContext {
		public Anonymous_element_initializerContext[] anonymous_element_initializer() {
			return GetRuleContexts<Anonymous_element_initializerContext>();
		}
		public Anonymous_element_initializerContext anonymous_element_initializer(int i) {
			return GetRuleContext<Anonymous_element_initializerContext>(i);
		}
		public Anonymous_object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAnonymous_object_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAnonymous_object_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_initializerContext anonymous_object_initializer() {
		Anonymous_object_initializerContext _localctx = new Anonymous_object_initializerContext(Context, State);
		EnterRule(_localctx, 34, RULE_anonymous_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(T__8);
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || _la==T__14 || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (TYPE_NAME - 79)) | (1L << (MEMBER_NAME - 79)) | (1L << (VARIABLE_NAME - 79)))) != 0)) {
				{
				State = 286; anonymous_element_initializer();
				State = 289;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 287; Match(T__0);
					State = 288; anonymous_element_initializer();
					}
					break;
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 291; Match(T__0);
					}
				}

				}
			}

			State = 296; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public ITerminalNode[] MODIFIER() { return GetTokens(MCSharpParser.MODIFIER); }
		public ITerminalNode MODIFIER(int i) {
			return GetToken(MCSharpParser.MODIFIER, i);
		}
		public Member_definitionContext[] member_definition() {
			return GetRuleContexts<Member_definitionContext>();
		}
		public Member_definitionContext member_definition(int i) {
			return GetRuleContext<Member_definitionContext>(i);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterType_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitType_definition(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODIFIER) {
				{
				{
				State = 298; Match(MODIFIER);
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 304; Match(TYPE_NAME);
			State = 305; Match(T__8);
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MEMBER_NAME || _la==MODIFIER) {
				{
				{
				State = 306; member_definition();
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 312; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_definitionContext : ParserRuleContext {
		public Field_definitionContext field_definition() {
			return GetRuleContext<Field_definitionContext>(0);
		}
		public Property_definitionContext property_definition() {
			return GetRuleContext<Property_definitionContext>(0);
		}
		public Method_definitionContext method_definition() {
			return GetRuleContext<Method_definitionContext>(0);
		}
		public Member_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMember_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMember_definition(this);
		}
	}

	[RuleVersion(0)]
	public Member_definitionContext member_definition() {
		Member_definitionContext _localctx = new Member_definitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_member_definition);
		try {
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314; field_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315; property_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 316; method_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_definitionContext : ParserRuleContext {
		public ITerminalNode MEMBER_NAME() { return GetToken(MCSharpParser.MEMBER_NAME, 0); }
		public Field_definition_endContext field_definition_end() {
			return GetRuleContext<Field_definition_endContext>(0);
		}
		public ITerminalNode[] MODIFIER() { return GetTokens(MCSharpParser.MODIFIER); }
		public ITerminalNode MODIFIER(int i) {
			return GetToken(MCSharpParser.MODIFIER, i);
		}
		public Field_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterField_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitField_definition(this);
		}
	}

	[RuleVersion(0)]
	public Field_definitionContext field_definition() {
		Field_definitionContext _localctx = new Field_definitionContext(Context, State);
		EnterRule(_localctx, 40, RULE_field_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODIFIER) {
				{
				{
				State = 319; Match(MODIFIER);
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 325; Match(MEMBER_NAME);
			State = 326; field_definition_end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_definition_endContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Field_definition_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_definition_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterField_definition_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitField_definition_end(this);
		}
	}

	[RuleVersion(0)]
	public Field_definition_endContext field_definition_end() {
		Field_definition_endContext _localctx = new Field_definition_endContext(Context, State);
		EnterRule(_localctx, 42, RULE_field_definition_end);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 328; Match(T__7);
				State = 329; expression();
				}
			}

			State = 332; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_definitionContext : ParserRuleContext {
		public ITerminalNode MEMBER_NAME() { return GetToken(MCSharpParser.MEMBER_NAME, 0); }
		public Property_definition_endContext property_definition_end() {
			return GetRuleContext<Property_definition_endContext>(0);
		}
		public ITerminalNode[] MODIFIER() { return GetTokens(MCSharpParser.MODIFIER); }
		public ITerminalNode MODIFIER(int i) {
			return GetToken(MCSharpParser.MODIFIER, i);
		}
		public Property_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterProperty_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitProperty_definition(this);
		}
	}

	[RuleVersion(0)]
	public Property_definitionContext property_definition() {
		Property_definitionContext _localctx = new Property_definitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_property_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODIFIER) {
				{
				{
				State = 334; Match(MODIFIER);
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 340; Match(MEMBER_NAME);
			State = 341; property_definition_end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_definition_endContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Property_get_definitionContext property_get_definition() {
			return GetRuleContext<Property_get_definitionContext>(0);
		}
		public Property_set_definitionContext property_set_definition() {
			return GetRuleContext<Property_set_definitionContext>(0);
		}
		public ITerminalNode[] MODIFIER() { return GetTokens(MCSharpParser.MODIFIER); }
		public ITerminalNode MODIFIER(int i) {
			return GetToken(MCSharpParser.MODIFIER, i);
		}
		public Property_definition_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_definition_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterProperty_definition_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitProperty_definition_end(this);
		}
	}

	[RuleVersion(0)]
	public Property_definition_endContext property_definition_end() {
		Property_definition_endContext _localctx = new Property_definition_endContext(Context, State);
		EnterRule(_localctx, 46, RULE_property_definition_end);
		int _la;
		try {
			State = 382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343; Match(T__11);
				State = 344; expression();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345; Match(T__8);
				{
				{
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MODIFIER) {
					{
					{
					State = 346; Match(MODIFIER);
					}
					}
					State = 351;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 352; property_get_definition();
				}
				State = 361;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 357;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==MODIFIER) {
						{
						{
						State = 354; Match(MODIFIER);
						}
						}
						State = 359;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 360; property_set_definition();
					}
					break;
				}
				}
				}
				break;
			case T__13:
			case MODIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				{
				{
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MODIFIER) {
					{
					{
					State = 363; Match(MODIFIER);
					}
					}
					State = 368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 369; property_set_definition();
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__12 || _la==MODIFIER) {
					{
					State = 374;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==MODIFIER) {
						{
						{
						State = 371; Match(MODIFIER);
						}
						}
						State = 376;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 377; property_get_definition();
					}
				}

				}
				State = 380; Match(T__9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_get_definitionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Property_get_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_get_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterProperty_get_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitProperty_get_definition(this);
		}
	}

	[RuleVersion(0)]
	public Property_get_definitionContext property_get_definition() {
		Property_get_definitionContext _localctx = new Property_get_definitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_property_get_definition);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384; Match(T__12);
				State = 385; Match(T__10);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 386; Match(T__12);
				State = 387; Match(T__11);
				State = 388; expression();
				State = 389; Match(T__10);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 391; Match(T__12);
				State = 392; code_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_set_definitionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Property_set_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_set_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterProperty_set_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitProperty_set_definition(this);
		}
	}

	[RuleVersion(0)]
	public Property_set_definitionContext property_set_definition() {
		Property_set_definitionContext _localctx = new Property_set_definitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_property_set_definition);
		try {
			State = 404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395; Match(T__13);
				State = 396; Match(T__10);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 397; Match(T__13);
				State = 398; Match(T__11);
				State = 399; expression();
				State = 400; Match(T__10);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402; Match(T__13);
				State = 403; code_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_definitionContext : ParserRuleContext {
		public ITerminalNode MEMBER_NAME() { return GetToken(MCSharpParser.MEMBER_NAME, 0); }
		public Method_parametersContext method_parameters() {
			return GetRuleContext<Method_parametersContext>(0);
		}
		public Method_definition_endContext method_definition_end() {
			return GetRuleContext<Method_definition_endContext>(0);
		}
		public ITerminalNode[] MODIFIER() { return GetTokens(MCSharpParser.MODIFIER); }
		public ITerminalNode MODIFIER(int i) {
			return GetToken(MCSharpParser.MODIFIER, i);
		}
		public Method_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMethod_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMethod_definition(this);
		}
	}

	[RuleVersion(0)]
	public Method_definitionContext method_definition() {
		Method_definitionContext _localctx = new Method_definitionContext(Context, State);
		EnterRule(_localctx, 52, RULE_method_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODIFIER) {
				{
				{
				State = 406; Match(MODIFIER);
				}
				}
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 412; Match(MEMBER_NAME);
			State = 413; method_parameters();
			State = 414; method_definition_end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_definition_endContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Method_definition_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_definition_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMethod_definition_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMethod_definition_end(this);
		}
	}

	[RuleVersion(0)]
	public Method_definition_endContext method_definition_end() {
		Method_definition_endContext _localctx = new Method_definition_endContext(Context, State);
		EnterRule(_localctx, 54, RULE_method_definition_end);
		try {
			State = 421;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416; Match(T__11);
				State = 417; expression();
				State = 418; Match(T__10);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 420; code_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(MCSharpParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(MCSharpParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(MCSharpParser.STRING, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 56, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INTEGER - 76)) | (1L << (DECIMAL - 76)) | (1L << (STRING - 76)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode[] TYPE_NAME() { return GetTokens(MCSharpParser.TYPE_NAME); }
		public ITerminalNode TYPE_NAME(int i) {
			return GetToken(MCSharpParser.TYPE_NAME, i);
		}
		public ITerminalNode[] MEMBER_NAME() { return GetTokens(MCSharpParser.MEMBER_NAME); }
		public ITerminalNode MEMBER_NAME(int i) {
			return GetToken(MCSharpParser.MEMBER_NAME, i);
		}
		public ITerminalNode[] VARIABLE_NAME() { return GetTokens(MCSharpParser.VARIABLE_NAME); }
		public ITerminalNode VARIABLE_NAME(int i) {
			return GetToken(MCSharpParser.VARIABLE_NAME, i);
		}
		public Generic_argumentsContext generic_arguments() {
			return GetRuleContext<Generic_argumentsContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_identifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 425; Match(T__14);
				}
			}

			State = 428;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (TYPE_NAME - 79)) | (1L << (MEMBER_NAME - 79)) | (1L << (VARIABLE_NAME - 79)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 435;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 433;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__15:
						{
						{
						State = 429; Match(T__15);
						}
						State = 430; Match(TYPE_NAME);
						}
						break;
					case MEMBER_NAME:
						{
						State = 431; Match(MEMBER_NAME);
						}
						break;
					case VARIABLE_NAME:
						{
						State = 432; Match(VARIABLE_NAME);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 437;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			State = 439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 438; generic_arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Language_functionContext language_function() {
			return GetRuleContext<Language_functionContext>(0);
		}
		public Initialization_expressionContext initialization_expression() {
			return GetRuleContext<Initialization_expressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_statement);
		try {
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 441; code_block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 442; language_function();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 443; initialization_expression();
				State = 444; Match(T__10);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 446; expression();
				State = 447; Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_blockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Code_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterCode_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitCode_block(this);
		}
	}

	[RuleVersion(0)]
	public Code_blockContext code_block() {
		Code_blockContext _localctx = new Code_blockContext(Context, State);
		EnterRule(_localctx, 62, RULE_code_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(T__8);
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__8) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__34) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (T__66 - 67)) | (1L << (T__67 - 67)) | (1L << (T__68 - 67)) | (1L << (T__69 - 67)) | (1L << (T__70 - 67)) | (1L << (T__72 - 67)) | (1L << (INTEGER - 67)) | (1L << (DECIMAL - 67)) | (1L << (STRING - 67)) | (1L << (TYPE_NAME - 67)) | (1L << (MEMBER_NAME - 67)) | (1L << (VARIABLE_NAME - 67)))) != 0)) {
				{
				{
				State = 452; statement();
				}
				}
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 458; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Language_functionContext : ParserRuleContext {
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Foreach_statementContext foreach_statement() {
			return GetRuleContext<Foreach_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Do_statementContext do_statement() {
			return GetRuleContext<Do_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public Language_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_language_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterLanguage_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitLanguage_function(this);
		}
	}

	[RuleVersion(0)]
	public Language_functionContext language_function() {
		Language_functionContext _localctx = new Language_functionContext(Context, State);
		EnterRule(_localctx, 64, RULE_language_function);
		try {
			State = 468;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460; if_statement();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 461; for_statement();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 3);
				{
				State = 462; foreach_statement();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 4);
				{
				State = 463; while_statement();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 5);
				{
				State = 464; do_statement();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 6);
				{
				State = 465; return_statement();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 7);
				{
				State = 466; throw_statement();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 8);
				{
				State = 467; try_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470; Match(T__16);
			State = 471; Match(T__3);
			State = 472; expression();
			State = 473; Match(T__4);
			State = 474; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 68, RULE_for_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476; Match(T__17);
			State = 477; Match(T__3);
			State = 478; expression();
			State = 479; Match(T__10);
			State = 480; expression();
			State = 481; Match(T__10);
			State = 482; expression();
			State = 483; Match(T__4);
			State = 484; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreach_statementContext : ParserRuleContext {
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public ITerminalNode VARIABLE_NAME() { return GetToken(MCSharpParser.VARIABLE_NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Foreach_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterForeach_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitForeach_statement(this);
		}
	}

	[RuleVersion(0)]
	public Foreach_statementContext foreach_statement() {
		Foreach_statementContext _localctx = new Foreach_statementContext(Context, State);
		EnterRule(_localctx, 70, RULE_foreach_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(T__18);
			State = 487; Match(T__3);
			State = 488; Match(TYPE_NAME);
			State = 489; Match(VARIABLE_NAME);
			State = 490; Match(T__19);
			State = 491; expression();
			State = 492; Match(T__4);
			State = 493; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 72, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(T__20);
			State = 496; Match(T__3);
			State = 497; expression();
			State = 498; Match(T__4);
			State = 499; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_statementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterDo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitDo_statement(this);
		}
	}

	[RuleVersion(0)]
	public Do_statementContext do_statement() {
		Do_statementContext _localctx = new Do_statementContext(Context, State);
		EnterRule(_localctx, 74, RULE_do_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(T__21);
			State = 502; statement();
			State = 503; Match(T__20);
			State = 504; Match(T__3);
			State = 505; expression();
			State = 506; Match(T__4);
			State = 507; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 76, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509; Match(T__22);
			State = 510; expression();
			State = 511; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(Context, State);
		EnterRule(_localctx, 78, RULE_throw_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(T__23);
			State = 514; expression();
			State = 515; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] TYPE_NAME() { return GetTokens(MCSharpParser.TYPE_NAME); }
		public ITerminalNode TYPE_NAME(int i) {
			return GetToken(MCSharpParser.TYPE_NAME, i);
		}
		public ITerminalNode[] VARIABLE_NAME() { return GetTokens(MCSharpParser.VARIABLE_NAME); }
		public ITerminalNode VARIABLE_NAME(int i) {
			return GetToken(MCSharpParser.VARIABLE_NAME, i);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 80, RULE_try_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 517; Match(T__24);
			State = 518; statement();
			State = 527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 519; Match(T__25);
					State = 520; Match(T__3);
					State = 521; Match(TYPE_NAME);
					State = 522; Match(VARIABLE_NAME);
					State = 523; Match(T__4);
					State = 524; statement();
					}
					} 
				}
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			State = 532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 530; Match(T__26);
				State = 531; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_expression);
		try {
			State = 536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 534; non_assignment_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535; assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initialization_expressionContext : ParserRuleContext {
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public ITerminalNode VARIABLE_NAME() { return GetToken(MCSharpParser.VARIABLE_NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Initialization_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialization_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterInitialization_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitInitialization_expression(this);
		}
	}

	[RuleVersion(0)]
	public Initialization_expressionContext initialization_expression() {
		Initialization_expressionContext _localctx = new Initialization_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_initialization_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; Match(TYPE_NAME);
			State = 539; Match(VARIABLE_NAME);
			{
			State = 540; Match(T__7);
			State = 541; expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_non_assignment_expression);
		try {
			State = 545;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543; conditional_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544; lambda_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		public Method_argumentsContext method_arguments() {
			return GetRuleContext<Method_argumentsContext>(0);
		}
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; method_arguments();
			State = 548; Match(T__11);
			{
			State = 549; code_block();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 90, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; expression();
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 552; Match(T__0);
				State = 553; expression();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_conditional_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559; null_coalescing_expression();
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				{
				State = 560; Match(T__27);
				}
				State = 561; expression();
				{
				State = 562; Match(T__28);
				}
				State = 563; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_null_coalescing_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; conditional_or_expression();
			State = 570;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				{
				State = 568; Match(T__29);
				}
				State = 569; null_coalescing_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		public Conditional_and_expressionContext[] conditional_and_expression() {
			return GetRuleContexts<Conditional_and_expressionContext>();
		}
		public Conditional_and_expressionContext conditional_and_expression(int i) {
			return GetRuleContext<Conditional_and_expressionContext>(i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_conditional_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 572; conditional_and_expression();
			State = 577;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 573; Match(T__30);
					}
					State = 574; conditional_and_expression();
					}
					} 
				}
				State = 579;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext[] inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_conditional_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 580; inclusive_or_expression();
			State = 585;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 581; Match(T__31);
					}
					State = 582; inclusive_or_expression();
					}
					} 
				}
				State = 587;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Exclusive_or_expressionContext[] exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_inclusive_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 588; exclusive_or_expression();
			State = 593;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 589; Match(T__32);
					}
					State = 590; exclusive_or_expression();
					}
					} 
				}
				State = 595;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_exclusive_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; and_expression();
			State = 601;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 597; Match(T__33);
					}
					State = 598; and_expression();
					}
					} 
				}
				State = 603;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 604; equality_expression();
			State = 609;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 605; Match(T__34);
					}
					State = 606; equality_expression();
					}
					} 
				}
				State = 611;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 612; relational_expression();
			State = 617;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 613;
					_la = TokenStream.LA(1);
					if ( !(_la==T__35 || _la==T__36) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 614; relational_expression();
					}
					} 
				}
				State = 619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public Relation_or_type_checkContext[] relation_or_type_check() {
			return GetRuleContexts<Relation_or_type_checkContext>();
		}
		public Relation_or_type_checkContext relation_or_type_check(int i) {
			return GetRuleContext<Relation_or_type_checkContext>(i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_relational_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 620; shift_expression();
			State = 624;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 621; relation_or_type_check();
					}
					} 
				}
				State = 626;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_or_type_checkContext : ParserRuleContext {
		public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public Relation_or_type_checkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_or_type_check; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterRelation_or_type_check(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitRelation_or_type_check(this);
		}
	}

	[RuleVersion(0)]
	public Relation_or_type_checkContext relation_or_type_check() {
		Relation_or_type_checkContext _localctx = new Relation_or_type_checkContext(Context, State);
		EnterRule(_localctx, 110, RULE_relation_or_type_check);
		int _la;
		try {
			State = 631;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__2:
			case T__37:
			case T__38:
				EnterOuterAlt(_localctx, 1);
				{
				State = 627;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__37) | (1L << T__38))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 628; shift_expression();
				}
				break;
			case T__39:
			case T__40:
				EnterOuterAlt(_localctx, 2);
				{
				State = 629;
				_la = TokenStream.LA(1);
				if ( !(_la==T__39 || _la==T__40) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 630; Match(TYPE_NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_shift_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 633; additive_expression();
			State = 638;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 634;
					_la = TokenStream.LA(1);
					if ( !(_la==T__41 || _la==T__42) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 635; additive_expression();
					}
					} 
				}
				State = 640;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 641; multiplicative_expression();
			State = 646;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 642;
					_la = TokenStream.LA(1);
					if ( !(_la==T__43 || _la==T__44) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 643; multiplicative_expression();
					}
					} 
				}
				State = 648;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public With_expressionContext[] with_expression() {
			return GetRuleContexts<With_expressionContext>();
		}
		public With_expressionContext with_expression(int i) {
			return GetRuleContext<With_expressionContext>(i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_multiplicative_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 649; with_expression();
			State = 654;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 650;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 651; with_expression();
					}
					} 
				}
				State = 656;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		public Range_expressionContext range_expression() {
			return GetRuleContext<Range_expressionContext>(0);
		}
		public Anonymous_element_initializerContext anonymous_element_initializer() {
			return GetRuleContext<Anonymous_element_initializerContext>(0);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_with_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; range_expression();
			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__48) {
				{
				{
				State = 658; Match(T__48);
				}
				State = 659; anonymous_element_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_expressionContext : ParserRuleContext {
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Range_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterRange_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitRange_expression(this);
		}
	}

	[RuleVersion(0)]
	public Range_expressionContext range_expression() {
		Range_expressionContext _localctx = new Range_expressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_range_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662; unary_expression();
			State = 665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__49 || _la==T__50) {
				{
				State = 663;
				_la = TokenStream.LA(1);
				if ( !(_la==T__49 || _la==T__50) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 664; unary_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Pointer_indirection_expressionContext pointer_indirection_expression() {
			return GetRuleContext<Pointer_indirection_expressionContext>(0);
		}
		public Addressof_expressionContext addressof_expression() {
			return GetRuleContext<Addressof_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_unary_expression);
		int _la;
		try {
			State = 675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 667; primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 668;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__43) | (1L << T__44) | (1L << T__51) | (1L << T__52))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 669; unary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 670;
				_la = TokenStream.LA(1);
				if ( !(_la==T__53 || _la==T__54) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 671; unary_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 672; cast_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 673; pointer_indirection_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 674; addressof_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_cast_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677; Match(T__3);
			State = 678; Match(TYPE_NAME);
			State = 679; Match(T__4);
			State = 680; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_indirection_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pointer_indirection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_indirection_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterPointer_indirection_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitPointer_indirection_expression(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_indirection_expressionContext pointer_indirection_expression() {
		Pointer_indirection_expressionContext _localctx = new Pointer_indirection_expressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_pointer_indirection_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682; Match(T__45);
			State = 683; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Addressof_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Addressof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressof_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAddressof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAddressof_expression(this);
		}
	}

	[RuleVersion(0)]
	public Addressof_expressionContext addressof_expression() {
		Addressof_expressionContext _localctx = new Addressof_expressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_addressof_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685; Match(T__34);
			State = 686; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_assignment_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688; unary_expression();
			State = 689;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (T__7 - 8)) | (1L << (T__55 - 8)) | (1L << (T__56 - 8)) | (1L << (T__57 - 8)) | (1L << (T__58 - 8)) | (1L << (T__59 - 8)) | (1L << (T__60 - 8)) | (1L << (T__61 - 8)) | (1L << (T__62 - 8)) | (1L << (T__63 - 8)) | (1L << (T__64 - 8)) | (1L << (T__65 - 8)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 690; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Array_creation_expressionContext array_creation_expression() {
			return GetRuleContext<Array_creation_expressionContext>(0);
		}
		public Primary_no_array_creation_expressionContext primary_no_array_creation_expression() {
			return GetRuleContext<Primary_no_array_creation_expressionContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_primary_expression);
		try {
			State = 694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 692; array_creation_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 693; primary_no_array_creation_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_creation_expressionContext : ParserRuleContext {
		public Indexer_argumentsContext indexer_arguments() {
			return GetRuleContext<Indexer_argumentsContext>(0);
		}
		public Array_rank_specifierContext array_rank_specifier() {
			return GetRuleContext<Array_rank_specifierContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Array_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterArray_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitArray_creation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Array_creation_expressionContext array_creation_expression() {
		Array_creation_expressionContext _localctx = new Array_creation_expressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_array_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696; Match(T__66);
			State = 697; indexer_arguments();
			State = 699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 698; array_rank_specifier();
				}
			}

			State = 702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 701; array_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_rank_specifierContext : ParserRuleContext {
		public Array_rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_rank_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterArray_rank_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitArray_rank_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Array_rank_specifierContext array_rank_specifier() {
		Array_rank_specifierContext _localctx = new Array_rank_specifierContext(Context, State);
		EnterRule(_localctx, 136, RULE_array_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704; Match(T__5);
			State = 708;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 705; Match(T__0);
				}
				}
				State = 710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 711; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		public Variable_initializerContext[] variable_initializer() {
			return GetRuleContexts<Variable_initializerContext>();
		}
		public Variable_initializerContext variable_initializer(int i) {
			return GetRuleContext<Variable_initializerContext>(i);
		}
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterArray_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitArray_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(Context, State);
		EnterRule(_localctx, 138, RULE_array_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 713; Match(T__8);
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__8) | (1L << T__14) | (1L << T__34) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (T__66 - 67)) | (1L << (T__67 - 67)) | (1L << (T__68 - 67)) | (1L << (T__69 - 67)) | (1L << (T__70 - 67)) | (1L << (T__72 - 67)) | (1L << (INTEGER - 67)) | (1L << (DECIMAL - 67)) | (1L << (STRING - 67)) | (1L << (TYPE_NAME - 67)) | (1L << (MEMBER_NAME - 67)) | (1L << (VARIABLE_NAME - 67)))) != 0)) {
				{
				State = 714; variable_initializer();
				State = 719;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 715; Match(T__0);
						State = 716; variable_initializer();
						}
						} 
					}
					State = 721;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
				}
				State = 723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 722; Match(T__0);
					}
				}

				}
			}

			State = 727; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 140, RULE_variable_initializer);
		try {
			State = 731;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__14:
			case T__34:
			case T__43:
			case T__44:
			case T__45:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__72:
			case INTEGER:
			case DECIMAL:
			case STRING:
			case TYPE_NAME:
			case MEMBER_NAME:
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 729; expression();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 730; array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_no_array_creation_expressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_accessContext member_access() {
			return GetRuleContext<Member_accessContext>(0);
		}
		public Invocation_expressionContext invocation_expression() {
			return GetRuleContext<Invocation_expressionContext>(0);
		}
		public Indexer_expressionContext indexer_expression() {
			return GetRuleContext<Indexer_expressionContext>(0);
		}
		public Post_step_expressionContext post_step_expression() {
			return GetRuleContext<Post_step_expressionContext>(0);
		}
		public Keyword_expressionContext keyword_expression() {
			return GetRuleContext<Keyword_expressionContext>(0);
		}
		public Primary_no_array_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_no_array_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterPrimary_no_array_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitPrimary_no_array_creation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_no_array_creation_expressionContext primary_no_array_creation_expression() {
		Primary_no_array_creation_expressionContext _localctx = new Primary_no_array_creation_expressionContext(Context, State);
		EnterRule(_localctx, 142, RULE_primary_no_array_creation_expression);
		try {
			State = 744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 733; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 734; identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 735; Match(T__3);
				State = 736; expression();
				State = 737; Match(T__4);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 739; member_access();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 740; invocation_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 741; indexer_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 742; post_step_expression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 743; keyword_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public Generic_argumentsContext generic_arguments() {
			return GetRuleContext<Generic_argumentsContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 144, RULE_member_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				{
				State = 746; Match(T__3);
				State = 747; primary_expression();
				State = 748; Match(T__4);
				}
				break;
			case TYPE_NAME:
				{
				State = 750; Match(TYPE_NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 753; Match(T__15);
			State = 754; identifier();
			State = 756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 755; generic_arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invocation_expressionContext : ParserRuleContext {
		public Member_accessContext member_access() {
			return GetRuleContext<Member_accessContext>(0);
		}
		public Method_argumentsContext method_arguments() {
			return GetRuleContext<Method_argumentsContext>(0);
		}
		public Invocation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterInvocation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitInvocation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Invocation_expressionContext invocation_expression() {
		Invocation_expressionContext _localctx = new Invocation_expressionContext(Context, State);
		EnterRule(_localctx, 146, RULE_invocation_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; member_access();
			State = 759; method_arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_expressionContext : ParserRuleContext {
		public Member_accessContext member_access() {
			return GetRuleContext<Member_accessContext>(0);
		}
		public Indexer_argumentsContext indexer_arguments() {
			return GetRuleContext<Indexer_argumentsContext>(0);
		}
		public Indexer_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterIndexer_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitIndexer_expression(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_expressionContext indexer_expression() {
		Indexer_expressionContext _localctx = new Indexer_expressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_indexer_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761; member_access();
			State = 762; indexer_arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Post_step_expressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Post_step_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_post_step_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterPost_step_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitPost_step_expression(this);
		}
	}

	[RuleVersion(0)]
	public Post_step_expressionContext post_step_expression() {
		Post_step_expressionContext _localctx = new Post_step_expressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_post_step_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case DECIMAL:
			case STRING:
				{
				State = 764; literal();
				}
				break;
			case T__14:
			case TYPE_NAME:
			case MEMBER_NAME:
			case VARIABLE_NAME:
				{
				State = 765; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 768;
			_la = TokenStream.LA(1);
			if ( !(_la==T__53 || _la==T__54) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_expressionContext : ParserRuleContext {
		public New_keyword_expressionContext new_keyword_expression() {
			return GetRuleContext<New_keyword_expressionContext>(0);
		}
		public Typeof_keyword_expressionContext typeof_keyword_expression() {
			return GetRuleContext<Typeof_keyword_expressionContext>(0);
		}
		public Checked_expressionContext checked_expression() {
			return GetRuleContext<Checked_expressionContext>(0);
		}
		public Unchecked_expressionContext unchecked_expression() {
			return GetRuleContext<Unchecked_expressionContext>(0);
		}
		public Default_keyword_expressionContext default_keyword_expression() {
			return GetRuleContext<Default_keyword_expressionContext>(0);
		}
		public Sizeof_keyword_expressionContext sizeof_keyword_expression() {
			return GetRuleContext<Sizeof_keyword_expressionContext>(0);
		}
		public Keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterKeyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitKeyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_expressionContext keyword_expression() {
		Keyword_expressionContext _localctx = new Keyword_expressionContext(Context, State);
		EnterRule(_localctx, 152, RULE_keyword_expression);
		try {
			State = 776;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 770; new_keyword_expression();
				}
				break;
			case T__67:
				EnterOuterAlt(_localctx, 2);
				{
				State = 771; typeof_keyword_expression();
				}
				break;
			case T__68:
				EnterOuterAlt(_localctx, 3);
				{
				State = 772; checked_expression();
				}
				break;
			case T__69:
				EnterOuterAlt(_localctx, 4);
				{
				State = 773; unchecked_expression();
				}
				break;
			case T__70:
				EnterOuterAlt(_localctx, 5);
				{
				State = 774; default_keyword_expression();
				}
				break;
			case T__72:
				EnterOuterAlt(_localctx, 6);
				{
				State = 775; sizeof_keyword_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_or_collection_initializerContext : ParserRuleContext {
		public Object_initializerContext object_initializer() {
			return GetRuleContext<Object_initializerContext>(0);
		}
		public Collection_initializerContext collection_initializer() {
			return GetRuleContext<Collection_initializerContext>(0);
		}
		public Object_or_collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_or_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterObject_or_collection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitObject_or_collection_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Object_or_collection_initializerContext object_or_collection_initializer() {
		Object_or_collection_initializerContext _localctx = new Object_or_collection_initializerContext(Context, State);
		EnterRule(_localctx, 154, RULE_object_or_collection_initializer);
		try {
			State = 780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 778; object_initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 779; collection_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_keyword_expressionContext : ParserRuleContext {
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public Method_argumentsContext method_arguments() {
			return GetRuleContext<Method_argumentsContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		public New_keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterNew_keyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitNew_keyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public New_keyword_expressionContext new_keyword_expression() {
		New_keyword_expressionContext _localctx = new New_keyword_expressionContext(Context, State);
		EnterRule(_localctx, 156, RULE_new_keyword_expression);
		int _la;
		try {
			State = 799;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 782; Match(T__66);
				State = 783; Match(TYPE_NAME);
				State = 789;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__3:
					{
					{
					State = 784; method_arguments();
					State = 786;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__8) {
						{
						State = 785; object_or_collection_initializer();
						}
					}

					}
					}
					break;
				case T__8:
					{
					{
					State = 788; object_or_collection_initializer();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 791; Match(T__66);
				State = 792; Match(TYPE_NAME);
				{
				State = 793; Match(T__3);
				State = 794; expression();
				State = 795; Match(T__4);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 797; Match(T__66);
				State = 798; anonymous_object_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typeof_keyword_expressionContext : ParserRuleContext {
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public Typeof_keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeof_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterTypeof_keyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitTypeof_keyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public Typeof_keyword_expressionContext typeof_keyword_expression() {
		Typeof_keyword_expressionContext _localctx = new Typeof_keyword_expressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_typeof_keyword_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801; Match(T__67);
			State = 802; Match(T__3);
			{
			State = 803; Match(TYPE_NAME);
			}
			State = 804; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checked_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Checked_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checked_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterChecked_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitChecked_expression(this);
		}
	}

	[RuleVersion(0)]
	public Checked_expressionContext checked_expression() {
		Checked_expressionContext _localctx = new Checked_expressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_checked_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806; Match(T__68);
			State = 807; Match(T__3);
			State = 808; expression();
			State = 809; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unchecked_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unchecked_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unchecked_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterUnchecked_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitUnchecked_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unchecked_expressionContext unchecked_expression() {
		Unchecked_expressionContext _localctx = new Unchecked_expressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_unchecked_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811; Match(T__69);
			State = 812; Match(T__3);
			State = 813; expression();
			State = 814; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_keyword_expressionContext : ParserRuleContext {
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public Default_keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterDefault_keyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitDefault_keyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public Default_keyword_expressionContext default_keyword_expression() {
		Default_keyword_expressionContext _localctx = new Default_keyword_expressionContext(Context, State);
		EnterRule(_localctx, 164, RULE_default_keyword_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; Match(T__70);
			State = 820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 817; Match(T__3);
				State = 818; Match(TYPE_NAME);
				State = 819; Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_keyword_expressionContext : ParserRuleContext {
		public Method_parametersContext method_parameters() {
			return GetRuleContext<Method_parametersContext>(0);
		}
		public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Delegate_keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterDelegate_keyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitDelegate_keyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_keyword_expressionContext delegate_keyword_expression() {
		Delegate_keyword_expressionContext _localctx = new Delegate_keyword_expressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_delegate_keyword_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822; Match(T__71);
			State = 823; method_parameters();
			State = 824; code_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sizeof_keyword_expressionContext : ParserRuleContext {
		public ITerminalNode TYPE_NAME() { return GetToken(MCSharpParser.TYPE_NAME, 0); }
		public Sizeof_keyword_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof_keyword_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.EnterSizeof_keyword_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMCSharpListener typedListener = listener as IMCSharpListener;
			if (typedListener != null) typedListener.ExitSizeof_keyword_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sizeof_keyword_expressionContext sizeof_keyword_expression() {
		Sizeof_keyword_expressionContext _localctx = new Sizeof_keyword_expressionContext(Context, State);
		EnterRule(_localctx, 168, RULE_sizeof_keyword_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826; Match(T__72);
			State = 827; Match(T__3);
			State = 828; Match(TYPE_NAME);
			State = 829; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'W', '\x342', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\xB2', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\xB5', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x5', '\x5', '\xBC', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', '\xC4', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'\xC7', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xD5', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xDA', '\n', '\n', '\f', 
		'\n', '\xE', '\n', '\xDD', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\xED', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xF2', '\n', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xF8', '\n', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xFB', '\n', '\xF', '\x5', '\xF', '\xFD', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x106', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x10C', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x10F', 
		'\n', '\x11', '\x5', '\x11', '\x111', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x117', '\n', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x11E', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x124', '\n', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x127', '\n', '\x13', '\x5', '\x13', '\x129', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\a', '\x14', '\x12E', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\x131', '\v', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x136', '\n', '\x14', '\f', 
		'\x14', '\xE', '\x14', '\x139', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x140', '\n', 
		'\x15', '\x3', '\x16', '\a', '\x16', '\x143', '\n', '\x16', '\f', '\x16', 
		'\xE', '\x16', '\x146', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x14D', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\a', '\x18', '\x152', '\n', 
		'\x18', '\f', '\x18', '\xE', '\x18', '\x155', '\v', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\a', '\x19', '\x15E', '\n', '\x19', '\f', '\x19', '\xE', 
		'\x19', '\x161', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\a', '\x19', '\x166', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x169', 
		'\v', '\x19', '\x3', '\x19', '\x5', '\x19', '\x16C', '\n', '\x19', '\x3', 
		'\x19', '\a', '\x19', '\x16F', '\n', '\x19', '\f', '\x19', '\xE', '\x19', 
		'\x172', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', 
		'\x19', '\x177', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x17A', '\v', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x17D', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x181', '\n', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x18C', '\n', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x197', '\n', '\x1B', '\x3', '\x1C', '\a', '\x1C', '\x19A', '\n', '\x1C', 
		'\f', '\x1C', '\xE', '\x1C', '\x19D', '\v', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x1A8', '\n', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x5', '\x1F', '\x1AD', '\n', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\a', '\x1F', '\x1B4', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', 
		'\x1B7', '\v', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1BA', '\n', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1C4', '\n', ' ', '\x3', '!', '\x3', 
		'!', '\a', '!', '\x1C8', '\n', '!', '\f', '!', '\xE', '!', '\x1CB', '\v', 
		'!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x1D7', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\a', '*', '\x210', '\n', '*', '\f', 
		'*', '\xE', '*', '\x213', '\v', '*', '\x3', '*', '\x3', '*', '\x5', '*', 
		'\x217', '\n', '*', '\x3', '+', '\x3', '+', '\x5', '+', '\x21B', '\n', 
		'+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		'-', '\x3', '-', '\x5', '-', '\x224', '\n', '-', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', 
		'\x22D', '\n', '/', '\f', '/', '\xE', '/', '\x230', '\v', '/', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x238', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x5', '\x31', '\x23D', '\n', '\x31', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\a', '\x32', '\x242', '\n', '\x32', '\f', '\x32', 
		'\xE', '\x32', '\x245', '\v', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\a', '\x33', '\x24A', '\n', '\x33', '\f', '\x33', '\xE', '\x33', 
		'\x24D', '\v', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\a', 
		'\x34', '\x252', '\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x255', '\v', 
		'\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x25A', 
		'\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x25D', '\v', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x262', '\n', '\x36', 
		'\f', '\x36', '\xE', '\x36', '\x265', '\v', '\x36', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\a', '\x37', '\x26A', '\n', '\x37', '\f', '\x37', 
		'\xE', '\x37', '\x26D', '\v', '\x37', '\x3', '\x38', '\x3', '\x38', '\a', 
		'\x38', '\x271', '\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x274', '\v', 
		'\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', 
		'\x39', '\x27A', '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\a', 
		':', '\x27F', '\n', ':', '\f', ':', '\xE', ':', '\x282', '\v', ':', '\x3', 
		';', '\x3', ';', '\x3', ';', '\a', ';', '\x287', '\n', ';', '\f', ';', 
		'\xE', ';', '\x28A', '\v', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\a', 
		'<', '\x28F', '\n', '<', '\f', '<', '\xE', '<', '\x292', '\v', '<', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x5', '=', '\x297', '\n', '=', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x5', '>', '\x29C', '\n', '>', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x5', '?', '\x2A6', '\n', '?', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x2B9', 
		'\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', 
		'\x2BE', '\n', '\x45', '\x3', '\x45', '\x5', '\x45', '\x2C1', '\n', '\x45', 
		'\x3', '\x46', '\x3', '\x46', '\a', '\x46', '\x2C5', '\n', '\x46', '\f', 
		'\x46', '\xE', '\x46', '\x2C8', '\v', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\a', 'G', '\x2D0', '\n', 
		'G', '\f', 'G', '\xE', 'G', '\x2D3', '\v', 'G', '\x3', 'G', '\x5', 'G', 
		'\x2D6', '\n', 'G', '\x5', 'G', '\x2D8', '\n', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x2DE', '\n', 'H', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x2EB', '\n', 
		'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 
		'J', '\x2F2', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', 
		'\x2F7', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x301', '\n', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', 
		'\x3', 'N', '\x3', 'N', '\x5', 'N', '\x30B', '\n', 'N', '\x3', 'O', '\x3', 
		'O', '\x5', 'O', '\x30F', '\n', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', 
		'\x3', 'P', '\x5', 'P', '\x315', '\n', 'P', '\x3', 'P', '\x5', 'P', '\x318', 
		'\n', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', 
		'\x3', 'P', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\x322', '\n', 'P', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 
		'S', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x5', 'T', '\x337', '\n', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x2', '\x2', 'W', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\x2', '\xE', '\x3', '\x2', 'N', 'P', '\x3', '\x2', 'Q', 
		'S', '\x3', '\x2', '&', '\'', '\x4', '\x2', '\x4', '\x5', '(', ')', '\x3', 
		'\x2', '*', '+', '\x3', '\x2', ',', '-', '\x3', '\x2', '.', '/', '\x3', 
		'\x2', '\x30', '\x32', '\x3', '\x2', '\x34', '\x35', '\x4', '\x2', '.', 
		'/', '\x36', '\x37', '\x3', '\x2', '\x38', '\x39', '\x4', '\x2', '\n', 
		'\n', ':', '\x44', '\x2', '\x35B', '\x2', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x6', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\xBB', '\x3', '\x2', '\x2', '\x2', '\n', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x10', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xD6', '\x3', '\x2', '\x2', '\x2', '\x14', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xE2', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xE6', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xF3', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x105', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x11D', '\x3', '\x2', '\x2', '\x2', '$', '\x11F', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x12F', '\x3', '\x2', '\x2', '\x2', '(', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x144', '\x3', '\x2', '\x2', '\x2', 
		',', '\x14C', '\x3', '\x2', '\x2', '\x2', '.', '\x153', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x180', '\x3', '\x2', '\x2', '\x2', '\x32', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1A7', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x1A9', '\x3', '\x2', '\x2', '\x2', '<', '\x1AC', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1D6', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1DE', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x1E8', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x1F1', '\x3', '\x2', '\x2', '\x2', 'L', '\x1F7', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x1FF', '\x3', '\x2', '\x2', '\x2', 'P', '\x203', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x207', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x21A', '\x3', '\x2', '\x2', '\x2', 'V', '\x21C', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x223', '\x3', '\x2', '\x2', '\x2', 'Z', '\x225', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x231', '\x3', '\x2', '\x2', '\x2', '`', '\x239', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x64', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x24E', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x256', '\x3', '\x2', '\x2', '\x2', 'j', '\x25E', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x266', '\x3', '\x2', '\x2', '\x2', 'n', '\x26E', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x27B', '\x3', '\x2', '\x2', '\x2', 't', '\x283', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x28B', '\x3', '\x2', '\x2', '\x2', 'x', '\x293', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x298', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x2A5', '\x3', '\x2', '\x2', '\x2', '~', '\x2A7', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x82', '\x2AF', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x2B2', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x88', '\x2BA', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x2CB', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x2DD', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x92', '\x2F1', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x96', '\x2FB', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x300', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x30E', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x321', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x323', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\x328', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\x32D', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x332', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\x338', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x33C', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', 'Q', '\x2', '\x2', '\xAD', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB3', '\x5', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\a', '\x3', '\x2', '\x2', '\xB0', '\xB2', '\x5', 
		'\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '\x4', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\x4', '\x3', 
		'\x2', '\xB8', '\xB9', '\a', '\x5', '\x2', '\x2', '\xB9', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBC', '\a', 'W', '\x2', '\x2', '\xBB', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\a', 
		'Q', '\x2', '\x2', '\xBE', '\xBF', '\a', 'S', '\x2', '\x2', '\xBF', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xC5', '\x5', '\b', '\x5', '\x2', 
		'\xC1', '\xC2', '\a', '\x3', '\x2', '\x2', '\xC2', '\xC4', '\x5', '\b', 
		'\x5', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\a', '\x6', '\x2', '\x2', '\xC9', '\xCA', '\x5', '\n', '\x6', '\x2', 
		'\xCA', '\xCB', '\a', '\a', '\x2', '\x2', '\xCB', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCD', '\a', '\b', '\x2', '\x2', '\xCD', '\xCE', 
		'\x5', '\n', '\x6', '\x2', '\xCE', '\xCF', '\a', '\t', '\x2', '\x2', '\xCF', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD5', '\x5', 'T', '+', '\x2', 
		'\xD1', '\xD2', '\a', 'W', '\x2', '\x2', '\xD2', '\xD3', '\a', 'Q', '\x2', 
		'\x2', '\xD3', '\xD5', '\a', 'S', '\x2', '\x2', '\xD4', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xDB', '\x5', '\x10', '\t', 
		'\x2', '\xD7', '\xD8', '\a', '\x3', '\x2', '\x2', '\xD8', '\xDA', '\x5', 
		'\x10', '\t', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\a', '\x4', '\x2', '\x2', '\xDF', '\xE0', '\x5', '\x4', '\x3', 
		'\x2', '\xE0', '\xE1', '\a', '\x5', '\x2', '\x2', '\xE1', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', '\x6', '\x2', '\x2', '\xE3', 
		'\xE4', '\x5', '\x12', '\n', '\x2', '\xE4', '\xE5', '\a', '\a', '\x2', 
		'\x2', '\xE5', '\x17', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', 
		'\b', '\x2', '\x2', '\xE7', '\xE8', '\x5', '\x12', '\n', '\x2', '\xE8', 
		'\xE9', '\a', '\t', '\x2', '\x2', '\xE9', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xEC', '\a', 'R', '\x2', '\x2', '\xEB', '\xED', '\x5', 
		'\x14', '\v', '\x2', '\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xF1', '\a', '\n', '\x2', '\x2', '\xEF', '\xF2', '\x5', 
		'T', '+', '\x2', '\xF0', '\xF2', '\x5', '\x9C', 'O', '\x2', '\xF1', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xFC', '\a', '\v', 
		'\x2', '\x2', '\xF4', '\xF7', '\x5', '\x1A', '\xE', '\x2', '\xF5', '\xF6', 
		'\a', '\x3', '\x2', '\x2', '\xF6', '\xF8', '\x5', '\x1A', '\xE', '\x2', 
		'\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFB', 
		'\a', '\x3', '\x2', '\x2', '\xFA', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\xFF', '\a', '\f', '\x2', '\x2', '\xFF', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x100', '\x106', '\x5', 'X', '-', '\x2', '\x101', '\x102', 
		'\a', '\v', '\x2', '\x2', '\x102', '\x103', '\x5', 'T', '+', '\x2', '\x103', 
		'\x104', '\a', '\f', '\x2', '\x2', '\x104', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x100', '\x3', '\x2', '\x2', '\x2', '\x105', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x110', '\a', '\v', '\x2', '\x2', '\x108', '\x10B', '\x5', '\x1E', 
		'\x10', '\x2', '\x109', '\x10A', '\a', '\x3', '\x2', '\x2', '\x10A', '\x10C', 
		'\x5', '\x1E', '\x10', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10F', '\a', '\x3', '\x2', '\x2', '\x10E', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x111', '\x3', '\x2', '\x2', '\x2', '\x110', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\a', 
		'\f', '\x2', '\x2', '\x113', '!', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x116', '\a', 'R', '\x2', '\x2', '\x115', '\x117', '\x5', '\x14', '\v', 
		'\x2', '\x116', '\x115', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x11E', '\x5', '\x92', 'J', '\x2', '\x119', '\x11A', '\x5', 
		'<', '\x1F', '\x2', '\x11A', '\x11B', '\a', '\n', '\x2', '\x2', '\x11B', 
		'\x11C', '\x5', 'T', '+', '\x2', '\x11C', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x114', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '#', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x128', '\a', '\v', 
		'\x2', '\x2', '\x120', '\x123', '\x5', '\"', '\x12', '\x2', '\x121', '\x122', 
		'\a', '\x3', '\x2', '\x2', '\x122', '\x124', '\x5', '\"', '\x12', '\x2', 
		'\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x126', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x127', '\a', '\x3', '\x2', '\x2', '\x126', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x129', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12B', '\a', '\f', '\x2', '\x2', '\x12B', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12E', '\a', 'V', '\x2', '\x2', 
		'\x12D', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x130', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', 
		'\a', 'Q', '\x2', '\x2', '\x133', '\x137', '\a', '\v', '\x2', '\x2', '\x134', 
		'\x136', '\x5', '(', '\x15', '\x2', '\x135', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x139', '\x3', '\x2', '\x2', '\x2', '\x137', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x139', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\f', '\x2', '\x2', '\x13B', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x140', '\x5', '*', '\x16', 
		'\x2', '\x13D', '\x140', '\x5', '.', '\x18', '\x2', '\x13E', '\x140', 
		'\x5', '\x36', '\x1C', '\x2', '\x13F', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x140', ')', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x143', '\a', 'V', '\x2', '\x2', '\x142', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x146', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x147', '\x3', '\x2', '\x2', '\x2', '\x146', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x148', '\a', 'R', '\x2', '\x2', '\x148', 
		'\x149', '\x5', ',', '\x17', '\x2', '\x149', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14B', '\a', '\n', '\x2', '\x2', '\x14B', '\x14D', '\x5', 
		'T', '+', '\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14F', '\a', '\r', '\x2', '\x2', '\x14F', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x150', '\x152', '\a', 'V', '\x2', '\x2', '\x151', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x153', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', '\a', 
		'R', '\x2', '\x2', '\x157', '\x158', '\x5', '\x30', '\x19', '\x2', '\x158', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\a', '\xE', '\x2', 
		'\x2', '\x15A', '\x181', '\x5', 'T', '+', '\x2', '\x15B', '\x15F', '\a', 
		'\v', '\x2', '\x2', '\x15C', '\x15E', '\a', 'V', '\x2', '\x2', '\x15D', 
		'\x15C', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x5', 
		'\x32', '\x1A', '\x2', '\x163', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x166', '\a', 'V', '\x2', '\x2', '\x165', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x169', '\x3', '\x2', '\x2', '\x2', '\x167', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x169', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x16C', '\x5', '\x34', '\x1B', '\x2', '\x16B', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x181', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16F', 
		'\a', 'V', '\x2', '\x2', '\x16E', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x172', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x171', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x172', '\x170', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x174', '\x5', '\x34', '\x1B', '\x2', '\x174', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x177', '\a', 'V', '\x2', '\x2', 
		'\x176', '\x175', '\x3', '\x2', '\x2', '\x2', '\x177', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x176', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17B', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17D', 
		'\x5', '\x32', '\x1A', '\x2', '\x17C', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x17F', '\a', '\f', '\x2', '\x2', '\x17F', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\x180', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x180', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x183', '\a', '\xF', '\x2', '\x2', '\x183', '\x18C', '\a', '\r', 
		'\x2', '\x2', '\x184', '\x185', '\a', '\xF', '\x2', '\x2', '\x185', '\x186', 
		'\a', '\xE', '\x2', '\x2', '\x186', '\x187', '\x5', 'T', '+', '\x2', '\x187', 
		'\x188', '\a', '\r', '\x2', '\x2', '\x188', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x189', '\x18A', '\a', '\xF', '\x2', '\x2', '\x18A', '\x18C', 
		'\x5', '@', '!', '\x2', '\x18B', '\x182', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '\x184', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x33', '\x3', '\x2', '\x2', '\x2', '\x18D', 
		'\x18E', '\a', '\x10', '\x2', '\x2', '\x18E', '\x197', '\a', '\r', '\x2', 
		'\x2', '\x18F', '\x190', '\a', '\x10', '\x2', '\x2', '\x190', '\x191', 
		'\a', '\xE', '\x2', '\x2', '\x191', '\x192', '\x5', 'T', '+', '\x2', '\x192', 
		'\x193', '\a', '\r', '\x2', '\x2', '\x193', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x194', '\x195', '\a', '\x10', '\x2', '\x2', '\x195', '\x197', 
		'\x5', '@', '!', '\x2', '\x196', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x196', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x196', '\x194', '\x3', 
		'\x2', '\x2', '\x2', '\x197', '\x35', '\x3', '\x2', '\x2', '\x2', '\x198', 
		'\x19A', '\a', 'V', '\x2', '\x2', '\x199', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x19A', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19B', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x19F', '\a', 'R', '\x2', '\x2', '\x19F', 
		'\x1A0', '\x5', '\f', '\a', '\x2', '\x1A0', '\x1A1', '\x5', '\x38', '\x1D', 
		'\x2', '\x1A1', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\a', '\xE', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', 'T', '+', '\x2', '\x1A4', 
		'\x1A5', '\a', '\r', '\x2', '\x2', '\x1A5', '\x1A8', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '\x1A8', '\x5', '@', '!', '\x2', '\x1A7', '\x1A2', '\x3', 
		'\x2', '\x2', '\x2', '\x1A7', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\t', '\x2', '\x2', 
		'\x2', '\x1AA', ';', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AD', '\a', 
		'\x11', '\x2', '\x2', '\x1AC', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x1B5', '\t', '\x3', '\x2', '\x2', '\x1AF', '\x1B0', 
		'\a', '\x12', '\x2', '\x2', '\x1B0', '\x1B4', '\a', 'Q', '\x2', '\x2', 
		'\x1B1', '\x1B4', '\a', 'R', '\x2', '\x2', '\x1B2', '\x1B4', '\a', 'S', 
		'\x2', '\x2', '\x1B3', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B2', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B3', '\x3', 
		'\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B6', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\x1BA', '\x5', '\x14', '\v', '\x2', '\x1B9', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA', '=', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1C4', '\x5', '@', 
		'!', '\x2', '\x1BC', '\x1C4', '\x5', '\x42', '\"', '\x2', '\x1BD', '\x1BE', 
		'\x5', 'V', ',', '\x2', '\x1BE', '\x1BF', '\a', '\r', '\x2', '\x2', '\x1BF', 
		'\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\x5', 'T', '+', 
		'\x2', '\x1C1', '\x1C2', '\a', '\r', '\x2', '\x2', '\x1C2', '\x1C4', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1BD', '\x3', '\x2', '\x2', 
		'\x2', '\x1C3', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C4', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x1C5', '\x1C9', '\a', '\v', '\x2', '\x2', '\x1C6', 
		'\x1C8', '\x5', '>', ' ', '\x2', '\x1C7', '\x1C6', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1CA', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C9', '\x3', 
		'\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\a', '\f', '\x2', '\x2', '\x1CD', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1D7', '\x5', '\x44', '#', 
		'\x2', '\x1CF', '\x1D7', '\x5', '\x46', '$', '\x2', '\x1D0', '\x1D7', 
		'\x5', 'H', '%', '\x2', '\x1D1', '\x1D7', '\x5', 'J', '&', '\x2', '\x1D2', 
		'\x1D7', '\x5', 'L', '\'', '\x2', '\x1D3', '\x1D7', '\x5', 'N', '(', '\x2', 
		'\x1D4', '\x1D7', '\x5', 'P', ')', '\x2', '\x1D5', '\x1D7', '\x5', 'R', 
		'*', '\x2', '\x1D6', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D0', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D2', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D5', '\x3', '\x2', '\x2', 
		'\x2', '\x1D7', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', 
		'\a', '\x13', '\x2', '\x2', '\x1D9', '\x1DA', '\a', '\x6', '\x2', '\x2', 
		'\x1DA', '\x1DB', '\x5', 'T', '+', '\x2', '\x1DB', '\x1DC', '\a', '\a', 
		'\x2', '\x2', '\x1DC', '\x1DD', '\x5', '>', ' ', '\x2', '\x1DD', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\a', '\x14', '\x2', '\x2', 
		'\x1DF', '\x1E0', '\a', '\x6', '\x2', '\x2', '\x1E0', '\x1E1', '\x5', 
		'T', '+', '\x2', '\x1E1', '\x1E2', '\a', '\r', '\x2', '\x2', '\x1E2', 
		'\x1E3', '\x5', 'T', '+', '\x2', '\x1E3', '\x1E4', '\a', '\r', '\x2', 
		'\x2', '\x1E4', '\x1E5', '\x5', 'T', '+', '\x2', '\x1E5', '\x1E6', '\a', 
		'\a', '\x2', '\x2', '\x1E6', '\x1E7', '\x5', '>', ' ', '\x2', '\x1E7', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\a', '\x15', '\x2', 
		'\x2', '\x1E9', '\x1EA', '\a', '\x6', '\x2', '\x2', '\x1EA', '\x1EB', 
		'\a', 'Q', '\x2', '\x2', '\x1EB', '\x1EC', '\a', 'S', '\x2', '\x2', '\x1EC', 
		'\x1ED', '\a', '\x16', '\x2', '\x2', '\x1ED', '\x1EE', '\x5', 'T', '+', 
		'\x2', '\x1EE', '\x1EF', '\a', '\a', '\x2', '\x2', '\x1EF', '\x1F0', '\x5', 
		'>', ' ', '\x2', '\x1F0', 'I', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', 
		'\a', '\x17', '\x2', '\x2', '\x1F2', '\x1F3', '\a', '\x6', '\x2', '\x2', 
		'\x1F3', '\x1F4', '\x5', 'T', '+', '\x2', '\x1F4', '\x1F5', '\a', '\a', 
		'\x2', '\x2', '\x1F5', '\x1F6', '\x5', '>', ' ', '\x2', '\x1F6', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\a', '\x18', '\x2', '\x2', 
		'\x1F8', '\x1F9', '\x5', '>', ' ', '\x2', '\x1F9', '\x1FA', '\a', '\x17', 
		'\x2', '\x2', '\x1FA', '\x1FB', '\a', '\x6', '\x2', '\x2', '\x1FB', '\x1FC', 
		'\x5', 'T', '+', '\x2', '\x1FC', '\x1FD', '\a', '\a', '\x2', '\x2', '\x1FD', 
		'\x1FE', '\a', '\r', '\x2', '\x2', '\x1FE', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x1FF', '\x200', '\a', '\x19', '\x2', '\x2', '\x200', '\x201', 
		'\x5', 'T', '+', '\x2', '\x201', '\x202', '\a', '\r', '\x2', '\x2', '\x202', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\a', '\x1A', '\x2', 
		'\x2', '\x204', '\x205', '\x5', 'T', '+', '\x2', '\x205', '\x206', '\a', 
		'\r', '\x2', '\x2', '\x206', 'Q', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x208', '\a', '\x1B', '\x2', '\x2', '\x208', '\x211', '\x5', '>', ' ', 
		'\x2', '\x209', '\x20A', '\a', '\x1C', '\x2', '\x2', '\x20A', '\x20B', 
		'\a', '\x6', '\x2', '\x2', '\x20B', '\x20C', '\a', 'Q', '\x2', '\x2', 
		'\x20C', '\x20D', '\a', 'S', '\x2', '\x2', '\x20D', '\x20E', '\a', '\a', 
		'\x2', '\x2', '\x20E', '\x210', '\x5', '>', ' ', '\x2', '\x20F', '\x209', 
		'\x3', '\x2', '\x2', '\x2', '\x210', '\x213', '\x3', '\x2', '\x2', '\x2', 
		'\x211', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x211', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x216', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'\x211', '\x3', '\x2', '\x2', '\x2', '\x214', '\x215', '\a', '\x1D', '\x2', 
		'\x2', '\x215', '\x217', '\x5', '>', ' ', '\x2', '\x216', '\x214', '\x3', 
		'\x2', '\x2', '\x2', '\x216', '\x217', '\x3', '\x2', '\x2', '\x2', '\x217', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x218', '\x21B', '\x5', 'X', '-', '\x2', 
		'\x219', '\x21B', '\x5', '\x84', '\x43', '\x2', '\x21A', '\x218', '\x3', 
		'\x2', '\x2', '\x2', '\x21A', '\x219', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21D', '\a', 'Q', '\x2', '\x2', 
		'\x21D', '\x21E', '\a', 'S', '\x2', '\x2', '\x21E', '\x21F', '\a', '\n', 
		'\x2', '\x2', '\x21F', '\x220', '\x5', 'T', '+', '\x2', '\x220', 'W', 
		'\x3', '\x2', '\x2', '\x2', '\x221', '\x224', '\x5', '^', '\x30', '\x2', 
		'\x222', '\x224', '\x5', 'Z', '.', '\x2', '\x223', '\x221', '\x3', '\x2', 
		'\x2', '\x2', '\x223', '\x222', '\x3', '\x2', '\x2', '\x2', '\x224', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '\x225', '\x226', '\x5', '\x16', '\f', '\x2', 
		'\x226', '\x227', '\a', '\xE', '\x2', '\x2', '\x227', '\x228', '\x5', 
		'@', '!', '\x2', '\x228', '[', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22E', 
		'\x5', 'T', '+', '\x2', '\x22A', '\x22B', '\a', '\x3', '\x2', '\x2', '\x22B', 
		'\x22D', '\x5', 'T', '+', '\x2', '\x22C', '\x22A', '\x3', '\x2', '\x2', 
		'\x2', '\x22D', '\x230', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22C', 
		'\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', '\x3', '\x2', '\x2', '\x2', 
		'\x22F', ']', '\x3', '\x2', '\x2', '\x2', '\x230', '\x22E', '\x3', '\x2', 
		'\x2', '\x2', '\x231', '\x237', '\x5', '`', '\x31', '\x2', '\x232', '\x233', 
		'\a', '\x1E', '\x2', '\x2', '\x233', '\x234', '\x5', 'T', '+', '\x2', 
		'\x234', '\x235', '\a', '\x1F', '\x2', '\x2', '\x235', '\x236', '\x5', 
		'T', '+', '\x2', '\x236', '\x238', '\x3', '\x2', '\x2', '\x2', '\x237', 
		'\x232', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '_', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23C', '\x5', 
		'\x62', '\x32', '\x2', '\x23A', '\x23B', '\a', ' ', '\x2', '\x2', '\x23B', 
		'\x23D', '\x5', '`', '\x31', '\x2', '\x23C', '\x23A', '\x3', '\x2', '\x2', 
		'\x2', '\x23C', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\x243', '\x5', '\x64', '\x33', '\x2', 
		'\x23F', '\x240', '\a', '!', '\x2', '\x2', '\x240', '\x242', '\x5', '\x64', 
		'\x33', '\x2', '\x241', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x245', '\x3', '\x2', '\x2', '\x2', '\x243', '\x241', '\x3', '\x2', '\x2', 
		'\x2', '\x243', '\x244', '\x3', '\x2', '\x2', '\x2', '\x244', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x245', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x246', '\x24B', '\x5', '\x66', '\x34', '\x2', '\x247', '\x248', '\a', 
		'\"', '\x2', '\x2', '\x248', '\x24A', '\x5', '\x66', '\x34', '\x2', '\x249', 
		'\x247', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24D', '\x3', '\x2', '\x2', 
		'\x2', '\x24B', '\x249', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', '\x24C', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x24D', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x253', '\x5', 
		'h', '\x35', '\x2', '\x24F', '\x250', '\a', '#', '\x2', '\x2', '\x250', 
		'\x252', '\x5', 'h', '\x35', '\x2', '\x251', '\x24F', '\x3', '\x2', '\x2', 
		'\x2', '\x252', '\x255', '\x3', '\x2', '\x2', '\x2', '\x253', '\x251', 
		'\x3', '\x2', '\x2', '\x2', '\x253', '\x254', '\x3', '\x2', '\x2', '\x2', 
		'\x254', 'g', '\x3', '\x2', '\x2', '\x2', '\x255', '\x253', '\x3', '\x2', 
		'\x2', '\x2', '\x256', '\x25B', '\x5', 'j', '\x36', '\x2', '\x257', '\x258', 
		'\a', '$', '\x2', '\x2', '\x258', '\x25A', '\x5', 'j', '\x36', '\x2', 
		'\x259', '\x257', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25D', '\x3', 
		'\x2', '\x2', '\x2', '\x25B', '\x259', '\x3', '\x2', '\x2', '\x2', '\x25B', 
		'\x25C', '\x3', '\x2', '\x2', '\x2', '\x25C', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x25D', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x263', 
		'\x5', 'l', '\x37', '\x2', '\x25F', '\x260', '\a', '%', '\x2', '\x2', 
		'\x260', '\x262', '\x5', 'l', '\x37', '\x2', '\x261', '\x25F', '\x3', 
		'\x2', '\x2', '\x2', '\x262', '\x265', '\x3', '\x2', '\x2', '\x2', '\x263', 
		'\x261', '\x3', '\x2', '\x2', '\x2', '\x263', '\x264', '\x3', '\x2', '\x2', 
		'\x2', '\x264', 'k', '\x3', '\x2', '\x2', '\x2', '\x265', '\x263', '\x3', 
		'\x2', '\x2', '\x2', '\x266', '\x26B', '\x5', 'n', '\x38', '\x2', '\x267', 
		'\x268', '\t', '\x4', '\x2', '\x2', '\x268', '\x26A', '\x5', 'n', '\x38', 
		'\x2', '\x269', '\x267', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', '\x26B', '\x269', '\x3', '\x2', '\x2', '\x2', 
		'\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26C', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x26D', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x272', 
		'\x5', 'r', ':', '\x2', '\x26F', '\x271', '\x5', 'p', '\x39', '\x2', '\x270', 
		'\x26F', '\x3', '\x2', '\x2', '\x2', '\x271', '\x274', '\x3', '\x2', '\x2', 
		'\x2', '\x272', '\x270', '\x3', '\x2', '\x2', '\x2', '\x272', '\x273', 
		'\x3', '\x2', '\x2', '\x2', '\x273', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x274', '\x272', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', '\t', 
		'\x5', '\x2', '\x2', '\x276', '\x27A', '\x5', 'r', ':', '\x2', '\x277', 
		'\x278', '\t', '\x6', '\x2', '\x2', '\x278', '\x27A', '\a', 'Q', '\x2', 
		'\x2', '\x279', '\x275', '\x3', '\x2', '\x2', '\x2', '\x279', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x27B', '\x280', '\x5', 't', ';', '\x2', '\x27C', '\x27D', '\t', '\a', 
		'\x2', '\x2', '\x27D', '\x27F', '\x5', 't', ';', '\x2', '\x27E', '\x27C', 
		'\x3', '\x2', '\x2', '\x2', '\x27F', '\x282', '\x3', '\x2', '\x2', '\x2', 
		'\x280', '\x27E', '\x3', '\x2', '\x2', '\x2', '\x280', '\x281', '\x3', 
		'\x2', '\x2', '\x2', '\x281', 's', '\x3', '\x2', '\x2', '\x2', '\x282', 
		'\x280', '\x3', '\x2', '\x2', '\x2', '\x283', '\x288', '\x5', 'v', '<', 
		'\x2', '\x284', '\x285', '\t', '\b', '\x2', '\x2', '\x285', '\x287', '\x5', 
		'v', '<', '\x2', '\x286', '\x284', '\x3', '\x2', '\x2', '\x2', '\x287', 
		'\x28A', '\x3', '\x2', '\x2', '\x2', '\x288', '\x286', '\x3', '\x2', '\x2', 
		'\x2', '\x288', '\x289', '\x3', '\x2', '\x2', '\x2', '\x289', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x28A', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28B', 
		'\x290', '\x5', 'x', '=', '\x2', '\x28C', '\x28D', '\t', '\t', '\x2', 
		'\x2', '\x28D', '\x28F', '\x5', 'x', '=', '\x2', '\x28E', '\x28C', '\x3', 
		'\x2', '\x2', '\x2', '\x28F', '\x292', '\x3', '\x2', '\x2', '\x2', '\x290', 
		'\x28E', '\x3', '\x2', '\x2', '\x2', '\x290', '\x291', '\x3', '\x2', '\x2', 
		'\x2', '\x291', 'w', '\x3', '\x2', '\x2', '\x2', '\x292', '\x290', '\x3', 
		'\x2', '\x2', '\x2', '\x293', '\x296', '\x5', 'z', '>', '\x2', '\x294', 
		'\x295', '\a', '\x33', '\x2', '\x2', '\x295', '\x297', '\x5', '\"', '\x12', 
		'\x2', '\x296', '\x294', '\x3', '\x2', '\x2', '\x2', '\x296', '\x297', 
		'\x3', '\x2', '\x2', '\x2', '\x297', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x298', '\x29B', '\x5', '|', '?', '\x2', '\x299', '\x29A', '\t', '\n', 
		'\x2', '\x2', '\x29A', '\x29C', '\x5', '|', '?', '\x2', '\x29B', '\x299', 
		'\x3', '\x2', '\x2', '\x2', '\x29B', '\x29C', '\x3', '\x2', '\x2', '\x2', 
		'\x29C', '{', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x2A6', '\x5', '\x86', 
		'\x44', '\x2', '\x29E', '\x29F', '\t', '\v', '\x2', '\x2', '\x29F', '\x2A6', 
		'\x5', '|', '?', '\x2', '\x2A0', '\x2A1', '\t', '\f', '\x2', '\x2', '\x2A1', 
		'\x2A6', '\x5', '|', '?', '\x2', '\x2A2', '\x2A6', '\x5', '~', '@', '\x2', 
		'\x2A3', '\x2A6', '\x5', '\x80', '\x41', '\x2', '\x2A4', '\x2A6', '\x5', 
		'\x82', '\x42', '\x2', '\x2A5', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x2A5', 
		'\x29E', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A0', '\x3', '\x2', '\x2', 
		'\x2', '\x2A5', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A3', 
		'\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A4', '\x3', '\x2', '\x2', '\x2', 
		'\x2A6', '}', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A8', '\a', '\x6', 
		'\x2', '\x2', '\x2A8', '\x2A9', '\a', 'Q', '\x2', '\x2', '\x2A9', '\x2AA', 
		'\a', '\a', '\x2', '\x2', '\x2AA', '\x2AB', '\x5', '|', '?', '\x2', '\x2AB', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\a', '\x30', '\x2', 
		'\x2', '\x2AD', '\x2AE', '\x5', '|', '?', '\x2', '\x2AE', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x2AF', '\x2B0', '\a', '%', '\x2', '\x2', '\x2B0', 
		'\x2B1', '\x5', '|', '?', '\x2', '\x2B1', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x2B2', '\x2B3', '\x5', '|', '?', '\x2', '\x2B3', '\x2B4', '\t', 
		'\r', '\x2', '\x2', '\x2B4', '\x2B5', '\x5', 'T', '+', '\x2', '\x2B5', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B9', '\x5', '\x88', '\x45', 
		'\x2', '\x2B7', '\x2B9', '\x5', '\x90', 'I', '\x2', '\x2B8', '\x2B6', 
		'\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2B7', '\x3', '\x2', '\x2', '\x2', 
		'\x2B9', '\x87', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BB', '\a', '\x45', 
		'\x2', '\x2', '\x2BB', '\x2BD', '\x5', '\x18', '\r', '\x2', '\x2BC', '\x2BE', 
		'\x5', '\x8A', '\x46', '\x2', '\x2BD', '\x2BC', '\x3', '\x2', '\x2', '\x2', 
		'\x2BD', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2C0', '\x3', 
		'\x2', '\x2', '\x2', '\x2BF', '\x2C1', '\x5', '\x8C', 'G', '\x2', '\x2C0', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', '\x2', '\x2', 
		'\x2', '\x2C1', '\x89', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C6', 
		'\a', '\b', '\x2', '\x2', '\x2C3', '\x2C5', '\a', '\x3', '\x2', '\x2', 
		'\x2C4', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C8', '\x3', 
		'\x2', '\x2', '\x2', '\x2C6', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C9', '\x3', '\x2', '\x2', 
		'\x2', '\x2C8', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CA', 
		'\a', '\t', '\x2', '\x2', '\x2CA', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x2CB', '\x2D7', '\a', '\v', '\x2', '\x2', '\x2CC', '\x2D1', '\x5', '\x8E', 
		'H', '\x2', '\x2CD', '\x2CE', '\a', '\x3', '\x2', '\x2', '\x2CE', '\x2D0', 
		'\x5', '\x8E', 'H', '\x2', '\x2CF', '\x2CD', '\x3', '\x2', '\x2', '\x2', 
		'\x2D0', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2CF', '\x3', 
		'\x2', '\x2', '\x2', '\x2D1', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D2', 
		'\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D1', '\x3', '\x2', '\x2', 
		'\x2', '\x2D4', '\x2D6', '\a', '\x3', '\x2', '\x2', '\x2D5', '\x2D4', 
		'\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D6', '\x3', '\x2', '\x2', '\x2', 
		'\x2D6', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2CC', '\x3', 
		'\x2', '\x2', '\x2', '\x2D7', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2D8', 
		'\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DA', '\a', '\f', '\x2', 
		'\x2', '\x2DA', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DE', 
		'\x5', 'T', '+', '\x2', '\x2DC', '\x2DE', '\x5', '\x8C', 'G', '\x2', '\x2DD', 
		'\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DC', '\x3', '\x2', '\x2', 
		'\x2', '\x2DE', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2EB', 
		'\x5', ':', '\x1E', '\x2', '\x2E0', '\x2EB', '\x5', '<', '\x1F', '\x2', 
		'\x2E1', '\x2E2', '\a', '\x6', '\x2', '\x2', '\x2E2', '\x2E3', '\x5', 
		'T', '+', '\x2', '\x2E3', '\x2E4', '\a', '\a', '\x2', '\x2', '\x2E4', 
		'\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2EB', '\x5', '\x92', 
		'J', '\x2', '\x2E6', '\x2EB', '\x5', '\x94', 'K', '\x2', '\x2E7', '\x2EB', 
		'\x5', '\x96', 'L', '\x2', '\x2E8', '\x2EB', '\x5', '\x98', 'M', '\x2', 
		'\x2E9', '\x2EB', '\x5', '\x9A', 'N', '\x2', '\x2EA', '\x2DF', '\x3', 
		'\x2', '\x2', '\x2', '\x2EA', '\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2EA', 
		'\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2E5', '\x3', '\x2', '\x2', 
		'\x2', '\x2EA', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2E7', 
		'\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2E8', '\x3', '\x2', '\x2', '\x2', 
		'\x2EA', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x2EC', '\x2ED', '\a', '\x6', '\x2', '\x2', '\x2ED', 
		'\x2EE', '\x5', '\x86', '\x44', '\x2', '\x2EE', '\x2EF', '\a', '\a', '\x2', 
		'\x2', '\x2EF', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2F2', 
		'\a', 'Q', '\x2', '\x2', '\x2F1', '\x2EC', '\x3', '\x2', '\x2', '\x2', 
		'\x2F1', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F3', '\x3', 
		'\x2', '\x2', '\x2', '\x2F3', '\x2F4', '\a', '\x12', '\x2', '\x2', '\x2F4', 
		'\x2F6', '\x5', '<', '\x1F', '\x2', '\x2F5', '\x2F7', '\x5', '\x14', '\v', 
		'\x2', '\x2F6', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F7', 
		'\x3', '\x2', '\x2', '\x2', '\x2F7', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x2F8', '\x2F9', '\x5', '\x92', 'J', '\x2', '\x2F9', '\x2FA', '\x5', 
		'\x16', '\f', '\x2', '\x2FA', '\x95', '\x3', '\x2', '\x2', '\x2', '\x2FB', 
		'\x2FC', '\x5', '\x92', 'J', '\x2', '\x2FC', '\x2FD', '\x5', '\x18', '\r', 
		'\x2', '\x2FD', '\x97', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x301', 
		'\x5', ':', '\x1E', '\x2', '\x2FF', '\x301', '\x5', '<', '\x1F', '\x2', 
		'\x300', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x300', '\x2FF', '\x3', 
		'\x2', '\x2', '\x2', '\x301', '\x302', '\x3', '\x2', '\x2', '\x2', '\x302', 
		'\x303', '\t', '\f', '\x2', '\x2', '\x303', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x304', '\x30B', '\x5', '\x9E', 'P', '\x2', '\x305', '\x30B', 
		'\x5', '\xA0', 'Q', '\x2', '\x306', '\x30B', '\x5', '\xA2', 'R', '\x2', 
		'\x307', '\x30B', '\x5', '\xA4', 'S', '\x2', '\x308', '\x30B', '\x5', 
		'\xA6', 'T', '\x2', '\x309', '\x30B', '\x5', '\xAA', 'V', '\x2', '\x30A', 
		'\x304', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x305', '\x3', '\x2', '\x2', 
		'\x2', '\x30A', '\x306', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x307', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x308', '\x3', '\x2', '\x2', '\x2', 
		'\x30A', '\x309', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x30C', '\x30F', '\x5', '\x1C', '\xF', '\x2', '\x30D', 
		'\x30F', '\x5', ' ', '\x11', '\x2', '\x30E', '\x30C', '\x3', '\x2', '\x2', 
		'\x2', '\x30E', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x30F', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x310', '\x311', '\a', '\x45', '\x2', '\x2', 
		'\x311', '\x317', '\a', 'Q', '\x2', '\x2', '\x312', '\x314', '\x5', '\x16', 
		'\f', '\x2', '\x313', '\x315', '\x5', '\x9C', 'O', '\x2', '\x314', '\x313', 
		'\x3', '\x2', '\x2', '\x2', '\x314', '\x315', '\x3', '\x2', '\x2', '\x2', 
		'\x315', '\x318', '\x3', '\x2', '\x2', '\x2', '\x316', '\x318', '\x5', 
		'\x9C', 'O', '\x2', '\x317', '\x312', '\x3', '\x2', '\x2', '\x2', '\x317', 
		'\x316', '\x3', '\x2', '\x2', '\x2', '\x318', '\x322', '\x3', '\x2', '\x2', 
		'\x2', '\x319', '\x31A', '\a', '\x45', '\x2', '\x2', '\x31A', '\x31B', 
		'\a', 'Q', '\x2', '\x2', '\x31B', '\x31C', '\a', '\x6', '\x2', '\x2', 
		'\x31C', '\x31D', '\x5', 'T', '+', '\x2', '\x31D', '\x31E', '\a', '\a', 
		'\x2', '\x2', '\x31E', '\x322', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x320', 
		'\a', '\x45', '\x2', '\x2', '\x320', '\x322', '\x5', '$', '\x13', '\x2', 
		'\x321', '\x310', '\x3', '\x2', '\x2', '\x2', '\x321', '\x319', '\x3', 
		'\x2', '\x2', '\x2', '\x321', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x322', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x323', '\x324', '\a', '\x46', '\x2', 
		'\x2', '\x324', '\x325', '\a', '\x6', '\x2', '\x2', '\x325', '\x326', 
		'\a', 'Q', '\x2', '\x2', '\x326', '\x327', '\a', '\a', '\x2', '\x2', '\x327', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\x328', '\x329', '\a', 'G', '\x2', 
		'\x2', '\x329', '\x32A', '\a', '\x6', '\x2', '\x2', '\x32A', '\x32B', 
		'\x5', 'T', '+', '\x2', '\x32B', '\x32C', '\a', '\a', '\x2', '\x2', '\x32C', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x32D', '\x32E', '\a', 'H', '\x2', 
		'\x2', '\x32E', '\x32F', '\a', '\x6', '\x2', '\x2', '\x32F', '\x330', 
		'\x5', 'T', '+', '\x2', '\x330', '\x331', '\a', '\a', '\x2', '\x2', '\x331', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\x332', '\x336', '\a', 'I', '\x2', 
		'\x2', '\x333', '\x334', '\a', '\x6', '\x2', '\x2', '\x334', '\x335', 
		'\a', 'Q', '\x2', '\x2', '\x335', '\x337', '\a', '\a', '\x2', '\x2', '\x336', 
		'\x333', '\x3', '\x2', '\x2', '\x2', '\x336', '\x337', '\x3', '\x2', '\x2', 
		'\x2', '\x337', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x338', '\x339', 
		'\a', 'J', '\x2', '\x2', '\x339', '\x33A', '\x5', '\f', '\a', '\x2', '\x33A', 
		'\x33B', '\x5', '@', '!', '\x2', '\x33B', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x33C', '\x33D', '\a', 'K', '\x2', '\x2', '\x33D', '\x33E', '\a', 
		'\x6', '\x2', '\x2', '\x33E', '\x33F', '\a', 'Q', '\x2', '\x2', '\x33F', 
		'\x340', '\a', '\a', '\x2', '\x2', '\x340', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', 'T', '\xB3', '\xBB', '\xC5', '\xD4', '\xDB', '\xEC', '\xF1', '\xF7', 
		'\xFA', '\xFC', '\x105', '\x10B', '\x10E', '\x110', '\x116', '\x11D', 
		'\x123', '\x126', '\x128', '\x12F', '\x137', '\x13F', '\x144', '\x14C', 
		'\x153', '\x15F', '\x167', '\x16B', '\x170', '\x178', '\x17C', '\x180', 
		'\x18B', '\x196', '\x19B', '\x1A7', '\x1AC', '\x1B3', '\x1B5', '\x1B9', 
		'\x1C3', '\x1C9', '\x1D6', '\x211', '\x216', '\x21A', '\x223', '\x22E', 
		'\x237', '\x23C', '\x243', '\x24B', '\x253', '\x25B', '\x263', '\x26B', 
		'\x272', '\x279', '\x280', '\x288', '\x290', '\x296', '\x29B', '\x2A5', 
		'\x2B8', '\x2BD', '\x2C0', '\x2C6', '\x2D1', '\x2D5', '\x2D7', '\x2DD', 
		'\x2EA', '\x2F1', '\x2F6', '\x300', '\x30A', '\x30E', '\x314', '\x317', 
		'\x321', '\x336',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
