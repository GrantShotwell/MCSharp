<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MCSharp</name>
    </assembly>
    <members>
        <member name="T:MCSharpBaseListener">
            <summary>
            This class provides an empty implementation of <see cref="T:IMCSharpListener"/>,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
        </member>
        <member name="M:MCSharpBaseListener.EnterScript(MCSharpParser.ScriptContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.script"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitScript(MCSharpParser.ScriptContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.script"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterGeneric_parameter(MCSharpParser.Generic_parameterContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.generic_parameter"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitGeneric_parameter(MCSharpParser.Generic_parameterContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.generic_parameter"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterGeneric_parameter_list(MCSharpParser.Generic_parameter_listContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.generic_parameter_list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitGeneric_parameter_list(MCSharpParser.Generic_parameter_listContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.generic_parameter_list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterGeneric_parameters(MCSharpParser.Generic_parametersContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.generic_parameters"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitGeneric_parameters(MCSharpParser.Generic_parametersContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.generic_parameters"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterMethod_parameter(MCSharpParser.Method_parameterContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.method_parameter"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitMethod_parameter(MCSharpParser.Method_parameterContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.method_parameter"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterMethod_parameter_list(MCSharpParser.Method_parameter_listContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.method_parameter_list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitMethod_parameter_list(MCSharpParser.Method_parameter_listContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.method_parameter_list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterMethod_parameters(MCSharpParser.Method_parametersContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.method_parameters"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitMethod_parameters(MCSharpParser.Method_parametersContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.method_parameters"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterIndexer_parameters(MCSharpParser.Indexer_parametersContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.indexer_parameters"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitIndexer_parameters(MCSharpParser.Indexer_parametersContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.indexer_parameters"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterArgument(MCSharpParser.ArgumentContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.argument"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitArgument(MCSharpParser.ArgumentContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.argument"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterArgument_list(MCSharpParser.Argument_listContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.argument_list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitArgument_list(MCSharpParser.Argument_listContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.argument_list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterGeneric_arguments(MCSharpParser.Generic_argumentsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.generic_arguments"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitGeneric_arguments(MCSharpParser.Generic_argumentsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.generic_arguments"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterMethod_arguments(MCSharpParser.Method_argumentsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.method_arguments"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitMethod_arguments(MCSharpParser.Method_argumentsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.method_arguments"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterIndexer_arguments(MCSharpParser.Indexer_argumentsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.indexer_arguments"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitIndexer_arguments(MCSharpParser.Indexer_argumentsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.indexer_arguments"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterMember_initializer(MCSharpParser.Member_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.member_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitMember_initializer(MCSharpParser.Member_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.member_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterObject_initializer(MCSharpParser.Object_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.object_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitObject_initializer(MCSharpParser.Object_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.object_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterElement_initializer(MCSharpParser.Element_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.element_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitElement_initializer(MCSharpParser.Element_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.element_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterCollection_initializer(MCSharpParser.Collection_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.collection_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitCollection_initializer(MCSharpParser.Collection_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.collection_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterAnonymous_element_initializer(MCSharpParser.Anonymous_element_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.anonymous_element_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitAnonymous_element_initializer(MCSharpParser.Anonymous_element_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.anonymous_element_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterAnonymous_object_initializer(MCSharpParser.Anonymous_object_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.anonymous_object_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitAnonymous_object_initializer(MCSharpParser.Anonymous_object_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.anonymous_object_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterModifier(MCSharpParser.ModifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.modifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitModifier(MCSharpParser.ModifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.modifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterParameter_modifier(MCSharpParser.Parameter_modifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.parameter_modifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitParameter_modifier(MCSharpParser.Parameter_modifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.parameter_modifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterClass_type(MCSharpParser.Class_typeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.class_type"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitClass_type(MCSharpParser.Class_typeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.class_type"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterAttribute_tag(MCSharpParser.Attribute_tagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.attribute_tag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitAttribute_tag(MCSharpParser.Attribute_tagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.attribute_tag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterType_definition(MCSharpParser.Type_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.type_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitType_definition(MCSharpParser.Type_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.type_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterMember_definition(MCSharpParser.Member_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.member_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitMember_definition(MCSharpParser.Member_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.member_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterConstructor_definition(MCSharpParser.Constructor_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.constructor_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitConstructor_definition(MCSharpParser.Constructor_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.constructor_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterField_definition(MCSharpParser.Field_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.field_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitField_definition(MCSharpParser.Field_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.field_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterProperty_definition(MCSharpParser.Property_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.property_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitProperty_definition(MCSharpParser.Property_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.property_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterProperty_get_definition(MCSharpParser.Property_get_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.property_get_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitProperty_get_definition(MCSharpParser.Property_get_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.property_get_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterProperty_set_definition(MCSharpParser.Property_set_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.property_set_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitProperty_set_definition(MCSharpParser.Property_set_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.property_set_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterMethod_definition(MCSharpParser.Method_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.method_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitMethod_definition(MCSharpParser.Method_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.method_definition"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterLiteral(MCSharpParser.LiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitLiteral(MCSharpParser.LiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterIdentifier(MCSharpParser.IdentifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.identifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitIdentifier(MCSharpParser.IdentifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.identifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterShort_identifier(MCSharpParser.Short_identifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.short_identifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitShort_identifier(MCSharpParser.Short_identifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.short_identifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterStatement(MCSharpParser.StatementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitStatement(MCSharpParser.StatementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterCode_block(MCSharpParser.Code_blockContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.code_block"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitCode_block(MCSharpParser.Code_blockContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.code_block"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterAdditive_operator(MCSharpParser.Additive_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.additive_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitAdditive_operator(MCSharpParser.Additive_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.additive_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterMultiplicative_operator(MCSharpParser.Multiplicative_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.multiplicative_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitMultiplicative_operator(MCSharpParser.Multiplicative_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.multiplicative_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterStep_operator(MCSharpParser.Step_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.step_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitStep_operator(MCSharpParser.Step_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.step_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterBitwise_operator(MCSharpParser.Bitwise_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.bitwise_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitBitwise_operator(MCSharpParser.Bitwise_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.bitwise_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterBoolean_operator(MCSharpParser.Boolean_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.boolean_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitBoolean_operator(MCSharpParser.Boolean_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.boolean_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterShift_operator(MCSharpParser.Shift_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.shift_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitShift_operator(MCSharpParser.Shift_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.shift_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterEquality_operator(MCSharpParser.Equality_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.equality_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitEquality_operator(MCSharpParser.Equality_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.equality_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterRelation_operator(MCSharpParser.Relation_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.relation_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitRelation_operator(MCSharpParser.Relation_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.relation_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterAssignment_operator(MCSharpParser.Assignment_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.assignment_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitAssignment_operator(MCSharpParser.Assignment_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.assignment_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterRange_operator(MCSharpParser.Range_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.range_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitRange_operator(MCSharpParser.Range_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.range_operator"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterLanguage_function(MCSharpParser.Language_functionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.language_function"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitLanguage_function(MCSharpParser.Language_functionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.language_function"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterIf_statement(MCSharpParser.If_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.if_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitIf_statement(MCSharpParser.If_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.if_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterFor_statement(MCSharpParser.For_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.for_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitFor_statement(MCSharpParser.For_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.for_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterForeach_statement(MCSharpParser.Foreach_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.foreach_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitForeach_statement(MCSharpParser.Foreach_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.foreach_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterWhile_statement(MCSharpParser.While_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.while_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitWhile_statement(MCSharpParser.While_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.while_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterDo_statement(MCSharpParser.Do_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.do_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitDo_statement(MCSharpParser.Do_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.do_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterReturn_statement(MCSharpParser.Return_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.return_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitReturn_statement(MCSharpParser.Return_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.return_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterThrow_statement(MCSharpParser.Throw_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.throw_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitThrow_statement(MCSharpParser.Throw_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.throw_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterTry_statement(MCSharpParser.Try_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.try_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitTry_statement(MCSharpParser.Try_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.try_statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterExpression(MCSharpParser.ExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitExpression(MCSharpParser.ExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterInitialization_expression(MCSharpParser.Initialization_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.initialization_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitInitialization_expression(MCSharpParser.Initialization_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.initialization_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterNon_assignment_expression(MCSharpParser.Non_assignment_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.non_assignment_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitNon_assignment_expression(MCSharpParser.Non_assignment_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.non_assignment_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterLambda_expression(MCSharpParser.Lambda_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.lambda_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitLambda_expression(MCSharpParser.Lambda_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.lambda_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterExpression_list(MCSharpParser.Expression_listContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.expression_list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitExpression_list(MCSharpParser.Expression_listContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.expression_list"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterConditional_expression(MCSharpParser.Conditional_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.conditional_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitConditional_expression(MCSharpParser.Conditional_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.conditional_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterNull_coalescing_expression(MCSharpParser.Null_coalescing_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.null_coalescing_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitNull_coalescing_expression(MCSharpParser.Null_coalescing_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.null_coalescing_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterConditional_or_expression(MCSharpParser.Conditional_or_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.conditional_or_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitConditional_or_expression(MCSharpParser.Conditional_or_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.conditional_or_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterConditional_and_expression(MCSharpParser.Conditional_and_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.conditional_and_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitConditional_and_expression(MCSharpParser.Conditional_and_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.conditional_and_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterInclusive_or_expression(MCSharpParser.Inclusive_or_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.inclusive_or_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitInclusive_or_expression(MCSharpParser.Inclusive_or_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.inclusive_or_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterExclusive_or_expression(MCSharpParser.Exclusive_or_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.exclusive_or_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitExclusive_or_expression(MCSharpParser.Exclusive_or_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.exclusive_or_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterAnd_expression(MCSharpParser.And_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.and_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitAnd_expression(MCSharpParser.And_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.and_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterEquality_expression(MCSharpParser.Equality_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.equality_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitEquality_expression(MCSharpParser.Equality_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.equality_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterRelational_expression(MCSharpParser.Relational_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.relational_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitRelational_expression(MCSharpParser.Relational_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.relational_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterRelation_or_type_check(MCSharpParser.Relation_or_type_checkContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.relation_or_type_check"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitRelation_or_type_check(MCSharpParser.Relation_or_type_checkContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.relation_or_type_check"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterShift_expression(MCSharpParser.Shift_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.shift_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitShift_expression(MCSharpParser.Shift_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.shift_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterAdditive_expression(MCSharpParser.Additive_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.additive_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitAdditive_expression(MCSharpParser.Additive_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.additive_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterMultiplicative_expression(MCSharpParser.Multiplicative_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.multiplicative_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitMultiplicative_expression(MCSharpParser.Multiplicative_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.multiplicative_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterWith_expression(MCSharpParser.With_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.with_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitWith_expression(MCSharpParser.With_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.with_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterRange_expression(MCSharpParser.Range_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.range_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitRange_expression(MCSharpParser.Range_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.range_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterPre_step_expression(MCSharpParser.Pre_step_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.pre_step_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitPre_step_expression(MCSharpParser.Pre_step_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.pre_step_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterPost_step_expression(MCSharpParser.Post_step_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.post_step_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitPost_step_expression(MCSharpParser.Post_step_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.post_step_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterUnary_expression(MCSharpParser.Unary_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.unary_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitUnary_expression(MCSharpParser.Unary_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.unary_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterCast_expression(MCSharpParser.Cast_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.cast_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitCast_expression(MCSharpParser.Cast_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.cast_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterPointer_indirection_expression(MCSharpParser.Pointer_indirection_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.pointer_indirection_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitPointer_indirection_expression(MCSharpParser.Pointer_indirection_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.pointer_indirection_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterAddressof_expression(MCSharpParser.Addressof_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.addressof_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitAddressof_expression(MCSharpParser.Addressof_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.addressof_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterAssignment_expression(MCSharpParser.Assignment_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.assignment_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitAssignment_expression(MCSharpParser.Assignment_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.assignment_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterPrimary_expression(MCSharpParser.Primary_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.primary_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitPrimary_expression(MCSharpParser.Primary_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.primary_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterArray_creation_expression(MCSharpParser.Array_creation_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.array_creation_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitArray_creation_expression(MCSharpParser.Array_creation_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.array_creation_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterArray_rank_specifier(MCSharpParser.Array_rank_specifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.array_rank_specifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitArray_rank_specifier(MCSharpParser.Array_rank_specifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.array_rank_specifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterArray_initializer(MCSharpParser.Array_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.array_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitArray_initializer(MCSharpParser.Array_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.array_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterVariable_initializer(MCSharpParser.Variable_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.variable_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitVariable_initializer(MCSharpParser.Variable_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.variable_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterPrimary_no_array_creation_expression(MCSharpParser.Primary_no_array_creation_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.primary_no_array_creation_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitPrimary_no_array_creation_expression(MCSharpParser.Primary_no_array_creation_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.primary_no_array_creation_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterMember_access_prefix(MCSharpParser.Member_access_prefixContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.member_access_prefix"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitMember_access_prefix(MCSharpParser.Member_access_prefixContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.member_access_prefix"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterMember_access(MCSharpParser.Member_accessContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.member_access"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitMember_access(MCSharpParser.Member_accessContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.member_access"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterKeyword_expression(MCSharpParser.Keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitKeyword_expression(MCSharpParser.Keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterObject_or_collection_initializer(MCSharpParser.Object_or_collection_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.object_or_collection_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitObject_or_collection_initializer(MCSharpParser.Object_or_collection_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.object_or_collection_initializer"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterNew_keyword_expression(MCSharpParser.New_keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.new_keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitNew_keyword_expression(MCSharpParser.New_keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.new_keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterTypeof_keyword_expression(MCSharpParser.Typeof_keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.typeof_keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitTypeof_keyword_expression(MCSharpParser.Typeof_keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.typeof_keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterChecked_expression(MCSharpParser.Checked_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.checked_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitChecked_expression(MCSharpParser.Checked_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.checked_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterUnchecked_expression(MCSharpParser.Unchecked_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.unchecked_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitUnchecked_expression(MCSharpParser.Unchecked_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.unchecked_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterDefault_keyword_expression(MCSharpParser.Default_keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.default_keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitDefault_keyword_expression(MCSharpParser.Default_keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.default_keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterDelegate_keyword_expression(MCSharpParser.Delegate_keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.delegate_keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitDelegate_keyword_expression(MCSharpParser.Delegate_keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.delegate_keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterSizeof_keyword_expression(MCSharpParser.Sizeof_keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.sizeof_keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.ExitSizeof_keyword_expression(MCSharpParser.Sizeof_keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.sizeof_keyword_expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:MCSharpBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:MCSharpBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:MCSharpBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:MCSharpBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="T:IMCSharpListener">
            <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:MCSharpParser"/>.
            </summary>
        </member>
        <member name="M:IMCSharpListener.EnterScript(MCSharpParser.ScriptContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.script"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitScript(MCSharpParser.ScriptContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.script"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterGeneric_parameter(MCSharpParser.Generic_parameterContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.generic_parameter"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitGeneric_parameter(MCSharpParser.Generic_parameterContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.generic_parameter"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterGeneric_parameter_list(MCSharpParser.Generic_parameter_listContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.generic_parameter_list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitGeneric_parameter_list(MCSharpParser.Generic_parameter_listContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.generic_parameter_list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterGeneric_parameters(MCSharpParser.Generic_parametersContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.generic_parameters"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitGeneric_parameters(MCSharpParser.Generic_parametersContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.generic_parameters"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterMethod_parameter(MCSharpParser.Method_parameterContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.method_parameter"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitMethod_parameter(MCSharpParser.Method_parameterContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.method_parameter"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterMethod_parameter_list(MCSharpParser.Method_parameter_listContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.method_parameter_list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitMethod_parameter_list(MCSharpParser.Method_parameter_listContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.method_parameter_list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterMethod_parameters(MCSharpParser.Method_parametersContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.method_parameters"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitMethod_parameters(MCSharpParser.Method_parametersContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.method_parameters"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterIndexer_parameters(MCSharpParser.Indexer_parametersContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.indexer_parameters"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitIndexer_parameters(MCSharpParser.Indexer_parametersContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.indexer_parameters"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterArgument(MCSharpParser.ArgumentContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.argument"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitArgument(MCSharpParser.ArgumentContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.argument"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterArgument_list(MCSharpParser.Argument_listContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.argument_list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitArgument_list(MCSharpParser.Argument_listContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.argument_list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterGeneric_arguments(MCSharpParser.Generic_argumentsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.generic_arguments"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitGeneric_arguments(MCSharpParser.Generic_argumentsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.generic_arguments"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterMethod_arguments(MCSharpParser.Method_argumentsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.method_arguments"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitMethod_arguments(MCSharpParser.Method_argumentsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.method_arguments"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterIndexer_arguments(MCSharpParser.Indexer_argumentsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.indexer_arguments"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitIndexer_arguments(MCSharpParser.Indexer_argumentsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.indexer_arguments"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterMember_initializer(MCSharpParser.Member_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.member_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitMember_initializer(MCSharpParser.Member_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.member_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterObject_initializer(MCSharpParser.Object_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.object_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitObject_initializer(MCSharpParser.Object_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.object_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterElement_initializer(MCSharpParser.Element_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.element_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitElement_initializer(MCSharpParser.Element_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.element_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterCollection_initializer(MCSharpParser.Collection_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.collection_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitCollection_initializer(MCSharpParser.Collection_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.collection_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterAnonymous_element_initializer(MCSharpParser.Anonymous_element_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.anonymous_element_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitAnonymous_element_initializer(MCSharpParser.Anonymous_element_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.anonymous_element_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterAnonymous_object_initializer(MCSharpParser.Anonymous_object_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.anonymous_object_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitAnonymous_object_initializer(MCSharpParser.Anonymous_object_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.anonymous_object_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterModifier(MCSharpParser.ModifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.modifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitModifier(MCSharpParser.ModifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.modifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterParameter_modifier(MCSharpParser.Parameter_modifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.parameter_modifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitParameter_modifier(MCSharpParser.Parameter_modifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.parameter_modifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterClass_type(MCSharpParser.Class_typeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.class_type"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitClass_type(MCSharpParser.Class_typeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.class_type"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterAttribute_tag(MCSharpParser.Attribute_tagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.attribute_tag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitAttribute_tag(MCSharpParser.Attribute_tagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.attribute_tag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterType_definition(MCSharpParser.Type_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.type_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitType_definition(MCSharpParser.Type_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.type_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterMember_definition(MCSharpParser.Member_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.member_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitMember_definition(MCSharpParser.Member_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.member_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterConstructor_definition(MCSharpParser.Constructor_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.constructor_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitConstructor_definition(MCSharpParser.Constructor_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.constructor_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterField_definition(MCSharpParser.Field_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.field_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitField_definition(MCSharpParser.Field_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.field_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterProperty_definition(MCSharpParser.Property_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.property_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitProperty_definition(MCSharpParser.Property_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.property_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterProperty_get_definition(MCSharpParser.Property_get_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.property_get_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitProperty_get_definition(MCSharpParser.Property_get_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.property_get_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterProperty_set_definition(MCSharpParser.Property_set_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.property_set_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitProperty_set_definition(MCSharpParser.Property_set_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.property_set_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterMethod_definition(MCSharpParser.Method_definitionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.method_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitMethod_definition(MCSharpParser.Method_definitionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.method_definition"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterLiteral(MCSharpParser.LiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitLiteral(MCSharpParser.LiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterIdentifier(MCSharpParser.IdentifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.identifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitIdentifier(MCSharpParser.IdentifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.identifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterShort_identifier(MCSharpParser.Short_identifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.short_identifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitShort_identifier(MCSharpParser.Short_identifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.short_identifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterStatement(MCSharpParser.StatementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitStatement(MCSharpParser.StatementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterCode_block(MCSharpParser.Code_blockContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.code_block"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitCode_block(MCSharpParser.Code_blockContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.code_block"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterAdditive_operator(MCSharpParser.Additive_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.additive_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitAdditive_operator(MCSharpParser.Additive_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.additive_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterMultiplicative_operator(MCSharpParser.Multiplicative_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.multiplicative_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitMultiplicative_operator(MCSharpParser.Multiplicative_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.multiplicative_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterStep_operator(MCSharpParser.Step_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.step_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitStep_operator(MCSharpParser.Step_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.step_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterBitwise_operator(MCSharpParser.Bitwise_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.bitwise_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitBitwise_operator(MCSharpParser.Bitwise_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.bitwise_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterBoolean_operator(MCSharpParser.Boolean_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.boolean_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitBoolean_operator(MCSharpParser.Boolean_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.boolean_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterShift_operator(MCSharpParser.Shift_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.shift_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitShift_operator(MCSharpParser.Shift_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.shift_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterEquality_operator(MCSharpParser.Equality_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.equality_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitEquality_operator(MCSharpParser.Equality_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.equality_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterRelation_operator(MCSharpParser.Relation_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.relation_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitRelation_operator(MCSharpParser.Relation_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.relation_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterAssignment_operator(MCSharpParser.Assignment_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.assignment_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitAssignment_operator(MCSharpParser.Assignment_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.assignment_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterRange_operator(MCSharpParser.Range_operatorContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.range_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitRange_operator(MCSharpParser.Range_operatorContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.range_operator"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterLanguage_function(MCSharpParser.Language_functionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.language_function"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitLanguage_function(MCSharpParser.Language_functionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.language_function"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterIf_statement(MCSharpParser.If_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.if_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitIf_statement(MCSharpParser.If_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.if_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterFor_statement(MCSharpParser.For_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.for_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitFor_statement(MCSharpParser.For_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.for_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterForeach_statement(MCSharpParser.Foreach_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.foreach_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitForeach_statement(MCSharpParser.Foreach_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.foreach_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterWhile_statement(MCSharpParser.While_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.while_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitWhile_statement(MCSharpParser.While_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.while_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterDo_statement(MCSharpParser.Do_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.do_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitDo_statement(MCSharpParser.Do_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.do_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterReturn_statement(MCSharpParser.Return_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.return_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitReturn_statement(MCSharpParser.Return_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.return_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterThrow_statement(MCSharpParser.Throw_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.throw_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitThrow_statement(MCSharpParser.Throw_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.throw_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterTry_statement(MCSharpParser.Try_statementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.try_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitTry_statement(MCSharpParser.Try_statementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.try_statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterExpression(MCSharpParser.ExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitExpression(MCSharpParser.ExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterInitialization_expression(MCSharpParser.Initialization_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.initialization_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitInitialization_expression(MCSharpParser.Initialization_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.initialization_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterNon_assignment_expression(MCSharpParser.Non_assignment_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.non_assignment_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitNon_assignment_expression(MCSharpParser.Non_assignment_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.non_assignment_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterLambda_expression(MCSharpParser.Lambda_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.lambda_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitLambda_expression(MCSharpParser.Lambda_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.lambda_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterExpression_list(MCSharpParser.Expression_listContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.expression_list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitExpression_list(MCSharpParser.Expression_listContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.expression_list"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterConditional_expression(MCSharpParser.Conditional_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.conditional_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitConditional_expression(MCSharpParser.Conditional_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.conditional_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterNull_coalescing_expression(MCSharpParser.Null_coalescing_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.null_coalescing_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitNull_coalescing_expression(MCSharpParser.Null_coalescing_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.null_coalescing_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterConditional_or_expression(MCSharpParser.Conditional_or_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.conditional_or_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitConditional_or_expression(MCSharpParser.Conditional_or_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.conditional_or_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterConditional_and_expression(MCSharpParser.Conditional_and_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.conditional_and_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitConditional_and_expression(MCSharpParser.Conditional_and_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.conditional_and_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterInclusive_or_expression(MCSharpParser.Inclusive_or_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.inclusive_or_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitInclusive_or_expression(MCSharpParser.Inclusive_or_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.inclusive_or_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterExclusive_or_expression(MCSharpParser.Exclusive_or_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.exclusive_or_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitExclusive_or_expression(MCSharpParser.Exclusive_or_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.exclusive_or_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterAnd_expression(MCSharpParser.And_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.and_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitAnd_expression(MCSharpParser.And_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.and_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterEquality_expression(MCSharpParser.Equality_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.equality_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitEquality_expression(MCSharpParser.Equality_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.equality_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterRelational_expression(MCSharpParser.Relational_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.relational_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitRelational_expression(MCSharpParser.Relational_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.relational_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterRelation_or_type_check(MCSharpParser.Relation_or_type_checkContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.relation_or_type_check"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitRelation_or_type_check(MCSharpParser.Relation_or_type_checkContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.relation_or_type_check"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterShift_expression(MCSharpParser.Shift_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.shift_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitShift_expression(MCSharpParser.Shift_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.shift_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterAdditive_expression(MCSharpParser.Additive_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.additive_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitAdditive_expression(MCSharpParser.Additive_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.additive_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterMultiplicative_expression(MCSharpParser.Multiplicative_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.multiplicative_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitMultiplicative_expression(MCSharpParser.Multiplicative_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.multiplicative_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterWith_expression(MCSharpParser.With_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.with_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitWith_expression(MCSharpParser.With_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.with_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterRange_expression(MCSharpParser.Range_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.range_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitRange_expression(MCSharpParser.Range_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.range_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterPre_step_expression(MCSharpParser.Pre_step_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.pre_step_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitPre_step_expression(MCSharpParser.Pre_step_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.pre_step_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterPost_step_expression(MCSharpParser.Post_step_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.post_step_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitPost_step_expression(MCSharpParser.Post_step_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.post_step_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterUnary_expression(MCSharpParser.Unary_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.unary_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitUnary_expression(MCSharpParser.Unary_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.unary_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterCast_expression(MCSharpParser.Cast_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.cast_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitCast_expression(MCSharpParser.Cast_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.cast_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterPointer_indirection_expression(MCSharpParser.Pointer_indirection_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.pointer_indirection_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitPointer_indirection_expression(MCSharpParser.Pointer_indirection_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.pointer_indirection_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterAddressof_expression(MCSharpParser.Addressof_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.addressof_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitAddressof_expression(MCSharpParser.Addressof_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.addressof_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterAssignment_expression(MCSharpParser.Assignment_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.assignment_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitAssignment_expression(MCSharpParser.Assignment_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.assignment_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterPrimary_expression(MCSharpParser.Primary_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.primary_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitPrimary_expression(MCSharpParser.Primary_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.primary_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterArray_creation_expression(MCSharpParser.Array_creation_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.array_creation_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitArray_creation_expression(MCSharpParser.Array_creation_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.array_creation_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterArray_rank_specifier(MCSharpParser.Array_rank_specifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.array_rank_specifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitArray_rank_specifier(MCSharpParser.Array_rank_specifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.array_rank_specifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterArray_initializer(MCSharpParser.Array_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.array_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitArray_initializer(MCSharpParser.Array_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.array_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterVariable_initializer(MCSharpParser.Variable_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.variable_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitVariable_initializer(MCSharpParser.Variable_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.variable_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterPrimary_no_array_creation_expression(MCSharpParser.Primary_no_array_creation_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.primary_no_array_creation_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitPrimary_no_array_creation_expression(MCSharpParser.Primary_no_array_creation_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.primary_no_array_creation_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterMember_access_prefix(MCSharpParser.Member_access_prefixContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.member_access_prefix"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitMember_access_prefix(MCSharpParser.Member_access_prefixContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.member_access_prefix"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterMember_access(MCSharpParser.Member_accessContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.member_access"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitMember_access(MCSharpParser.Member_accessContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.member_access"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterKeyword_expression(MCSharpParser.Keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitKeyword_expression(MCSharpParser.Keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterObject_or_collection_initializer(MCSharpParser.Object_or_collection_initializerContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.object_or_collection_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitObject_or_collection_initializer(MCSharpParser.Object_or_collection_initializerContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.object_or_collection_initializer"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterNew_keyword_expression(MCSharpParser.New_keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.new_keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitNew_keyword_expression(MCSharpParser.New_keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.new_keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterTypeof_keyword_expression(MCSharpParser.Typeof_keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.typeof_keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitTypeof_keyword_expression(MCSharpParser.Typeof_keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.typeof_keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterChecked_expression(MCSharpParser.Checked_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.checked_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitChecked_expression(MCSharpParser.Checked_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.checked_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterUnchecked_expression(MCSharpParser.Unchecked_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.unchecked_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitUnchecked_expression(MCSharpParser.Unchecked_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.unchecked_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterDefault_keyword_expression(MCSharpParser.Default_keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.default_keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitDefault_keyword_expression(MCSharpParser.Default_keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.default_keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterDelegate_keyword_expression(MCSharpParser.Delegate_keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.delegate_keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitDelegate_keyword_expression(MCSharpParser.Delegate_keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.delegate_keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.EnterSizeof_keyword_expression(MCSharpParser.Sizeof_keyword_expressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:MCSharpParser.sizeof_keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IMCSharpListener.ExitSizeof_keyword_expression(MCSharpParser.Sizeof_keyword_expressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:MCSharpParser.sizeof_keyword_expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="P:MCSharp.Collections.HashSetDictionary`2.Dictionary">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Collections.HashSetDictionary`2.Keys">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Collections.HashSetDictionary`2.Values">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Collections.HashSetDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Collections.HashSetDictionary`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Collections.HashSetDictionary`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.Add(`0,System.Collections.Generic.HashSet{`1})">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.HashSet{`1}})">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.TryGetValue(`0,System.Collections.Generic.HashSet{`1}@)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.HashSet{`1}})">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.HashSet{`1}}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.HashSet{`1}})">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Collections.HashSetDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Collections.IHashSetDictionary`2">
            <summary>
            Represents a dictionary with multiple values per key.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="T:MCSharp.Compilation.Compiler">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.Settings">
            <summary>
            The <see cref="T:MCSharp.Compilation.Settings"/> used to configure the compiler.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.VirtualMachine">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.Assemblies">
            <summary>
            The assemblies that are loaded into the compiler.
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.#ctor(MCSharp.Compilation.Settings,System.Collections.Generic.ICollection{System.Reflection.Assembly})">
            <summary>
            Creates a new compiler.
            </summary>
            <param name="settings">The settings to use.</param>
            <param name="assemblies">The assemblies to use.</param>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.DefinedTypes">
            <summary>
            A collection of all <see cref="T:MCSharp.Linkage.IType"/>s defined for this <see cref="T:MCSharp.Compilation.Compiler"/>, accessible by their <see cref="P:MCSharp.Linkage.IType.Identifier"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.LinkerExtensions">
            <summary>
            A collection of all <see cref="T:MCSharp.Linkage.Extensions.LinkerExtension"/>s that are applied when <see cref="M:MCSharp.Compilation.Compiler.Compile"/> is run.
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.GetLinkerExtension``1">
            <summary>
            Finds an item within <see cref="P:MCSharp.Compilation.Compiler.LinkerExtensions"/> that is of type <typeparamref name="TLinkerExtension"/>.
            </summary>
            <typeparam name="TLinkerExtension">The type of <see cref="T:MCSharp.Linkage.Extensions.LinkerExtension"/> to find.</typeparam>
            <returns>Returns the first item found, <see langword="null"/> if nothing was found.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.Compile">
            <summary>
            Compiles the given <see cref="P:MCSharp.Compilation.Compiler.Settings"/> and returns the resulting <see cref="T:MCSharp.Compilation.ResultInfo"/>.
            </summary>
            <returns>The result of the compilation.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileStandaloneMethod(MCSharp.Compilation.Scope,MCSharp.Linkage.IMember,System.Action{MCSharp.Compilation.Compiler.CompileArguments})">
            <summary>
            Compiles the given <see cref="F:MCSharp.Linkage.MemberType.Method"/> <see cref="T:MCSharp.Linkage.IMember"/>.
            </summary>
            <param name="typeScope">The scope of the type that contains the member.</param>
            <param name="member">The member (<see cref="F:MCSharp.Linkage.MemberType.Method"/>) to compile.</param>
            <param name="trigger">The trigger to call before the member is compiled.</param>
            <returns>The result of the compilation.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileStatements(MCSharp.Linkage.Minecraft.StandaloneStatementFunction,MCSharp.Compilation.Scope,System.Collections.Generic.ICollection{MCSharp.Linkage.IStatement},System.Action{MCSharp.Compilation.Compiler.CompileArguments})">
            <summary>
            Compiles the given collection of <see cref="T:MCSharp.Linkage.IStatement"/>s.
            </summary>
            <param name="function">The function that contains the statements.</param>
            <param name="scope">The scope of the function.</param>
            <param name="statements">The statements to compile.</param>
            <param name="trigger">The trigger to call before the statements are compiled.</param>
            <returns>The result of the compilation.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileStatement(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.StatementContext)">
            <summary>
            Compiles the given <see cref="T:MCSharpParser.StatementContext"/>.
            </summary>
            <param name="location">The location of the statement.</param>
            <param name="context">The statement to compile.</param>
            <returns>The result of the compilation.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileInitializationExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Initialization_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles an initialization expression.
            </summary>
            <param name="location">The location of the expression.</param>
            <param name="initialization_expression">The initialization expression.</param>
            <param name="value">The value of the initialization expression.</param>
            <returns>The result of the compilation.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileSimpleOperation(MCSharp.Compilation.Compiler.CompileArguments,MCSharp.Linkage.Operation,MCSharp.Compilation.Instancing.IInstance,MCSharp.Compilation.Instancing.IInstance,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles an operation between two <see cref="T:MCSharp.Compilation.Instancing.IInstance"/>s.
            </summary>
            <param name="location">The location of the operation.</param>
            <param name="op">The operation to perform.</param>
            <param name="operand1">The first operand.</param>
            <param name="operand2">The second operand.</param>
            <param name="result">The result of the operation.</param>
            <returns>The result of the compilation.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles an expression:
            <code>
            expression
              : non_assignment_expression
              | assignment_expression
              ;
            </code>
            </summary>
            <param name="location">The location of the expression.</param>
            <param name="expression">The expression to compile.</param>
            <param name="value">The value of the expression.</param>
            <returns>The result of the compilation.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileNonAssignmentExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Non_assignment_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a non-assignment expression:
            <code>
            non_assignment_expression
              : conditional_expression
              | lambda_expression
              ;
            </code>
            </summary>
            <param name="non_assignment_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileLambdaExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Lambda_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a lambda expression:
            <code>
            lambda_expression
              : method_arguments LAMBDA ( code_block )
              ;
            </code>
            </summary>
            <param name="lambda_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileConditionalExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Conditional_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a conditional expression:
            <code>
            conditional_expression
              : null_coalescing_expression ( CONDITION_IF expression CONDITION_ELSE expression )?
              ;
            </code>
            </summary>
            <param name="conditional_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileNullCoalescingExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Null_coalescing_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a null-coalescing expression:
            <code>
            null_coalescing_expression
              : conditional_or_expression ( NULL_COALESCING null_coalescing_expression )?
              ;
            </code>
            </summary>
            <param name="null_coalescing_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileConditionalOrExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Conditional_or_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a boolean 'OR' expression.
            <code>
            conditional_or_expression
              : conditional_and_expression ( BOOLEAN_OR conditional_and_expression )?
              ;
            </code>
            </summary>
            <param name="conditional_or_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileConditionalAndExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Conditional_and_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a boolean 'AND' expression:
            <code>
            conditional_and_expression
              : inclusive_or_expression ( BOOLEAN_AND inclusive_or_expression )?
              ;
            </code>
            </summary>
            <param name="conditional_and_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileInclusiveOrExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Inclusive_or_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a bitwise 'OR' expression:
            <code>
            inclusive_or_expression
              : exclusive_or_expression ( BITWISE_OR exclusive_or_expression )?
              ;
            </code>
            </summary>
            <param name="inclusive_or_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileExclusiveOrExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Exclusive_or_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a bitwise 'XOR' expression:
            <code>
            exclusive_or_expression
              : and_expression ( BITWISE_XOR and_expression )?
              ;
            </code>
            </summary>
            <param name="exclusive_or_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileAndExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.And_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a bitwise 'AND' expression:
            <code>
            and_expression
              : equality_expression ( BITWISE_AND equality_expression )?
              ;
            </code>
            </summary>
            <param name="and_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileEqualityExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Equality_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles an equality expression:
            <code>
            equality_expression
              : relational_expression ( equality_operator relational_expression )?
              ;
            </code>
            </summary>
            <param name="equality_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileRelationalExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Relational_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a relational expression:
            <code>
            relational_expression
              : shift_expression ( relation_or_type_check )*
              ;
            </code>
            </summary>
            <param name="relational_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileRelationOrTypeCheck(MCSharp.Compilation.Compiler.CompileArguments,MCSharp.Compilation.Instancing.IInstance,MCSharpParser.Relation_or_type_checkContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a relation or type check expression:
            <code>
            relation_or_type_check
              : relation_operator shift_expression
              | ( IS | AS ) identifier
              ;
            </code>
            </summary>
            <param name="operandLeft">The left operand.</param>
            <param name="relation_or_type_check">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileShiftExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Shift_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a shift expression:
            <code>
            shift_expression
              : additive_expression ( shift_operator additive_expression )*
              ;
            </code>
            </summary>
            <param name="shift_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileAdditiveExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Additive_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles an additive expression:
            <code>
            additive_expression
              : multiplicative_expression ( additive_operator multiplicative_expression )*
              ;
            </code>
            </summary>
            <param name="additive_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileMultiplicativeExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Multiplicative_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a multiplicative expression:
            <code>
            multiplicative_expression
              : with_expression ( multiplicative_operator with_expression )*
              ;
            </code>
            </summary>
            <param name="multiplicative_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileWithExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.With_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a with expression:
            <code>
            with_expression
              : range_expression ( WITH anonymous_element_initializer )?
              ;
            </code>
            </summary>
            <param name="with_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileRangeExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Range_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a range expression:
            <code>
            range_expression
              : unary_expression ( range_operator unary_expression )?
              ;
            </code>
            </summary>
            <param name="range_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompilePreStepExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Pre_step_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a pre-step expression:
            <code>
            pre_step_expression
              : pre_step_operator unary_expression
              ;
            </code>
            </summary>
            <param name="pre_step_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompilePostStepExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Post_step_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a post-step expression:
            <code>
            post_step_expression
              : post_step_operator unary_expression
              ;
            </code>
            </summary>
            <param name="post_step_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileUnaryExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Unary_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a unary expression:
            <code>
            unary_expression
              : primary_expression
              | unary_operator unary_expression
              | pre_step_expression
              | cast_expression
              | pointer_indirection_expression
              | address_of_expression
              ;
            </code>
            </summary>
            <param name="unary_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileCastExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Cast_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a cast expression:
            <code>
            cast_expression
              : OP NAME CP unary_expression
              ;
            </code>
            </summary>
            <param name="cast_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompilePointerIndirectionExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Pointer_indirection_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a pointer indirection expression:
            <code>
            pointer_indirection_expression
              : MULTIPLY unary_expression
              ;
            </code>
            </summary>
            <param name="pointer_indirection_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileAddressofExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Addressof_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles an address of expression:
            <code>
            address_of_expression
              : BITWISE_AND unary_expression
              ;
            </code>
            </summary>
            <param name="addressof_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileAssignmentExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Assignment_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles an assignment expression:
            <code>
            assignment_expression
              : unary_expression assignment_operator expression
              ;
            </code>
            </summary>
            <param name="assignment_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompilePrimaryExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Primary_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a primary expression:
            <code>
            primary_expression
              : array_creation_expression
              : primary_no_array_creation_expression
              ;
            </code>
            </summary>
            <param name="primary_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileArrayCreationExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Array_creation_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles an array creation expression:
            <code>
            array_creation_expression
              : NEW indexer_arguments array_rank_specifier? array_initializer?
              ;
            </code>
            </summary>
            <param name="array_creation_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompilePrimaryNoArrayCreationExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Primary_no_array_creation_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a primary no-array-creation expression:
            <code>
            primary_no_array_creation_expression
              : literal
              : short_identifier
              : OP expression CP
              : member_access
              : post_step_expression
              : keyword_expression
              ;
            </code>
            </summary>
            <param name="primary_no_array_creation_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileMemberAccess(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Member_accessContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a member access expression:
            <code>
            member_access
              : member_access_prefix* short_identifier generic_arguments? ( method_arguments | indexer_arguments )?
              ;
            </code>
            </summary>
            <param name="member_access">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileLiteral(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.LiteralContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a literal.
            </summary>
            <param name="location">The location of the literal.</param>
            <param name="literal">The literal to compile.</param>
            <param name="value">The instance to assign the literal to.</param>
            <returns>The result of the compilation.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileKeywordExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.Keyword_expressionContext,MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Compiles a keyword expression:
            <code>
            keyword_expression
              : NEW NAME ( ( method_arguments object_or_collection_initializer? ) | ( object_or_collection_initializer ) )
              | NEW anonymous_object_initializer
              ;
            </code>
            </summary>
            <param name="keyword_expression">The expression to compile.</param>
            <inheritdoc cref="M:MCSharp.Compilation.Compiler.CompileExpression(MCSharp.Compilation.Compiler.CompileArguments,MCSharpParser.ExpressionContext,MCSharp.Compilation.Instancing.IInstance@)"/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CreateIStatement(MCSharpParser.StatementContext,System.Boolean)">
            <summary>
            Creates an <see cref="T:MCSharp.Linkage.IStatement"/> from a <see cref="T:MCSharpParser.StatementContext"/>.
            </summary>
            <param name="statement">The <see cref="T:MCSharpParser.StatementContext"/> to create the <see cref="T:MCSharp.Linkage.IStatement"/> from.</param>
            <param name="predefined">Whether or not the <see cref="T:MCSharp.Linkage.IStatement"/> is a <see cref="T:MCSharp.Linkage.Predefined.PredefinedStatement"/>.</param>
            <returns>The <see cref="T:MCSharp.Linkage.IStatement"/> created.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CreateIStatements(MCSharpParser.StatementContext[],System.Boolean)">
            <summary>
            Creates an array of <see cref="T:MCSharp.Linkage.IStatement"/>s from an array of <see cref="T:MCSharpParser.StatementContext"/>s.
            </summary>
            <param name="statements">The array of <see cref="T:MCSharpParser.StatementContext"/>s to create the <see cref="T:MCSharp.Linkage.IStatement"/>s from.</param>
            <param name="predefined">Whether or not the <see cref="T:MCSharp.Linkage.IStatement"/>s are <see cref="T:MCSharp.Linkage.Predefined.PredefinedStatement"/>s.</param>
            <returns>The array of <see cref="T:MCSharp.Linkage.IStatement"/>s created.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CreateIStatements(MCSharpParser.StatementContext,System.Boolean)">
            <summary>
            Creates an array of <see cref="T:MCSharp.Linkage.IStatement"/>s from a <see cref="T:MCSharpParser.StatementContext"/>.
            </summary>
            <param name="statement">The <see cref="T:MCSharpParser.StatementContext"/> to create the <see cref="T:MCSharp.Linkage.IStatement"/>s from.</param>
            <param name="predefined">Whether or not the <see cref="T:MCSharp.Linkage.IStatement"/>s are <see cref="T:MCSharp.Linkage.Predefined.PredefinedStatement"/>s.</param>
            <returns>The array of <see cref="T:MCSharp.Linkage.IStatement"/>s created.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Compiler.CompileArguments">
            <summary>
            Contains information to link source code to output code.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.CompileArguments.Compiler">
            <summary>
            The <see cref="T:MCSharp.Compilation.Compiler"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.CompileArguments.Function">
            <summary>
            The <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/> being written to.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.CompileArguments.Writer">
            <summary>
            The <see cref="T:MCSharp.Compilation.FunctionWriter"/> of <see cref="P:MCSharp.Compilation.Compiler.CompileArguments.Function"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.CompileArguments.Scope">
            <summary>
            The current <see cref="T:MCSharp.Compilation.Scope"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.CompileArguments.Predefined">
            <summary>
            Whether or not the <see cref="T:MCSharp.Linkage.IStatement"/>s are <see cref="T:MCSharp.Linkage.Predefined.PredefinedStatement"/>s.
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileArguments.#ctor(MCSharp.Compilation.Compiler,MCSharp.Linkage.Minecraft.StandaloneStatementFunction,MCSharp.Compilation.Scope,System.Boolean)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.Compiler.CompileArguments"/>.
            </summary>
            <param name="compiler">The <see cref="T:MCSharp.Compilation.Compiler"/>.</param>
            <param name="function">The <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/> being written to.</param>
            <param name="scope">The current <see cref="T:MCSharp.Compilation.Scope"/>.</param>
            <param name="predefined">Whether or not the <see cref="T:MCSharp.Linkage.IStatement"/>s are <see cref="T:MCSharp.Linkage.Predefined.PredefinedStatement"/>s.</param>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileArguments.GetLocation(Antlr4.Runtime.ParserRuleContext)">
            <summary>
            Finds the file name and line/column number of the given <see cref="T:Antlr4.Runtime.ParserRuleContext"/>.
            </summary>
            <param name="context">The <see cref="T:Antlr4.Runtime.ParserRuleContext"/> to find the file name and line/column number of.</param>
            <returns>The location in a user-friendly format.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileArguments.GetLocation(Antlr4.Runtime.Tree.ITerminalNode)">
            <summary>
            Finds the file name and line/column number of the given <see cref="T:Antlr4.Runtime.Tree.ITerminalNode"/>.
            </summary>
            <param name="node">The <see cref="T:Antlr4.Runtime.Tree.ITerminalNode"/> to find the file name and line/column number of.</param>
            <returns>The location in a user-friendly format.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.CompileArguments.GetLocation(Antlr4.Runtime.IToken)">
            <summary>
            Finds the file name and line/column number of the given <see cref="T:Antlr4.Runtime.IToken"/>.
            </summary>
            <param name="token">The <see cref="T:Antlr4.Runtime.IToken"/> to find the file name and line/column number of.</param>
            <returns>The location in a user-friendly format.</returns>
        </member>
        <member name="T:MCSharp.Compilation.Compiler.ScriptClassWalker">
            <summary>
            
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.ScriptClassWalker.#ctor(MCSharp.Compilation.Compiler,MCSharp.Compilation.Scope)">
            <summary>
            
            </summary>
            <param name="compiler"></param>
            <param name="rootScope"></param>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.ScriptClassWalker.EnterType_definition(MCSharpParser.Type_definitionContext)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.ScriptClassWalker.EnterMember_definition(MCSharpParser.Member_definitionContext)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.ScriptClassWalker.EnterConstructor_definition(MCSharpParser.Constructor_definitionContext)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.ScriptClassWalker.ExitType_definition(MCSharpParser.Type_definitionContext)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Compiler.ScriptErrorListener">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.ScriptErrorListener.Result">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Compiler.ScriptErrorListener.Source">
            <summary>
            
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.ScriptErrorListener.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.ScriptErrorListener.Antlr4#Runtime#IAntlrErrorListener{Antlr4#Runtime#IToken}#SyntaxError(System.IO.TextWriter,Antlr4.Runtime.IRecognizer,Antlr4.Runtime.IToken,System.Int32,System.Int32,System.String,Antlr4.Runtime.RecognitionException)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Compiler.ScriptErrorListener.Antlr4#Runtime#IAntlrErrorListener{System#Int32}#SyntaxError(System.IO.TextWriter,Antlr4.Runtime.IRecognizer,System.Int32,System.Int32,System.Int32,System.String,Antlr4.Runtime.RecognitionException)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Datapack">
            <summary>
            Represents a Minecraft datapack and its file structure.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Datapack.Name">
            <summary>
            The name of the datapack.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Datapack.RootDirectory">
            <summary>
            The root directory of the datapack.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Datapack.ScriptDirectory">
            <summary>
            The directory of the input '.mcsharp' files.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Datapack.FunctionDirectory">
            <summary>
            The directory of the output '.mcfunction' files.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Datapack.LoadJsonFile">
            <summary>
            The location of the datapack's 'load.json' file.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Datapack.TickJsonFile">
            <summary>
            The location of the datapack's 'tick.json' file.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Datapack.ProgramScriptFile">
            <summary>
            The location of the datapack's program MCSharp file.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Datapack.ProgramClassName">
            <summary>
            The name of the program class.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Datapack.ProgramLoadName">
            <summary>
            The name of the program class's load method.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Datapack.ProgramTickName">
            <summary>
            The name of the program class's tick method.
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.Datapack.#ctor(System.String,System.String)">
            <summary>
            Creates a new datapack.
            </summary>
            <param name="root">The root directory of the datapack.</param>
            <param name="name">The name of the datapack.</param>
        </member>
        <member name="M:MCSharp.Compilation.Datapack.CreateFunctionFile(System.String)">
            <summary>
            Creates a '.mcfunction' in the given local path.
            </summary>
            <param name="localPath">The local path to create the '.mcfunction' in.</param>
            <returns>The created <see cref="T:System.IO.StreamWriter"/> for the '.mcfunction' file.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Datapack.EnumerateFunctionFiles">
            <summary>
            Enumerates all '.mcfunction' files in the datapack.
            </summary>
            <returns>An enumerable of all '.mcfunction' files in the datapack.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Datapack.EnumerateScriptFiles">
            <summary>
            Enumerates all '.mcsharp' files in the datapack.
            </summary>
            <returns>An enumerable of all '.mcsharp' files in the datapack.</returns>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.ClassInstance">
            <summary>
            Represents an instance of a class type.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.ClassInstance.FieldObjectives">
            <summary>
            The <see cref="T:MCSharp.Linkage.Minecraft.Objective"/>s used to store fields in the <see cref="T:MCSharp.Compilation.Instancing.ClassInstance"/> of this <see cref="T:MCSharp.Linkage.IType"/>.
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.ClassInstance.ToString">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.IConstantInstance">
            <summary>
            Represents an <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> that holds a constant value.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.IConstantInstance.Value">
            <summary>
            The value of this constant.
            </summary>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.IConstantInstance`1">
            <summary>
            Represents an <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> that holds a constant value of a known type.
            </summary>
            <typeparam name="TValue">Represents the value this <see cref="T:MCSharp.Compilation.Instancing.IConstantInstance"/> stores.</typeparam>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.IConstantInstance`1.Value">
            <summary>
            The value of this constant.
            </summary>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.IInstance">
            <summary>
            Represents an instance of some type.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.IInstance.Type">
            <summary>
            The <see cref="T:MCSharp.Linkage.IType"/> that defines this instance.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.IInstance.Identifier">
            <summary>
            The local identifier for this instance.
            </summary>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.IInstance.InvalidTypeException">
            <summary>
            <see cref="T:System.Exception"/> thrown when <see cref="P:MCSharp.Compilation.Instancing.IInstance.Type"/> is assigned an invalid value.
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.IInstance.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <summary>
            Assigns the value of this <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> into a new <see cref="T:MCSharp.Compilation.Instancing.IInstance"/>.
            If possible, not of the <see cref="T:MCSharp.Compilation.Instancing.IConstantInstance"/> interface.
            </summary>
            <param name="compile"></param>
            <param name="identifier">The <see cref="P:MCSharp.Compilation.Instancing.IInstance.Identifier"/> of the new <see cref="T:MCSharp.Compilation.Instancing.IInstance"/>.</param>
            <returns>Returns a new <see cref="T:MCSharp.Compilation.Instancing.IInstance"/>.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.IInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc cref="M:MCSharp.Compilation.Instancing.IInstanceExtensions.SaveToBlock(MCSharp.Compilation.Instancing.IInstance,MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[])"/>
            <param name="range"></param>
            <seealso cref="M:MCSharp.Compilation.Instancing.IInstanceExtensions.SaveToBlock(MCSharp.Compilation.Instancing.IInstance,MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[])"/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.IInstance.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc cref="M:MCSharp.Compilation.Instancing.IInstanceExtensions.LoadFromBlock(MCSharp.Compilation.Instancing.IInstance,MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[])"/>
            <param name="range"></param>
            <seealso cref="M:MCSharp.Compilation.Instancing.IInstanceExtensions.LoadFromBlock(MCSharp.Compilation.Instancing.IInstance,MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[])"/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.IInstanceExtensions.SaveToBlock(MCSharp.Compilation.Instancing.IInstance,MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[])">
            <summary>
            Saves this <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> to the given set of <see cref="T:MCSharp.Linkage.Minecraft.Objective"/>s.
            </summary>
            <param name="instance">The <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> to save.</param>
            <param name="location"></param>
            <param name="selector"></param>
            <exception cref="T:System.InvalidOperationException">Thrown when the relevant length of <paramref name="block"/> does not match <see cref="M:MCSharp.Linkage.ITypeExtensions.GetBlockSize(MCSharp.Linkage.IType,MCSharp.Compilation.Compiler)"/>.</exception>
            <seealso cref="M:MCSharp.Compilation.Instancing.IInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)"/>
            <param name="block">The array of <see cref="T:MCSharp.Linkage.Minecraft.Objective"/>s to save to.</param>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.IInstanceExtensions.LoadFromBlock(MCSharp.Compilation.Instancing.IInstance,MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[])">
            <summary>
            Loads a value for this <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> from the given set of <see cref="T:MCSharp.Linkage.Minecraft.Objective"/>s.
            </summary>
            <param name="instance">The <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> to load.</param>
            <param name="location"></param>
            <param name="selector"></param>
            <exception cref="T:System.InvalidOperationException">Thrown when the relevant length of <paramref name="block"/> does not match <see cref="M:MCSharp.Linkage.ITypeExtensions.GetBlockSize(MCSharp.Linkage.IType,MCSharp.Compilation.Compiler)"/>.</exception>
            <seealso cref="M:MCSharp.Compilation.Instancing.IInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)"/>
            <param name="block">The array of <see cref="T:MCSharp.Linkage.Minecraft.Objective"/>s to load from.</param>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.ObjectInstance">
            <summary>
            Represents an instance of the base object class, similar to an instance of C#'s <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.ObjectInstance.AddressObjectiveName">
            <summary>
            The name of the Minecraft objective used to store <see cref="P:MCSharp.Compilation.Instancing.ObjectInstance.Pointer"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.ObjectInstance.AddressObjectiveCriterion">
            <summary>
            The type of the Minecraft objective used to store <see cref="P:MCSharp.Compilation.Instancing.ObjectInstance.Pointer"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.ObjectInstance.AddressObjective">
            <summary>
            The <see cref="T:MCSharp.Linkage.Minecraft.Objective"/> used to store all <see cref="P:MCSharp.Compilation.Instancing.ObjectInstance.Pointer"/> values.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.ObjectInstance.Type">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.ObjectInstance.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.ObjectInstance.Pointer">
            <summary>
            The number ID used to access the entity this <see cref="T:MCSharp.Compilation.Instancing.ObjectInstance"/> currently points to.
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.ObjectInstance.#ctor(MCSharp.Compilation.Compiler.CompileArguments,MCSharp.Linkage.IType,System.String,MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.Instancing.ObjectInstance"/>.
            </summary>
            <param name="location">The location this <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> will be created in.</param>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> of this <see cref="T:MCSharp.Compilation.Instancing.IInstance"/>.</param>
            <param name="identifier">The <see cref="P:MCSharp.Compilation.Instancing.ObjectInstance.Identifier"/> of this <see cref="T:MCSharp.Compilation.Instancing.IInstance"/>.</param>
            <param name="pointer">The <see cref="P:MCSharp.Compilation.Instancing.ObjectInstance.Pointer"/> of this <see cref="T:MCSharp.Compilation.Instancing.ObjectInstance"/>.</param>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.ObjectInstance.GetSelector(MCSharp.Compilation.Compiler.CompileArguments)">
            <summary>
            Use the <see cref="P:MCSharp.Compilation.Instancing.ObjectInstance.Pointer"/> to access the entity this <see cref="T:MCSharp.Compilation.Instancing.ObjectInstance"/> currently points to. Only one entity can be selected at a time.
            </summary>
            <param name="location">The location the entity will be accessed in.</param>
            <returns>The selector to the entity this <see cref="T:MCSharp.Compilation.Instancing.ObjectInstance"/> currently points to as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.ObjectInstance.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.ObjectInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.ObjectInstance.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.PrimitiveInstance">
            <summary>
            Represents an instance of a primitive type.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.Type">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.Identifier">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.#ctor(MCSharp.Linkage.IType,System.String)">
            <summary>
            Base constructor for all <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance"/>s.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> that defines this instance.</param>
            <param name="identifier">The local identifier for this instance.</param>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.PrimitiveInstance.ObjectiveInstance">
            <summary>
            Represents an <see cref="T:MCSharp.Compilation.Instancing.IConstantInstance"/> of an objective.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.ObjectiveInstance.Value">
            <summary>
            The <see cref="T:MCSharp.Linkage.Minecraft.Objective"/> that this <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.ObjectiveInstance"/> represents.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.ObjectiveInstance.MCSharp#Compilation#Instancing#IConstantInstance#Value">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.ObjectiveInstance.#ctor(MCSharp.Linkage.IType,System.String,MCSharp.Linkage.Minecraft.Objective)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.ObjectiveInstance"/> that holds <paramref name="value"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> that defines this instance.</param>
            <param name="identifier">The local identifier for this instance.</param>
            <param name="value">The value to hold within this <see cref="T:MCSharp.Compilation.Instancing.IConstantInstance"/>.</param>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.ObjectiveInstance.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.ObjectiveInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.ObjectiveInstance.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance">
            <summary>
            Represents an <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> of an integer value.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.Objective">
            <summary>
            The <see cref="T:MCSharp.Linkage.Minecraft.Objective"/> that holds the value of this <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance"/>.
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.Constant">
            <summary>
            Represents the <see cref="T:MCSharp.Compilation.Instancing.IConstantInstance"/> version of <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.Constant.Value">
            <summary>
            The value of this <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.Constant"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.Constant.MCSharp#Compilation#Instancing#IConstantInstance#Value">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.Constant.#ctor(MCSharp.Linkage.IType,System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.Constant"/> that holds <paramref name="value"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> that defines this instance.</param>
            <param name="identifier">The local identifier for this instance.</param>
            <param name="value">The value to hold within this <see cref="T:MCSharp.Compilation.Instancing.IConstantInstance"/>.</param>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.Constant.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.Constant.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance.Constant.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance">
            <summary>
            Represents an <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> of a boolean value.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.Objective">
            <summary>
            The <see cref="T:MCSharp.Linkage.Minecraft.Objective"/> that holds the value of this <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance"/>.
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.Constant">
            <summary>
            Represents the <see cref="T:MCSharp.Compilation.Instancing.IConstantInstance"/> version of <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.Constant.Value">
            <summary>
            The value of this <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.Constant"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.Constant.MCSharp#Compilation#Instancing#IConstantInstance#Value">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.Constant.#ctor(MCSharp.Linkage.IType,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.Constant"/> that holds <paramref name="value"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> that defines this instance.</param>
            <param name="identifier">The local identifier for this instance.</param>
            <param name="value">The value to hold within this <see cref="T:MCSharp.Compilation.Instancing.IConstantInstance"/>.</param>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.Constant.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.Constant.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance.Constant.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.StringInstance.Value">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.StringInstance.MCSharp#Compilation#Instancing#IConstantInstance#Value">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.StringInstance.#ctor(MCSharp.Linkage.IType,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.StringInstance"/> that holds <paramref name="value"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> that defines this instance.</param>
            <param name="identifier">The local identifier for this instance.</param>
            <param name="value">The value to hold within this <see cref="T:MCSharp.Compilation.Instancing.IConstantInstance"/>.</param>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.StringInstance.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.StringInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.StringInstance.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.SelectorInstance.Value">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.SelectorInstance.MCSharp#Compilation#Instancing#IConstantInstance#Value">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.SelectorInstance.#ctor(MCSharp.Linkage.IType,System.String,MCSharp.Linkage.Minecraft.Selector)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.SelectorInstance"/> that holds <paramref name="value"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> that defines this instance.</param>
            <param name="identifier">The local identifier for this instance.</param>
            <param name="value">The value to hold within this <see cref="T:MCSharp.Compilation.Instancing.IConstantInstance"/>.</param>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.SelectorInstance.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.SelectorInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.SelectorInstance.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.JsonInstance.Value">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.PrimitiveInstance.JsonInstance.MCSharp#Compilation#Instancing#IConstantInstance#Value">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.JsonInstance.#ctor(MCSharp.Linkage.IType,System.String,MCSharp.Linkage.Minecraft.Text.RawText)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.JsonInstance"/> that holds <paramref name="value"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> that defines this instance.</param>
            <param name="identifier">The local identifier for this instance.</param>
            <param name="value">The value to hold within this <see cref="T:MCSharp.Compilation.Instancing.IConstantInstance"/>.</param>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.JsonInstance.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.JsonInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.PrimitiveInstance.JsonInstance.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Instancing.StructInstance">
            <summary>
            Represents an instance of a struct type.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.StructInstance.Type">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.StructInstance.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.StructInstance.FieldInstances">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Instancing.StructInstance.Scope">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.StructInstance.#ctor(MCSharp.Compilation.Compiler.CompileArguments,MCSharp.Linkage.IType,System.String)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.Instancing.StructInstance"/>.
            </summary>
            <param name="location"></param>
            <param name="type"></param>
            <param name="identifier"></param>
            <exception cref="T:MCSharp.Compilation.Instancing.IInstance.InvalidTypeException"></exception>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.StructInstance.Copy(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.StructInstance.SaveToBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.StructInstance.LoadFromBlock(MCSharp.Compilation.Compiler.CompileArguments,System.String,MCSharp.Linkage.Minecraft.Objective[],System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Compilation.Instancing.StructInstance.ToString">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.IScopeHolder">
            <summary>
            Represents something that can hold a <see cref="P:MCSharp.Compilation.IScopeHolder.Scope"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.IScopeHolder.Scope">
            <summary>
            The <see cref="P:MCSharp.Compilation.IScopeHolder.Scope"/> held by this <see cref="T:MCSharp.Compilation.IScopeHolder"/>.
            </summary>
        </member>
        <member name="T:MCSharp.Compilation.ResultInfo">
            <summary>
            Represents the information about the success/failure of some operation.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.ResultInfo.DefaultSuccess">
            <summary>
            A successful <see cref="T:MCSharp.Compilation.ResultInfo"/> with some generic success message.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.ResultInfo.Success">
            <summary>
            Whether or not the operation was successful.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.ResultInfo.Failure">
            <summary>
            Whether or not the operation was a failure.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.ResultInfo.Message">
            <summary>
            The message attached to the result of the operation.
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.ResultInfo.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.ResultInfo"/>.
            </summary>
            <param name="success">Whether or not the operation was successful.</param>
            <param name="message">The message to attach to the result of the operation.</param>
        </member>
        <member name="M:MCSharp.Compilation.ResultInfo.op_Equality(MCSharp.Compilation.ResultInfo,MCSharp.Compilation.ResultInfo)">
            <summary>
            Compares the <see cref="P:MCSharp.Compilation.ResultInfo.Success"/> and <see cref="P:MCSharp.Compilation.ResultInfo.Message"/> values of <paramref name="left"/> and <paramref name="right"/>.
            </summary>
            <param name="left">One of the <see cref="T:MCSharp.Compilation.ResultInfo"/>s to compare.</param>
            <param name="right">One of the <see cref="T:MCSharp.Compilation.ResultInfo"/>s to compare.</param>
            <returns>Returns <see langword="true"/> if both of the compared values are equivalent.</returns>
        </member>
        <member name="M:MCSharp.Compilation.ResultInfo.op_Inequality(MCSharp.Compilation.ResultInfo,MCSharp.Compilation.ResultInfo)">
            <summary>
            Compares the <see cref="P:MCSharp.Compilation.ResultInfo.Success"/> and <see cref="P:MCSharp.Compilation.ResultInfo.Message"/> values of <paramref name="left"/> and <paramref name="right"/>.
            </summary>
            <param name="left">One of the <see cref="T:MCSharp.Compilation.ResultInfo"/>s to compare.</param>
            <param name="right">One of the <see cref="T:MCSharp.Compilation.ResultInfo"/>s values to compare.</param>
            <returns>Returns <see langword="true"/> if either of the compared values are not equivalent.</returns>
        </member>
        <member name="M:MCSharp.Compilation.ResultInfo.op_Addition(MCSharp.Compilation.ResultInfo,System.String)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.ResultInfo"/> by appending <paramref name="right"/> to the end of <paramref name="left"/>'s <see cref="P:MCSharp.Compilation.ResultInfo.Message"/>.
            </summary>
            <param name="left">The original <see cref="T:MCSharp.Compilation.ResultInfo"/>.</param>
            <param name="right">The <see cref="T:System.String"/> to append.</param>
            <returns>Returns the <see cref="T:MCSharp.Compilation.ResultInfo"/> with <paramref name="left"/>'s <see cref="P:MCSharp.Compilation.ResultInfo.Success"/> value.</returns>
        </member>
        <member name="M:MCSharp.Compilation.ResultInfo.op_Addition(System.String,MCSharp.Compilation.ResultInfo)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.ResultInfo"/> by appending <paramref name="left"/> to the front of <paramref name="right"/>'s <see cref="P:MCSharp.Compilation.ResultInfo.Message"/>.
            </summary>
            <param name="left">The <see cref="T:System.String"/> to append.</param>
            <param name="right">The original <see cref="T:MCSharp.Compilation.ResultInfo"/>.</param>
            <returns>Returns the <see cref="T:MCSharp.Compilation.ResultInfo"/> with <paramref name="right"/>'s <see cref="P:MCSharp.Compilation.ResultInfo.Success"/> value.</returns>
        </member>
        <member name="M:MCSharp.Compilation.ResultInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Compilation.Scope">
            <summary>
            Represents a scope within code.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Scope.Name">
            <summary>
            The identifier of this <see cref="T:MCSharp.Compilation.Scope"/>. Anonymous scope have a <see langword="null"/> <see cref="P:MCSharp.Compilation.Scope.Name"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Scope.Holder">
            <summary>
            The <see cref="T:MCSharp.Compilation.IScopeHolder"/> that holds this <see cref="T:MCSharp.Compilation.Scope"/>, if any.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Scope.Root">
            <summary>
            The root of this <see cref="T:MCSharp.Compilation.Scope"/>, found recursively.
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Scope.Parent">
            <summary>
            The parent of this <see cref="T:MCSharp.Compilation.Scope"/> (or <see langword="null"/> if root).
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Scope.Children">
            <summary>
            The read-only child <see cref="T:MCSharp.Compilation.Scope"/>s of this <see cref="T:MCSharp.Compilation.Scope"/>.
            <para>The only way to add more children is to call <see cref="M:MCSharp.Compilation.Scope.#ctor(System.String,MCSharp.Compilation.Scope)"/>.</para>
            </summary>
        </member>
        <member name="P:MCSharp.Compilation.Scope.Instances">
            <summary>
            The read-only <see cref="T:MCSharp.Compilation.Instancing.IInstance"/>s of this <see cref="T:MCSharp.Compilation.Scope"/>.
            </summary>
            <seealso cref="M:MCSharp.Compilation.Scope.AddInstance(MCSharp.Compilation.Instancing.IInstance)"/>
        </member>
        <member name="P:MCSharp.Compilation.Scope.AnonymousInstances">
            <summary>
            The read-only <see cref="T:MCSharp.Compilation.Instancing.IInstance"/>s with no name of this <see cref="T:MCSharp.Compilation.Scope"/>.
            </summary>
            <seealso cref="M:MCSharp.Compilation.Scope.AddInstance(MCSharp.Compilation.Instancing.IInstance)"/>
        </member>
        <member name="M:MCSharp.Compilation.Scope.#ctor(System.String,MCSharp.Compilation.Scope)">
            <summary>
            Creates a new <see cref="T:MCSharp.Compilation.Scope"/> that is a child of <paramref name="parent"/>.
            </summary>
            <param name="name">The name of this <see cref="T:MCSharp.Compilation.Scope"/>. Can be <see langword="null"/> to make this anonymous.</param>
            <param name="parent">The parent of the new <see cref="T:MCSharp.Compilation.Scope"/>. Can be <see langword="null"/> to make this a root.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="parent"/> already contains an immediate child called <paramref name="name"/>.</exception>
        </member>
        <member name="M:MCSharp.Compilation.Scope.AddInstance(MCSharp.Compilation.Instancing.IInstance)">
            <summary>
            Adds the given <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> to <see cref="P:MCSharp.Compilation.Scope.Instances"/> if <paramref name="instance"/>'s <see cref="P:MCSharp.Compilation.Instancing.IInstance.Identifier"/>'s <see cref="T:System.String"/> does not exist as a key already.
            </summary>
            <param name="instance">The <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> to add to this <see cref="T:MCSharp.Compilation.Scope"/>'s <see cref="P:MCSharp.Compilation.Scope.Instances"/>.</param>
            <returns>Returns a <see cref="T:MCSharp.Compilation.ResultInfo"/> based on if there is already an <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> with <paramref name="instance"/>'s <see cref="P:MCSharp.Compilation.Instancing.IInstance.Identifier"/>'s <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Scope.FindFirstInstanceByName(System.String)">
            <summary>
            Starting with <see langword="this"/>, goes through parents' <see cref="P:MCSharp.Compilation.Scope.Instances"/> to find the <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> from <paramref name="identifier"/>.
            </summary>
            <param name="identifier">The key in <see cref="P:MCSharp.Compilation.Scope.Instances"/> to look for.</param>
            <returns>Returns the <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> found or <see langword="null"/> when not found.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Scope.FindFirstParentScopeByName(System.String)">
            <summary>
            Finds the closest parent to this <see cref="T:MCSharp.Compilation.Scope"/> with the given <see cref="P:MCSharp.Compilation.Scope.Name"/>.
            </summary>
            <param name="name">The <see cref="P:MCSharp.Compilation.Scope.Name"/> to check for.</param>
            <returns>Returns the <see cref="T:MCSharp.Compilation.Scope"/> found.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Scope.FindLastParentScopeByName(System.String)">
            <summary>
            Finds the farthest parent to this <see cref="T:MCSharp.Compilation.Scope"/> with the given <see cref="P:MCSharp.Compilation.Scope.Name"/>.
            </summary>
            <param name="name">The <see cref="P:MCSharp.Compilation.Scope.Name"/> to check for.</param>
            <returns>Returns the <see cref="T:MCSharp.Compilation.Scope"/> found.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Scope.GetFirstNamedParent">
            <summary>
            Finds the closest parent to this <see cref="T:MCSharp.Compilation.Scope"/>.
            </summary>
            <returns>Returns the <see cref="T:MCSharp.Compilation.Scope"/> found.</returns>
        </member>
        <member name="M:MCSharp.Compilation.Scope.GetInstanceOrTypeHolder">
            <summary>
            Finds the closest <see cref="T:MCSharp.Compilation.IScopeHolder"/> to this <see cref="T:MCSharp.Compilation.Scope"/> that is an <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> or <see cref="T:MCSharp.Linkage.IType"/>.
            </summary>
            <returns>Returns the <see cref="T:MCSharp.Compilation.IScopeHolder"/> found. Will always be one of the two interfaces or <see	langword="null"/>.</returns>
        </member>
        <member name="T:MCSharp.Compilation.VirtualMachine">
            <summary>
            Represents a virtual machine.
            </summary>
        </member>
        <member name="M:MCSharp.Compilation.VirtualMachine.GenerateRandomIntegerInstance(MCSharp.Compilation.Compiler.CompileArguments)">
            <summary>
            Creates an <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance"/> with a random value at <paramref name="location"/>.
            </summary>
            <param name="location">The location of the <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance"/>.</param>
            <returns>The <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance"/>.</returns>
        </member>
        <member name="M:MCSharp.Converters.NameStyleConverter.CamelToSnake(System.String)">
            <summary>
            "folder\exampleText" → "folder\example_text"
            </summary>
            <param name="camel">A string in pascal case.</param>
            <returns>Returns a string in snake case.</returns>
        </member>
        <member name="M:MCSharp.Converters.NameStyleConverter.PascalToSnake(System.String)">
            <summary>
            "Folder\ExampleText" → "folder\example_text"
            </summary>
            <param name="pascal">A string in pascal case.</param>
            <returns>Returns a string in snake case.</returns>
        </member>
        <member name="T:MCSharp.Linkage.ClassType">
            <summary>
            Represents the names for the different ways data is stored in objects.
            </summary>
        </member>
        <member name="F:MCSharp.Linkage.ClassType.Class">
            <summary>"class"</summary>
        </member>
        <member name="F:MCSharp.Linkage.ClassType.Struct">
            <summary>"struct"</summary>
        </member>
        <member name="F:MCSharp.Linkage.ClassType.Primitive">
            <summary>Only possible through MCSharp extensions.</summary>
        </member>
        <member name="T:MCSharp.Linkage.EnumLinker">
            <summary>
            Returns various <see cref="T:System.Enum"/>s from <see cref="T:Antlr4.Runtime.ParserRuleContext"/>(s).
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.EnumLinker.LinkModifiers(MCSharpParser.ModifierContext[])">
            <summary>
            Links the given <see cref="T:MCSharpParser.ModifierContext"/>s to their corresponding <see cref="T:MCSharp.Linkage.Modifier"/>s.
            </summary>
            <param name="modifiers">A collection of <see cref="T:MCSharpParser.ModifierContext"/> taken from script.</param>
            <returns>Returns a <see cref="T:MCSharp.Linkage.Modifier"/> value.</returns>
        </member>
        <member name="M:MCSharp.Linkage.EnumLinker.LinkClassType(MCSharpParser.Class_typeContext)">
            <summary>
            Links the given <see cref="T:MCSharpParser.Class_typeContext"/> to its corresponding <see cref="T:MCSharp.Linkage.ClassType"/>.
            </summary>
            <param name="type">A <see cref="T:MCSharpParser.Class_typeContext"/> taken from script.</param>
            <returns>Returns a <see cref="T:MCSharp.Linkage.ClassType"/> value.</returns>
        </member>
        <member name="M:MCSharp.Linkage.EnumLinker.LinkMemberType(MCSharpParser.Member_definitionContext)">
            <summary>
            Links the given <see cref="T:MCSharpParser.Member_definitionContext"/> to its corresponding <see cref="T:MCSharp.Linkage.MemberType"/>.
            </summary>
            <param name="definition">A <see cref="T:MCSharpParser.Member_definitionContext"/> taken from script.</param>
            <returns>Returns a <see cref="T:MCSharp.Linkage.MemberType"/> value.</returns>
        </member>
        <member name="T:MCSharp.Linkage.Extensions.LinkerExtension">
            <summary>
            Represents an extension to the linker that adds <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/>s.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.LinkerExtension.Compiler">
            <summary>
            The <see cref="P:MCSharp.Linkage.Extensions.LinkerExtension.Compiler"/> this extension adds to.
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.LinkerExtension.#ctor(MCSharp.Compilation.Compiler)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Extensions.LinkerExtension"/>.
            </summary>
            <param name="compiler">The <see cref="T:MCSharp.Compilation.Compiler"/> this extension will add to.</param>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.LinkerExtension.CreatePredefinedTypes(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@,MCSharp.Compilation.Compiler.OnTickDelegate@)">
            <summary>
            Create <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/>(s) and add them to <see cref="P:MCSharp.Compilation.Compiler.DefinedTypes"/>.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.Extensions.MCSharpLinkerExtension">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.StorageSelector">
            <summary>
            The selector for default storage.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.ObjectIdentifier">
            <summary>Identifier for the object type.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.ObjectiveIdentifier">
            <summary>Identifier for the objective type.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.IntIdentifier">
            <summary>Identifier for the integer type.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.BoolIdentifier">
            <summary>Identifier for the boolean type.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.FloatIdentifier">
            <summary>Identifier for the floating-point type.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.StringIdentifier">
            <summary>Identifier for the string type.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.SelectorIdentifier">
            <summary>Identifier for the selector type.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.JsonIdentifier">
            <summary>Identifier for the JSON type.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.ChatIdentifier">
            <summary>Identifier for the "chat" class.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.WorldIdentifier">
            <summary>Identifier for the "world" class.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.AttributeIdentifier">
            <summary>Identifier for the attribute abstract class.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.EntityAttributeIdentifier">
            <summary>Identifier for the entity attribute.</summary>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.#ctor(MCSharp.Compilation.Compiler)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.CreatePredefinedTypes(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@,MCSharp.Compilation.Compiler.OnTickDelegate@)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.CreatePredefinedObject(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates the <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/> for the <see cref="T:MCSharp.Compilation.Instancing.ObjectInstance"/> type "object".
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.CreatePredefinedInt(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates the <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/> for the <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.IntegerInstance"/> type "int".
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.CreatePredefinedBool(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates the <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/> for the <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.BooleanInstance"/> type "string".
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.CreatePredefinedObjective(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates the <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/> for the <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.ObjectiveInstance"/> type "objective".
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.CreatePredefinedString(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates the <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/> for the <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.StringInstance"/> type "string".
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.CreatePredefinedSelector(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates the <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/> for the <see cref="T:MCSharp.Compilation.Instancing.PrimitiveInstance.SelectorInstance"/> type "Selector".
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.CreatePredefinedJson(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates the <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/> for the type "Json".
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.CreatePredefinedChat(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates the <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/> for the type "Chat".
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.CreatePredefinedWorld(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates the <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/> for the type "World".
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Extensions.MCSharpLinkerExtension.CreatePredefinedAttribute(MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates the <see cref="T:MCSharp.Linkage.Predefined.PredefinedType"/>s for the type "Attribute".
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.IConstructor">
            <summary>
            Represents a constructor for some type.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IConstructor.Declarer">
            <summary>
            The type that has defined this constructor.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IConstructor.Modifiers">
            <summary>
            The modifiers that affect this constructor.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IConstructor.Invoker">
            <summary>
            The mcfunction file that will contain the final commands to execute this constructor.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.IConversion">
            <summary>
            Represents a custom type conversion operation.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IConversion.Explicit">
            <summary>
            Wether or not this <see cref="T:MCSharp.Linkage.IConversion"/> is defined as being explicit.
            </summary>
            <remarks>Returns the opposite of <see cref="P:MCSharp.Linkage.IConversion.Implicit"/>.</remarks>
        </member>
        <member name="P:MCSharp.Linkage.IConversion.Implicit">
            <summary>
            Wether or not this <see cref="T:MCSharp.Linkage.IConversion"/> is defined as being implicit.
            </summary>
            <remarks>Returns the opposite of <see cref="P:MCSharp.Linkage.IConversion.Explicit"/>.</remarks>
        </member>
        <member name="P:MCSharp.Linkage.IConversion.ReferenceType">
            <summary>
            The <see cref="T:MCSharp.Linkage.IType"/> of <see cref="T:MCSharp.Compilation.Instancing.IInstance"/>s that will be cast to <see cref="P:MCSharp.Linkage.IConversion.TargetType"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IConversion.TargetType">
            <summary>
            The <see cref="T:MCSharp.Linkage.IType"/> of <see cref="T:MCSharp.Compilation.Instancing.IInstance"/>s that will be cast from <see cref="P:MCSharp.Linkage.IConversion.ReferenceType"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IConversion.Function">
            <summary>
            The <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/> used to invoke the conversion.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.IExpression">
            <summary>
            Represents an expression in code.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.IField">
            <summary>
            Represents a field member definition.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IField.Initializer">
            <summary>
            The expression to evaluate to set the initial value for this field.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.IMember">
            <summary>
            Represents a member, except constructors, for some type.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IMember.Declarer">
            <summary>
            The type that has defined this member.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IMember.Modifiers">
            <summary>
            The modifiers that affect this member.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IMember.TypeIdentifier">
            <summary>
            The local identifier that represents the return type.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IMember.Identifier">
            <summary>
            The local identifier the represents this member.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IMember.MemberType">
            <summary>
            Specifies if the <see cref="P:MCSharp.Linkage.IMember.Definition"/> is a <see cref="T:MCSharp.Linkage.IField"/>, <see cref="T:MCSharp.Linkage.IProperty"/>, or <see cref="T:MCSharp.Linkage.IMethod"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IMember.Definition">
            <summary>
            The <see cref="T:MCSharp.Linkage.IMemberDefinition"/> of this <see cref="T:MCSharp.Linkage.IMember"/>.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.IMemberDefinition">
            <summary>
            Represents the definition details specific the member type (field, property, method) for some <see cref="T:MCSharp.Linkage.IMember"/>.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.IMethod">
            <summary>
            Represents a method member definition.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IMethod.Invoker">
            <summary>
            The mcfunction file that will contain the final commands to execute this method.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IMethodParameter.TypeIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IMethodParameter.Identifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IMethodParameter.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IOperation.Operation">
            <summary>
            The type of <see cref="T:MCSharp.Linkage.Operation"/> this is.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IOperation.Function">
            <summary>
            The <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/> used to invoke the operation.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.IProperty">
            <summary>
            Represents a property member definition.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IProperty.Getter">
            <summary>
            The mcfunction file that will contain the commands to execute the 'getter' for the property.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IProperty.Setter">
            <summary>
            The mcfunction file that will contain the commands to execute the 'setter' for the property.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.IStatement">
            <summary>
            Represents a statement in code.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.IType">
            <summary>
            Represents a type definition.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IType.Modifiers">
            <summary>
            The modifiers that affect this type definition.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IType.ClassType">
            <summary>
            Whether this type definition is for a class, struct, or primitive.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IType.Identifier">
            <summary>
            The local identifier for this type definition.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IType.BaseTypes">
            <summary>
            The <see cref="T:MCSharp.Linkage.IType"/>(s) that this <see cref="T:MCSharp.Linkage.IType"/> inherits from.
            </summary>
            <seealso cref="P:MCSharp.Linkage.IType.DerivedTypes"/>
        </member>
        <member name="P:MCSharp.Linkage.IType.DerivedTypes">
            <summary>
            The <see cref="T:MCSharp.Linkage.IType"/>(s) that this <see cref="T:MCSharp.Linkage.IType"/> gives inheritance to.
            </summary>
            <remarks><i>Not to be confused with <see cref="P:MCSharp.Linkage.IType.SubTypes"/>.</i></remarks>
            <seealso cref="P:MCSharp.Linkage.IType.BaseTypes"/>
        </member>
        <member name="P:MCSharp.Linkage.IType.Members">
            <summary>
            The members defined by this type definition.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IType.Constructors">
            <summary>
            The constructors defined by this type definition.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IType.SubTypes">
            <summary>
            Type definitions defined within this type definition.
            </summary>
            <remarks><i>Not to be confused with <see cref="P:MCSharp.Linkage.IType.DerivedTypes"/>.</i></remarks>
        </member>
        <member name="P:MCSharp.Linkage.IType.Operations">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IType.Conversions">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.IType.StaticFieldInstances">
             <summary>
            
             </summary>
        </member>
        <member name="T:MCSharp.Linkage.IType.InitializeInstanceDelegate">
            <summary>
            
            </summary>
            <param name="location"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:MCSharp.Linkage.IType.InitializeInstance(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <summary>
            Creates an assignable <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> from nothing.
            </summary>
            <param name="location">The location in code to create the <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> in.</param>
            <param name="identifier">The <see cref="P:MCSharp.Compilation.Instancing.IInstance.Identifier"/> value used as a name.</param>
            <returns>Returns a new <see cref="T:MCSharp.Compilation.Instancing.IInstance"/>.</returns>
        </member>
        <member name="T:MCSharp.Linkage.ITypeExtensions">
            <summary>
            Extensions for the <see cref="T:MCSharp.Linkage.IType"/> interface.
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.EnumerateSubtypeTree(MCSharp.Linkage.IType)">
            <summary>
            Enumerates through all values in <see cref="P:MCSharp.Linkage.IType.SubTypes"/> recursively, starting from direct children of <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> to enumerate from.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> created by '<see langword="yield"/>-ing' over <see cref="P:MCSharp.Linkage.IType.SubTypes"/>'s <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.EnumerateSubtypeTreeReversed(MCSharp.Linkage.IType)">
            <summary>
            Enumerates through all values in <see cref="P:MCSharp.Linkage.IType.SubTypes"/> recursively, starting from the furthest children of <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> to enumerate from.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> created by '<see langword="yield"/>-ing' over <see cref="P:MCSharp.Linkage.IType.SubTypes"/>'s <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.EnumerateBaseTypeTree(MCSharp.Linkage.IType)">
            <summary>
            Enumerates through all values in <see cref="P:MCSharp.Linkage.IType.BaseTypes"/> recursively, starting from the direct parents of <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> to enumerate from.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> created by '<see langword="yield"/>-ing' over <see cref="P:MCSharp.Linkage.IType.BaseTypes"/>'s <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.EnumerateBasetypeTreeReversed(MCSharp.Linkage.IType)">
            <summary>
            Enumerates through all values in <see cref="P:MCSharp.Linkage.IType.BaseTypes"/> recursively, starting from the furthest parents of <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> to enumerate from.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> created by '<see langword="yield"/>-ing' over <see cref="P:MCSharp.Linkage.IType.BaseTypes"/>'s <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.EnumerateDerivedTypeTree(MCSharp.Linkage.IType)">
            <summary>
            Enumerates through all values in <see cref="P:MCSharp.Linkage.IType.DerivedTypes"/> recursively, starting from the direct children of <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> to enumerate from.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> created by '<see langword="yield"/>-ing' over <see cref="P:MCSharp.Linkage.IType.DerivedTypes"/>'s <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.EnumerateDerivedTypeTreeReversed(MCSharp.Linkage.IType)">
            <summary>
            Enumerates through all values in <see cref="P:MCSharp.Linkage.IType.DerivedTypes"/> recursively, starting from the furthest children of <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:MCSharp.Linkage.IType"/> to enumerate from.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> created by '<see langword="yield"/>-ing' over <see cref="P:MCSharp.Linkage.IType.DerivedTypes"/>'s <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.GetBlockSize(MCSharp.Linkage.IType,MCSharp.Compilation.Compiler)">
            <summary>
            Counts the number of <see cref="T:MCSharp.Linkage.Minecraft.Objective"/>s needed to store an <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> of type <paramref name="type"/>.
            </summary>
            <param name="type"></param>
            <param name="compiler"></param>
            <returns></returns>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.GetFieldBlockSizes(MCSharp.Linkage.IType,MCSharp.Compilation.Compiler)">
            <summary>
            Sums the value of <see cref="M:MCSharp.Linkage.ITypeExtensions.GetBlockSize(MCSharp.Linkage.IType,MCSharp.Compilation.Compiler)"/> for every <see cref="T:MCSharp.Linkage.IField"/> in <see cref="P:MCSharp.Linkage.IType.Members"/>.
            Only differs from <see cref="M:MCSharp.Linkage.ITypeExtensions.GetBlockSize(MCSharp.Linkage.IType,MCSharp.Compilation.Compiler)"/> when <paramref name="type"/> is not an <see cref="T:MCSharp.Compilation.Instancing.ObjectInstance"/>.
            </summary>
            <param name="type"></param>
            <param name="compiler"></param>
            <returns></returns>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.FindBestConstructor(MCSharp.Linkage.IType,MCSharp.Compilation.Compiler,MCSharp.Linkage.IType[],MCSharp.Compilation.Instancing.IInstance[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="genericArguments"></param>
            <param name="methodArguments"></param>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.FindBestConstructor(MCSharp.Linkage.IType,MCSharp.Compilation.Compiler,MCSharp.Linkage.IType[],MCSharp.Linkage.IType[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="genericArguments"></param>
            <param name="methodArguments"></param>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.FindBestMethod(MCSharp.Linkage.IType,MCSharp.Compilation.Compiler,MCSharp.Linkage.IType[],MCSharp.Linkage.IType[],System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="compiler"></param>
            <param name="genericArguments"></param>
            <param name="methodArguments"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.FindPropertyOrField(MCSharp.Linkage.IType,System.String)">
             <summary>
            
             </summary>
             <param name="type"></param>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:MCSharp.Linkage.ITypeExtensions.IsAssignableFrom(MCSharp.Linkage.IType,MCSharp.Linkage.IType)">
            <summary>
            Determines if <paramref name="type1"/> is directly assignable from <paramref name="type2"/>.
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="T:MCSharp.Linkage.MemberType">
            <summary>
            Represents a member type (field, property, method).
            </summary>
        </member>
        <member name="F:MCSharp.Linkage.MemberType.Field">
            <summary>Fields are values saved within a type instance.</summary>
        </member>
        <member name="F:MCSharp.Linkage.MemberType.Property">
            <summary>Properties are abstractions of methods into 'get' and 'set' to be accessed/modified like fields in code.</summary>
        </member>
        <member name="F:MCSharp.Linkage.MemberType.Method">
            <summary>Methods are blocks of code that can be executed with arguments and return a value.</summary>
        </member>
        <member name="T:MCSharp.Linkage.Minecraft.CustomFunction">
            <summary>
            Represents a <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/> that is defined by running some compiler extension code to create in-game code.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.Minecraft.CustomFunction.InvokeDelegate">
            <summary>
            
            </summary>
            <param name="compile"></param>
            <param name="generic"></param>
            <param name="arguments"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.CustomFunction.GenericParameters">
            <inheritdoc cref="P:MCSharp.Linkage.Minecraft.IFunction.GenericParameters"/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.CustomFunction.MCSharp#Linkage#Minecraft#IFunction#GenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.CustomFunction.MethodParameters">
            <inheritdoc cref="P:MCSharp.Linkage.Minecraft.IFunction.MethodParameters"/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.CustomFunction.MCSharp#Linkage#Minecraft#IFunction#MethodParameters">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.CustomFunction.ReturnTypeIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.CustomFunction.ReturnInstance">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.CustomFunction.#ctor(System.String,MCSharp.Linkage.Predefined.PredefinedGenericParameter[],MCSharp.Linkage.Predefined.PredefinedMethodParameter[],MCSharp.Linkage.Minecraft.CustomFunction.InvokeDelegate)">
            <summary>
            
            </summary>
            <param name="returnTypeIdentifier"></param>
            <param name="genericParameters"></param>
            <param name="methodParameters"></param>
            <param name="delegate"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.CustomFunction.Invoke(MCSharp.Compilation.Compiler.CompileArguments,MCSharp.Linkage.IType[],MCSharp.Compilation.Instancing.IInstance[],MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            
            </summary>
            <param name="compile"></param>
            <param name="generic"></param>
            <param name="arguments"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.CustomFunction.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Linkage.Minecraft.IFunction">
            <summary>
            Represents in-game code with arguments and a returnable value.
            </summary>
            <seealso cref="T:MCSharp.Linkage.Minecraft.IStatementFunction"/>
            <seealso cref="T:MCSharp.Linkage.Minecraft.CustomFunction"/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.IFunction.GenericParameters">
            <summary>
            The <see cref="T:MCSharp.Linkage.IGenericParameter"/>s for this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.IFunction.MethodParameters">
            <summary>
            The <see cref="T:MCSharp.Linkage.IMethodParameter"/>s for this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.IFunction.ReturnTypeIdentifier">
            <summary>
            The local identifier for the return type for this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.IFunction.ReturnInstance">
            <summary>
            The <see cref="T:MCSharp.Compilation.Instancing.IInstance"/> assigned to when returning.
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.IFunction.Invoke(MCSharp.Compilation.Compiler.CompileArguments,MCSharp.Linkage.IType[],MCSharp.Compilation.Instancing.IInstance[],MCSharp.Compilation.Instancing.IInstance@)">
            <summary>
            Invoke the <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/> with the given arguments.
            </summary>
            <param name="location">The location of the call.</param>
            <param name="generic">The generic arguments to invoke with.</param>
            <param name="arguments">The instance arguments to invoke with.</param>
            <param name="result">The result of the call.</param>
            <returns>The result of the compilation.</returns>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.InlineStatementFunction.GenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.InlineStatementFunction.MethodParameters">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.InlineStatementFunction.Statements">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.InlineStatementFunction.ReturnTypeIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.InlineStatementFunction.ReturnInstance">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.InlineStatementFunction.Invoke(MCSharp.Compilation.Compiler.CompileArguments,MCSharp.Linkage.IType[],MCSharp.Compilation.Instancing.IInstance[],MCSharp.Compilation.Instancing.IInstance@)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Linkage.Minecraft.IStatementFunction">
            <summary>
            Represents a <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/> that is defined by a list of <see cref="T:MCSharp.Linkage.IStatement"/>s.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.IStatementFunction.Statements">
            <summary>
            The list of <see cref="T:MCSharp.Linkage.IStatement"/>s that defines this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.Minecraft.Objective">
            <summary>
            Represents a Minecraft scoreboard objective.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Objective.Name">
            <summary>
            The in-game name of the objective.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Objective.Criterion">
            <summary>
            The in-game criterion of the objective.
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Objective.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Minecraft.Objective"/>.
            </summary>
            <param name="name">The in-game name of the objective.</param>
            <param name="criterion">The in-game criterion of the objective.</param>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Objective.AddObjective(MCSharp.Compilation.FunctionWriter,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Minecraft.Objective"/> and writes its 'add' command to the given <see cref="T:MCSharp.Compilation.FunctionWriter"/>.
            </summary>
            <param name="function">The function writer to write the 'add' command to.</param>
            <param name="name">The in-game name of the objective. If <see langword="null"/>, generates one.</param>
            <param name="criterion">The in-game criterion of the objective.</param>
            <returns>Returns a new <see cref="T:MCSharp.Linkage.Minecraft.Objective"/>.</returns>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Objective.AddObjective(MCSharp.Compilation.FunctionWriter,MCSharp.Linkage.Minecraft.Objective)">
            <summary>
            Writes an existing <see cref="T:MCSharp.Linkage.Minecraft.Objective"/>'s 'add' command to the given <see cref="T:MCSharp.Compilation.FunctionWriter"/>.
            </summary>
            <param name="function">The function writer to write the 'add' command to.</param>
            <param name="objective"></param>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Objective.ClearAnonymousNames">
            <summary>
            
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Objective.WriteRemove(MCSharp.Compilation.FunctionWriter)">
            <summary>
            
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Objective.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Selector.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Minecraft.Selector"/> from a raw string value.
            </summary>
            <param name="value">The selector in string form.</param>
        </member>
        <member name="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.Writer">
            <summary>
            The <see cref="T:MCSharp.Compilation.FunctionWriter"/> this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/> writes to.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.GenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.MethodParameters">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.Statements">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.ReturnInstance">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.ReturnTypeIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.Compiled">
            <summary>
            Whether or not the function has been compiled.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.Scope">
            <summary>
            The <see cref="T:MCSharp.Compilation.Scope"/> this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/> is in.
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.#ctor(MCSharp.Compilation.FunctionWriter,MCSharp.Compilation.IScopeHolder,MCSharp.Linkage.IGenericParameter[],MCSharp.Linkage.IMethodParameter[],MCSharp.Linkage.IStatement[],System.String,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/> with a scope of a <see cref="T:MCSharp.Compilation.IScopeHolder"/>.
            </summary>
            <param name="writer">The <see cref="T:MCSharp.Compilation.FunctionWriter"/> this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/> will write to.</param>
            <param name="holder">The <see cref="T:MCSharp.Compilation.IScopeHolder"/> this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/> belongs to.</param>
            <param name="genericParameters">The <see cref="T:MCSharp.Linkage.IGenericParameter"/>s of this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.</param>
            <param name="methodParameters">The <see cref="T:MCSharp.Linkage.IMethodParameter"/>s of this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.</param>
            <param name="statements">The <see cref="T:MCSharp.Linkage.IStatement"/>s of this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.</param>
            <param name="returnType">The local identifier of the return type for this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any argument is <see langword="null"/></exception>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.#ctor(MCSharp.Compilation.FunctionWriter,MCSharp.Compilation.Scope,MCSharp.Linkage.IGenericParameter[],MCSharp.Linkage.IMethodParameter[],MCSharp.Linkage.IStatement[],System.String,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/> with a custom <see cref="T:MCSharp.Compilation.Scope"/>.
            </summary>
            <param name="writer">The <see cref="T:MCSharp.Compilation.FunctionWriter"/> this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/> will write to.</param>
            <param name="scope">The <see cref="T:MCSharp.Compilation.Scope"/> this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/> belongs to.</param>
            <param name="genericParameters">The <see cref="T:MCSharp.Linkage.IGenericParameter"/>s of this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.</param>
            <param name="methodParameters">The <see cref="T:MCSharp.Linkage.IMethodParameter"/>s of this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.</param>
            <param name="statements">The <see cref="T:MCSharp.Linkage.IStatement"/>s of this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.</param>
            <param name="returnType">The local identifier of the return type for this <see cref="T:MCSharp.Linkage.Minecraft.IFunction"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any argument is <see langword="null"/></exception>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.CreateChildFunction(MCSharp.Linkage.IStatement[],MCSharp.Compilation.Settings,System.String)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/> located in a subdirectory of this <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/>.
            </summary>
            <param name="statements">The <see cref="P:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.Statements"/> of the new <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/>.</param>
            <param name="settings">The <see cref="T:MCSharp.Compilation.Settings"/> used to create the <see cref="T:MCSharp.Compilation.FunctionWriter"/>.</param>
            <param name="name">The <see cref="P:MCSharp.Compilation.FunctionWriter.Name"/> of the child function. Can be <see langword="null"/> to use the next integer value starting from zero.</param>
            <returns>Returns the created <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="statements"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.Invoke(MCSharp.Compilation.Compiler.CompileArguments,MCSharp.Linkage.IType[],MCSharp.Compilation.Instancing.IInstance[],MCSharp.Compilation.Instancing.IInstance@)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.StandaloneStatementFunction.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.ClickEvent.Action">
            <summary>The action to perform when clicked.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.ClickEvent.Value">
            <summary>The URL, file path, chat, command or book page used by the specified action.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverContentEntity.Name">
            <summary>Optional. Hidden if not present. A raw JSON text that is displayed as the name of the entity.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverContentEntity.Type">
            <summary>A string containing the type of the entity. Should be a namespaced entity ID. Present <c>minecraft:pig</c> if invalid.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverContentEntity.Id">
            <summary>A string containing the UUID of the entity in the hyphenated hexadecimal format. Should be a valid UUID.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverContentItem.Id">
            <summary>The namespaced item ID. Present <c>minecraft:air</c> if invalid.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverContentItem.Count">
            <summary>Optional. Size of the item stack.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverContentItem.Tag">
            <summary>Optional. A string containing the serialized NBT of the additional information about the item.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverContents.ShowText">
            <summary>Another raw JSON text component. Can be any valid text component type: string, array, or object.
            Note that clickEvent and hoverEvent do not function within the tooltip.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverContents.ShowItem">
            <summary>The item that should be displayed.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverContents.ShowEntity">
            <summary>The entity that should be displayed.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverEvent.Action">
            <summary>The type of tooltip to show.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverEvent.Value">
            <summary>The formatting and type of this tag varies depending on the action. Deprecated, use <see cref="P:MCSharp.Linkage.Minecraft.Text.HoverEvent.Contents"/> instead.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.HoverEvent.Contents">
            <summary>The formatting of this tag varies depending on the action.</summary>
        </member>
        <member name="T:MCSharp.Linkage.Minecraft.Text.RawText">
            <summary>
            A class that represents a Minecraft's JSON text.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Text">
            <summary>A string containing plain text to display directly. Can also be a number or boolean that is displayed directly.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Translate">
            <summary>A translation identifier, to be displayed as the corresponding text in the player's selected language.
            If no corresponding translation can be found, the identifier itself will be used as the translation text.
            This identifier is the same as the identifiers found in lang files from assets or resource packs.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Score">
            <summary>Displays a score holder's current score in an objective.
            Displays nothing if the given score holder or the given objective do not exist, or if the score holder is not tracked in the objective.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Selector">
            <summary>A string containing a selector. Displayed as the name of the player or entity found by the selector.
            If more than one player or entity is found by the selector, their names are displayed in either the form "Name1 and Name2" or the form "Name1, Name2, Name3, and Name4".
            Hovering over a name will show a tooltip with the name, type, and UUID of the target. Clicking a player's name suggests a command to whisper to that player.
            Shift-clicking a player's name inserts that name into chat. Shift-clicking a non-player entity's name inserts its UUID into chat.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Keybind">
            <summary>A keybind identifier, to be displayed as the name of the button that is currently bound to a certain action.
            For example, <c>key.inventory</c> will display "e" if the player is using the default control scheme.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Nbt">
            <summary> The NBT path used for looking up NBT values from an entity, a block entity or an NBT storage.
            NBT strings display their contents. Other NBT values are displayed as SNBT with no spacing or linebreaks.
            How values are displayed depends on the value of  interpret.
            If more than one NBT value is found, either by selecting multiple entities or by using a multi-value path, they are displayed in the form "Value1, Value2, Value3, Value4".
            Requires one of block, entity, or storage. Having more than one is allowed, but only one will be used.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Interpret">
            <summary>Optional, defaults to false. If true, the game will try to parse the text of each NBT value as a raw JSON text component.
            This usually only works if the value is an NBT string containing JSON, since JSON and SNBT are not compatible.
            If parsing fails, displays nothing. Ignored if <see cref="P:MCSharp.Linkage.Minecraft.Text.RawText.Nbt"/> is not present.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Block">
            <summary>A string specifying the coordinates of the block entity from which the NBT value is obtained. The coordinates can be absolute or relative. Ignored if <see cref="P:MCSharp.Linkage.Minecraft.Text.RawText.Nbt"/> is not present.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Entity">
            <summary>A string specifying the target selector for the entity or entities from which the NBT value is obtained. Ignored if <see cref="P:MCSharp.Linkage.Minecraft.Text.RawText.Nbt"/> is not present.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Storage">
            <summary>A string specifying the namespaced ID of the command storage from which the NBT value is obtained. Ignored if <see cref="P:MCSharp.Linkage.Minecraft.Text.RawText.Nbt"/> is not present.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Extra">
            <summary>A list of additional raw JSON text components to be displayed after this one.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Color">
            <summary>Optional. The color to render the content in.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Font">
            <summary>Optional. The resource location of the font for this component in the resource pack within <c>assets/[namespace]/font</c>.
            Defaults to <c>minecraft:default</c>.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Bold">
            <summary>Optional. Whether to render the content in bold.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Italic">
            <summary>Optional. Whether to render the content in italics.
            Note that text which is italicized by default, such as custom item names, can be unitalicized by setting this to false.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Underlined">
            <summary>Optional. Whether to underline the content.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Strikethrough">
            <summary>Optional. Whether to strikethrough the content.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Obfuscated">
            <summary>Optional. Whether to render the content obfuscated.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.Insertion">
            <summary>Optional. When the text is shift-clicked by a player, this string is inserted in their chat input.
            It does not overwrite any existing text the player was writing. This only works in chat messages.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.ClickEvent">
            <summary>Optional. Allows for events to occur when the player clicks on text. Only work in chat messages and written books, unless specified otherwise.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.HoverEvent">
            <summary>Optional. Allows for a tooltip to be displayed when the player hovers their mouse over text.</summary>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Text.RawText.FromJson(System.String)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Minecraft.Text.RawText"/> from a <see cref="T:System.String"/>.
            </summary>
            <param name="json">The JSON <see cref="T:System.String"/> to use.</param>
            <returns>The resulting <see cref="T:MCSharp.Linkage.Minecraft.Text.RawText"/>.</returns>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Text.RawText.GetJson">
            <summary>
            Creates the JSON <see cref="T:System.String"/> from this <see cref="T:MCSharp.Linkage.Minecraft.Text.RawText"/>.
            </summary>
            <returns>The resulting JSON <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.SerializeNamingPolicy">
            <summary>
            The <see cref="T:System.Text.Json.JsonNamingPolicy"/> for the serialization process.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.SerializerOptions">
            <summary>
            The <see cref="T:System.Text.Json.JsonSerializerOptions"/> for this <see cref="T:MCSharp.Linkage.Minecraft.Text.RawText"/>.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.DeserializeNamingPolicy">
            <summary>
            The <see cref="T:System.Text.Json.JsonNamingPolicy"/> for the deserialization process.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.DeserializerOptions">
            <summary>
            The <see cref="T:System.Text.Json.JsonSerializerOptions"/> for the deserialization process.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.RawText.NullableBoolConverter">
            <summary>
            
            </summary>
        </member>
        <member name="T:MCSharp.Linkage.Minecraft.Text.RawText.NullableBoolJsonConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Text.RawText.NullableBoolJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Text.RawText.NullableBoolJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.Boolean},System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Linkage.Minecraft.Text.RawText.MinecraftNamingPolicy">
            <summary>
            Represents the naming policy for Minecraft's raw JSON text.
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Text.RawText.MinecraftNamingPolicy.ConvertName(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Linkage.Minecraft.Text.RawText.DotNetNamingPolicy">
            <summary>
            Represents the naming policy for Dot NET.
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Minecraft.Text.RawText.DotNetNamingPolicy.ConvertName(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.ScoreData.Name">
            <summary>The name of the score holder whose score should be displayed. This can be a selector like @p or an explicit name.
            If the text is a selector, the selector must be guaranteed to never select more than one entity, possibly by adding limit=1.
            If the text is "*", it shows the reader's own score (for example, /tellraw @a {"score":{"name":"*","objective":"obj"}} shows every online player their own score in the "obj" objective).</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.ScoreData.Objective">
            <summary>The internal name of the objective to display the player's score in.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Minecraft.Text.ScoreData.Value">
            <summary>Optional. If present, this value is used regardless of what the score would have been.</summary>
        </member>
        <member name="T:MCSharp.Linkage.Modifier">
            <summary>
            Represents a collection of modifiers for types/members.
            </summary>
        </member>
        <member name="F:MCSharp.Linkage.Modifier.Public">
            <summary> "public" </summary>
        </member>
        <member name="F:MCSharp.Linkage.Modifier.Private">
            <summary> "private" </summary>
        </member>
        <member name="F:MCSharp.Linkage.Modifier.Protected">
            <summary> "protected" </summary>
        </member>
        <member name="F:MCSharp.Linkage.Modifier.Static">
            <summary> "static" </summary>
        </member>
        <member name="F:MCSharp.Linkage.Modifier.Abstract">
            <summary> "abstract" </summary>
        </member>
        <member name="F:MCSharp.Linkage.Modifier.Virtual">
            <summary> "virtual" </summary>
        </member>
        <member name="F:MCSharp.Linkage.Modifier.Override">
            <summary> "override" </summary>
        </member>
        <member name="T:MCSharp.Linkage.Predefined.PredefinedConstructor">
            <summary>
            Represents a predefined constructor.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedConstructor.Declarer">
            <summary>
            The predefined type that has defined this constructor.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedConstructor.MCSharp#Linkage#IConstructor#Declarer">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedConstructor.Modifiers">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedConstructor.Invoker">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Predefined.PredefinedConstructor.#ctor(MCSharp.Linkage.Predefined.PredefinedType,MCSharp.Linkage.Modifier,MCSharp.Linkage.Minecraft.StandaloneStatementFunction)">
            <summary>
            Creates a new predefined constructor.
            </summary>
            <param name="declarer">The predefined type that has defined this constructor.</param>
            <param name="modifiers">The modifiers that affect this constructor.</param>
            <param name="invoker">The mcfunction file that will contain the final commands to execute this constructor.</param>
        </member>
        <member name="T:MCSharp.Linkage.Predefined.PredefinedConversion">
            <summary>
            Represents a predefined constructor.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedConversion.Explicit">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedConversion.ReferenceType">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedConversion.TargetType">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedConversion.Function">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Predefined.PredefinedConversion.#ctor(MCSharp.Linkage.IType,MCSharp.Linkage.IType,MCSharp.Linkage.Minecraft.IFunction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:MCSharp.Linkage.Predefined.PredefinedConversion"/>.
            </summary>
            <param name="referenceType">The reference type.</param>
            <param name="targetType">The target type.</param>
            <param name="function">The function.</param>
            <param name="implicit">Whether the conversion is explicit.</param>
        </member>
        <member name="T:MCSharp.Linkage.Predefined.PredefinedExpression">
            <summary>
            Represents a predefined expression.
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Predefined.PredefinedExpression.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Predefined.PredefinedExpression"/> by using Antlr to lex/parse <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression string to parse.</param>
            <exception cref="T:MCSharp.Linkage.Predefined.PredefinedExpression.InvalidPredefinedExpressionException">Thrown when Antlr sends a syntax error while lexing/parsing <paramref name="expression"/>.</exception>
        </member>
        <member name="M:MCSharp.Linkage.Predefined.PredefinedExpression.ErrorListener.Antlr4#Runtime#IAntlrErrorListener{Antlr4#Runtime#IToken}#SyntaxError(System.IO.TextWriter,Antlr4.Runtime.IRecognizer,Antlr4.Runtime.IToken,System.Int32,System.Int32,System.String,Antlr4.Runtime.RecognitionException)">
            <exception cref="T:MCSharp.Linkage.Predefined.PredefinedExpression.InvalidPredefinedExpressionException">Thrown when Antlr sends a syntax error while lexing/parsing.</exception>
        </member>
        <member name="M:MCSharp.Linkage.Predefined.PredefinedExpression.ErrorListener.Antlr4#Runtime#IAntlrErrorListener{System#Int32}#SyntaxError(System.IO.TextWriter,Antlr4.Runtime.IRecognizer,System.Int32,System.Int32,System.Int32,System.String,Antlr4.Runtime.RecognitionException)">
            <exception cref="T:MCSharp.Linkage.Predefined.PredefinedExpression.InvalidPredefinedExpressionException">Thrown when Antlr sends a syntax error while lexing/parsing.</exception>
        </member>
        <member name="T:MCSharp.Linkage.Predefined.PredefinedMember">
            <summary>
            Represents a predefined member.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedMember.Declarer">
            <summary>
            The predefined type that has defined this member.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedMember.MCSharp#Linkage#IMember#Declarer">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedMember.Scope">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedMember.Modifiers">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedMember.TypeIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedMember.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedMember.MemberType">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedMember.Definition">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Predefined.PredefinedMember.#ctor(MCSharp.Compilation.Scope,MCSharp.Linkage.Predefined.PredefinedType,MCSharp.Linkage.Modifier,System.String,System.String,MCSharp.Linkage.MemberType,MCSharp.Linkage.Predefined.PredefinedMemberDefinition)">
            <summary>
            Creates a new predefined member definition.
            </summary>
            <param name="declarer">The predefined type that has defined this member definition.</param>
            <param name="modifiers">The modifiers that affect this member definition.</param>
            <param name="returnTypeIdentifier">The local identifier for the return type of this member definition.</param>
            <param name="identifier">The local identifier for this member definition.</param>
            <param name="memberType">Whether this member is a field, property, or method.</param>
            <param name="definition">The <see cref="T:MCSharp.Linkage.IMemberDefinition"/>.</param>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedMethodParameter.TypeIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedMethodParameter.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedMethodParameter.Instance">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Linkage.Predefined.PredefinedStatement">
            <summary>
            Represents a predefined statement.
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Predefined.PredefinedStatement.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Predefined.PredefinedStatement"/> by using Antlr to lex/parse <paramref name="statement"/>.
            </summary>
            <param name="statement">The statement string to parse.</param>
            <exception cref="T:MCSharp.Linkage.Predefined.PredefinedStatement.InvalidPredefinedStatementException">Thrown when Antlr sends a syntax error while lexing/parsing <paramref name="statement"/>.</exception>
        </member>
        <member name="T:MCSharp.Linkage.Predefined.PredefinedType">
            <summary>
            Represents a predefined type.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.Modifiers">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.ClassType">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.BaseTypes">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.DerivedTypes">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.Scope">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.Members">
            <inheritdoc cref="P:MCSharp.Linkage.IType.Members"/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.MCSharp#Linkage#IType#Members">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.Constructors">
            <inheritdoc cref="P:MCSharp.Linkage.IType.Constructors"/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.MCSharp#Linkage#IType#Constructors">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.SubTypes">
            <inheritdoc cref="P:MCSharp.Linkage.IType.SubTypes"/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.MCSharp#Linkage#IType#SubTypes">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.Operations">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.Conversions">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Predefined.PredefinedType.StaticFieldInstances">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Predefined.PredefinedType.#ctor(MCSharp.Compilation.Scope,MCSharp.Linkage.Modifier,MCSharp.Linkage.ClassType,System.String,MCSharp.Linkage.Predefined.PredefinedMember[],MCSharp.Linkage.Predefined.PredefinedConstructor[],MCSharp.Linkage.Predefined.PredefinedType[],MCSharp.Linkage.IType.InitializeInstanceDelegate,MCSharp.Collections.IHashSetDictionary{MCSharp.Linkage.Operation,MCSharp.Linkage.IOperation},System.Collections.Generic.IDictionary{MCSharp.Linkage.IType,MCSharp.Linkage.IConversion})">
            <summary>
            Creates a new predefined type definition.
            </summary>
            <param name="modifiers">The modifiers that affect this type definition.</param>
            <param name="classType">Whether this type is a class or a struct.</param>
            <param name="identifier">The local identifier for this type definition.</param>
            <param name="members">The members defined by this type definition.</param>
            <param name="subTypes">The type definitions defined by this type definition.</param>
        </member>
        <member name="M:MCSharp.Linkage.Predefined.PredefinedType.InitializeInstance(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Predefined.PredefinedType.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Linkage.Script.ScriptConstructor">
            <summary>
            Represents a constructor defined by script.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptConstructor.Declarer">
            <summary>
            The type, defined by script, that has defined this constructor.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptConstructor.Modifiers">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptConstructor.Invoker">
            <summary>
            The mcfunction file that will contain the commands to execute this constructor.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptConstructor.MCSharp#Linkage#IConstructor#Invoker">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptConstructor.Scope">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptConstructor.#ctor(MCSharp.Compilation.Scope,MCSharp.Linkage.Script.ScriptType,MCSharpParser.Constructor_definitionContext,MCSharp.Compilation.Settings,MCSharp.Compilation.VirtualMachine,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates a new constructor that has been defined by script.
            </summary>
            <param name="declarer">The type that has defined this constructor.</param>
            <param name="context">The parser context used to create the constructor.</param>
            <param name="settings">Value passed to create <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/>(s).</param>
            <param name="virtualMachine">Value passed to create <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/>(s).</param>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptConstructor.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Linkage.Script.ScriptExpression">
            <summary>
            Represents an expression defined from script.
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptExpression.CreateArrayFromArray(MCSharpParser.ExpressionContext[])">
            <summary>
            Creates an array of <see cref="T:MCSharp.Linkage.Script.ScriptExpression"/>s using the individual elements of <paramref name="contexts"/> as arguments for constructors.
            </summary>
            <param name="contexts">The collection of <see cref="T:MCSharpParser.ExpressionContext"/>s to convert into <see cref="T:MCSharp.Linkage.Script.ScriptExpression"/>s.</param>
            <returns>Returns an array of <see cref="T:MCSharp.Linkage.Script.ScriptExpression"/></returns>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptGenericParameter.CreateArrayFromArray(MCSharpParser.Generic_parameterContext[])">
            <summary>
            Creates an array of <see cref="T:MCSharp.Linkage.Script.ScriptGenericParameter"/>s using the individual elements of <paramref name="contexts"/> as arguments for constructors.
            </summary>
            <param name="contexts">The collection of <see cref="T:MCSharpParser.Generic_parameterContext"/>s to convert into <see cref="T:MCSharp.Linkage.Script.ScriptMethodParameter"/>s.</param>
            <returns>Returns an array of <see cref="T:MCSharp.Linkage.Script.ScriptGenericParameter"/></returns>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.Declarer">
            <summary>
            The type, defined by script, that has defined this member.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.MCSharp#Linkage#IMember#Declarer">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.Scope">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.FullContext">
            <summary>
            TODO: Possibly remove this.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.Modifiers">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.TypeIdentifier">
            <summary>
            The local identifier that represents the return type.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.MCSharp#Linkage#IMember#TypeIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.Identifier">
            <summary>
            The local identifier that represents this member.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.MCSharp#Linkage#IMember#Identifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.MemberType">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.Definition">
            <summary>
            The <see cref="T:MCSharp.Linkage.Script.ScriptMemberDefinition"/> of this <see cref="T:MCSharp.Linkage.Script.ScriptMember"/>
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMember.MCSharp#Linkage#IMember#Definition">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptMember.#ctor(MCSharp.Compilation.Scope,MCSharp.Linkage.Script.ScriptType,MCSharpParser.Member_definitionContext,MCSharp.Compilation.Settings,MCSharp.Compilation.VirtualMachine,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates a new member defined by script.
            </summary>
            <param name="declarer">The type that has defined this member.</param>
            <param name="context"></param>
            <param name="settings">Value passed to create <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/>(s).</param>
            <param name="virtualMachine">Value passed to create <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/>(s).</param>
        </member>
        <member name="T:MCSharp.Linkage.Script.ScriptMemberDefinition">
            <summary>
            Represents a <see cref="T:MCSharp.Linkage.IMemberDefinition"/> defined in script.
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptMemberDefinition.CreateMemberDefinitionLink(MCSharp.Linkage.Script.ScriptMember,MCSharp.Compilation.Settings,MCSharp.Compilation.VirtualMachine,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            
            </summary>
            <param name="member"></param>
            <param name="settings"></param>
            <param name="virtualMachine"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptMemberDefinition.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Linkage.Script.ScriptMemberDefinition.Field">
            <summary>
            Represents a <see cref="T:MCSharp.Linkage.IField"/> defined by script.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMemberDefinition.Field.Initializer">
            <inheritdoc cref="P:MCSharp.Linkage.IField.Initializer"/>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptMemberDefinition.Field.#ctor(MCSharpParser.ExpressionContext)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Script.ScriptMemberDefinition.Field"/>.
            </summary>
            <param name="initialize">The value of <see cref="P:MCSharp.Linkage.Script.ScriptMemberDefinition.Field.Initializer"/>.</param>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptMemberDefinition.Field.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Linkage.Script.ScriptMemberDefinition.Property">
            <summary>
            Represents a <see cref="T:MCSharp.Linkage.IProperty"/> defined by script.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMemberDefinition.Property.Getter">
            <inheritdoc cref="P:MCSharp.Linkage.IProperty.Getter"/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMemberDefinition.Property.Setter">
            <inheritdoc cref="P:MCSharp.Linkage.IProperty.Setter"/>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptMemberDefinition.Property.#ctor(MCSharp.Linkage.Minecraft.StandaloneStatementFunction,MCSharp.Linkage.Minecraft.StandaloneStatementFunction)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Script.ScriptMemberDefinition.Property"/>.
            </summary>
            <param name="get">The value of <see cref="P:MCSharp.Linkage.Script.ScriptMemberDefinition.Property.Getter"/>.</param>
            <param name="set">The value of <see cref="P:MCSharp.Linkage.Script.ScriptMemberDefinition.Property.Setter"/>.</param>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptMemberDefinition.Property.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Linkage.Script.ScriptMemberDefinition.Method">
            <summary>
            Represents a <see cref="T:MCSharp.Linkage.IMethod"/> defined by script.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMemberDefinition.Method.Invoker">
            <inheritdoc cref="P:MCSharp.Linkage.IMethod.Invoker"/>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptMemberDefinition.Method.#ctor(MCSharp.Linkage.Minecraft.StandaloneStatementFunction)">
            <summary>
            Creates a new <see cref="T:MCSharp.Linkage.Script.ScriptMemberDefinition.Method"/>.
            </summary>
            <param name="invoke">The value of <see cref="P:MCSharp.Linkage.Script.ScriptMemberDefinition.Method.Invoker"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="invoke"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptMemberDefinition.Method.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMethodParameter.TypeIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMethodParameter.MCSharp#Linkage#IMethodParameter#TypeIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMethodParameter.Identifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptMethodParameter.MCSharp#Linkage#IMethodParameter#Identifier">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptMethodParameter.CreateArrayFromArray(MCSharpParser.Method_parameterContext[])">
            <summary>
            Creates an array of <see cref="T:MCSharp.Linkage.Script.ScriptMethodParameter"/>s using the individual elements of <paramref name="contexts"/> as arguments for constructors.
            </summary>
            <param name="contexts">The collection of <see cref="T:MCSharpParser.Method_parameterContext"/>s to convert into <see cref="T:MCSharp.Linkage.Script.ScriptMethodParameter"/>s.</param>
            <returns>Returns an array of <see cref="T:MCSharp.Linkage.Script.ScriptMethodParameter"/></returns>
        </member>
        <member name="T:MCSharp.Linkage.Script.ScriptType">
            <summary>
            Represents a type defined by script.
            </summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.Modifiers">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.ClassType">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.Identifier">
            <inheritdoc cref="P:MCSharp.Linkage.IType.Identifier"/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.MCSharp#Linkage#IType#Identifier">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.BaseTypes">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.DerivedTypes">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.Scope">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.Members">
            <inheritdoc cref="P:MCSharp.Linkage.IType.Members"/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.MCSharp#Linkage#IType#Members">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.Constructors">
            <inheritdoc cref="P:MCSharp.Linkage.IType.Constructors"/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.MCSharp#Linkage#IType#Constructors">
            <inheritdoc/>
        </member>
        <member name="F:MCSharp.Linkage.Script.ScriptType.i_constructor">
            <summary>The count of constructors.</summary>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.SubTypes">
            <inheritdoc cref="P:MCSharp.Linkage.IType.SubTypes"/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.MCSharp#Linkage#IType#SubTypes">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.Operations">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.Conversions">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.StaticFieldInstances">
            <inheritdoc/>
        </member>
        <member name="P:MCSharp.Linkage.Script.ScriptType.InitInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptType.#ctor(MCSharpParser.Type_definitionContext,MCSharpParser.Member_definitionContext[],MCSharpParser.Constructor_definitionContext[],MCSharp.Compilation.Settings,MCSharp.Compilation.VirtualMachine,MCSharp.Compilation.Scope,MCSharp.Compilation.Compiler.PostFirstPassDelegate@,MCSharp.Compilation.Compiler.OnLoadDelegate@)">
            <summary>
            Creates a new type definition defined by script.
            </summary>
            <param name="typeContext">The <see cref="T:MCSharpParser.Type_definitionContext"/> value taken from script.</param>
            <param name="memberContexts">The <see cref="T:MCSharpParser.Member_definitionContext"/> values taken from script.</param>
            <param name="constructorContexts">The <see cref="T:MCSharpParser.Constructor_definitionContext"/> values taken from script.</param>
            <param name="settings">Value passed to create <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/>(s).</param>
            <param name="virtualMachine">Value passed to create <see cref="T:MCSharp.Linkage.Minecraft.StandaloneStatementFunction"/>(s).</param>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptType.InitializeInstance(MCSharp.Compilation.Compiler.CompileArguments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCSharp.Linkage.Script.ScriptType.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MCSharp.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MCSharp.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MCSharp.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
